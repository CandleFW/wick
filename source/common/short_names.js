/**
 * Global Document instance short name
 * @property DOC
 * @private
 * @memberof module:wick~internals
 * @type 	{Document}
 */
export const DOC = document;

/**
 * Global Window Instance short name
 * @property WIN
 * @private
 * @memberof module:wick~internals
 * @type 	{Window}
 */
export const WIN = window;

/**
 * Global HTMLElement class short name
 * @property EL
 * @private
 * @memberof module:wick~internals
 * @type 	{external:HTMLElement}
 */
export const EL = HTMLElement;

/**
 * Global Object class short name
 * @property OB
 * @private
 * @memberof module:wick~internals
 * @type Object
 */
export const OB = Object;

/**
 * Global String class short name
 * @property STR
 * @private
 * @memberof module:wick~internals
 * @type String
 */
export const STR = String;

/**
 * Global Array class short name
 * @property AR
 * @private
 * @memberof module:wick~internals
 * @type 	{Array}
 */
export const AR = Array;

/**
 * Global Number class short name
 * @property NUM
 * @private
 * @memberof module:wick~internals
 * @type 	{Number}
 */
export const NUM = Number;

/**
 * Global Date class short name
 * @property DT
 * @private
 * @memberof module:wick~internals
 * @type 	{Date}
 */
export const DT = Date;

/**
 * Global Boolean class short name
 * @property BO
 * @private
 * @memberof module:wick~internals
 * @type 	{Boolean}
 */
export const BO = Boolean;

/***************** Functions ********************/

/**
 *  Global document.createElement short name function.
 * @method DOC
 * @private
 * @memberof module:wick~internals
 * @param 	{external:String}  		e   - tagname of element to create. 
 * @return  {external:HTMLElement}  		- HTMLElement instance generated by the document. 
 */
export const cE = (e) => DOC.createElement(e);

/**
 *  Element.prototype.appendChild short name wrapper.
 * @method aC
 * @private
 * @memberof module:wick~internals
 * @param 	{external:HTMLElement}  		el  	- parent HTMLElement.
 * @return  {HTMLElement | HTMLNode}  		ch_el 	- child HTMLElement or HTMLNode. 
 */
export const aC = (el, ch_el) => el.appendChild(ch_el);

/**
 *  Element.prototype.cloneNode short name wrapper.
 * @method cN
 * @private
 * @memberof module:wick~internals
 * @param 	{external:HTMLElement}  		el   - HTMLElement to clone.
 * @return  {Boolean}  			bool - Switch for deep clone
 */
export const cN = (el, bool) => el.cloneNode(bool);

/**
 *  Element.prototype.getElementsByTagName short name wrapper.
 * @method gETN
 * @private
 * @memberof module:wick~internals
 * @param 	{external:HTMLElement}  		el   - HTMLElement to find tags on.
 * @return  {external:String}  			tag - tagnames of elements to find.
 */
export const gETN = (el, tag) => el.getElementsByTagName(tag);