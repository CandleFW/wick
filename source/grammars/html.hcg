# 
# Wick HTML Parser file
# 

@NAME CandleFW_HTML_Parser

@EXT html

@SYMBOL </ <! -- 

@IGNORE θws θnl 

@IMPORT ./string.hcg as string

##############################################################################################
##############################################################################################
#### HTML / ML
##############################################################################################
##############################################################################################
    
<> HTML → RESULT

<> RESULT → DTD(*) BODY                                                                     ↦r { $sym2.DTD = $sym1, $sym2 }

<> BODY → GOAL_TAG

<> GOAL_TAG → TAG

<> TAG → < TAGNAME ATTRIBUTES? > TAG_BODY? </ TAGNAME >                                     ↦r { { type:env.typ["HTML_"+$sym2.toUpperCase()] || env.typ.HTML_Element, tag:$sym2.toUpperCase(), attributes:$$sym3 || [], nodes:$sym5 || [], VOID:false, pos } }
    │ < TAGNAME ATTRIBUTES? / >                                                             ↦r { { type:env.typ["HTML_"+$sym2.toUpperCase()] || env.typ.HTML_Element, tag:$sym2.toUpperCase(), attributes:$$sym3 || [], nodes:[], VOID:false, pos } }
    │ < VOID_NAME ATTRIBUTES? /? >                                                          ↦r { { type:env.typ["HTML_"+$sym2.toUpperCase()] || env.typ.HTML_Element, tag:$sym2.toUpperCase(), attributes:$$sym3 || [], nodes:[], VOID:true, pos } }
    
<> DTD → <! θid? --?  TEXT_NODE_DATA  --? >                                                 ↦r { { type:"DTD", tag:$$sym2|| "", value:$$sym4 }  }                


###########################################################################################
# https://www.w3.org/TR/2011/WD-html-markup-20110113/syntax.html#syntax-elements
###########################################################################################

<> VOID_NAME → τinput
    │ τarea
    │ τbase
    │ τbr
    │ τcol
    │ τcommand
    │ τembed
    │ τhr
    │ τimg
    │ τkeygen
    │ τlink
    │ τmeta
    │ τparam
    │ τsource
    │ τtrack
    │ τwbr

<> TAG_BODY → TAG_BODY_ITEM(+)

<> TAG_BODY_ITEM → TEXT_NODE                        
    │ TAG   
    │ DTD                                                                                                                            
    
<> ATTRIBUTES → ATTRIBUTE(+)                                                                    ↦r { $$sym1 }

<> ATTRIBUTE → ATTRIBUTE_HEAD \= ATTRIBUTE_BODY                                                  ↦r { {type:env.typ.HTMLAttribute, name:$sym1, value:$sym3, IS_BINDING:false, pos } }
    │ ATTRIBUTE_HEAD                                                                            ↦r { {type:env.typ.HTMLAttribute, name:$sym1, value:"", IS_BINDING:false, pos } }

<> ATTRIBUTE_HEAD → ' identifier? '                                                             ↦r { $$sym2 }
    │ " identifier? "                                                                           ↦r { $$sym2 }
    │ identifier

<> ATTRIBUTE_BODY → \" BODY_SYMBOLS(*") \"                                                      f:return{ $sym2 || "" }
    | \' BODY_SYMBOLS(*") \''                                                                   f:return{ $sym2 || "" }
    │ identifier
    │ θnum                                          

<> TAGNAME → (RED θnl) identifier


<> identifier → θid ( θid │ \- │ \: )(*")                                  				        ↦r { $sym1 + $sym2 } 

<> TEXT_NODE → TEXT_NODE_DATA                                                                   ↦r { {type:env.typ.HTMLText, data:$sym1, IS_BINDING:false, pos } }
<> TEXT_NODE_DATA → BODY_SYMBOLS(+")                                                            
 
<> BODY_SYMBOLS → θid │ θnl │ θws │ θsym │ θop │ θob │ θcb │ θnum │ θkeyword │ θany │ \! │ \( 





