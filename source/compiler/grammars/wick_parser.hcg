@NAME CFW Wick Parser

@EXT wick

@SYMBOL </ (( (!(

@IGNORE θws θnl 

@IMPORT ../../../node_modules/@candlefw/js/source/grammar/ecmascript.hcg as js

@IMPORT ./html.hcg as html

#@IMPORT ./wickup.hcg as wickup

@IMPORT ../../../node_modules/@candlefw/css/source/grammar/css.hcg as css 

<> S → start                                                                                ↦r{ $sym1 }

<> start → html::HTML
     │ js::javascript 

+> js::primary_expression → html::TAG                                                       ↦r { new env.fn.js_wick_node($sym1) }

+> html::BODY →  (IMPORT_TAG)(+) html::GOAL_TAG                                             ↦return { $sym2.import_list = $sym1, $sym2}
    
+> html::TAG_BODY_ITEM → < τstyle html::ATTRIBUTES? >  css::CSS?  </ τstyle >               ↦return { env.fn.element_selector($$sym2, $$sym3, $$sym5,  env, lex ) }
    │ < τscript html::ATTRIBUTES? > js::script? </ τscript >                                ↦return { env.fn.element_selector($$sym2, $$sym3, $$sym5,  env, lex ) }
    │ < τjs html::ATTRIBUTES? > js::script? </ τjs >                                        ↦return { env.fn.element_selector($$sym2, $$sym3, $$sym5,  env, lex ) }
    #│ \( \{ js::expression \{ js::script? \} \} (ERR θws ) \)                                ↦r {env.fn.element_selector("script", ["on", null, new env.wick_binding(["on",null, $sym2])], $sym4, env, lex) }

<> IMPORT_TAG → < τimport html::ATTRIBUTES? /? > ( </ τimport > )?                          ↦return { env.fn.element_selector($$sym2, $$sym3, null,  env, lex ) }

+> html::VOID_NAME →  τf

+> html::ATTRIBUTE_BODY → WICK_BINDING                                  
    │ " WICK_BINDING "                                                                      ↦return { $sym2 }

+> html::TEXT_NODE → WICK_BINDING                                                           ↦cstr ^text

<> WICK_BINDING → CALL_BINDING                              
    │ BASIC_BINDING

<> BASIC_BINDING →   ( \(( │ \(!( )  ↦{ env.start = lex.off+2 } js::expression? \) (ERR θws ) \)                                       ↦r {(env.off = lex.off, new env.fn.wick_binding($$sym2, null, env, lex,$$sym1 == "(!(") )}
<> CALL_BINDING →   ( \(( │ \(!( )  ↦{ env.start = lex.off+2 } js::expression? \) (ERR θws ) \( js::expression? \) (ERR θws ) \)      ↦r {(env.off = lex.off, new env.fn.wick_binding($$sym2, $$sym5, env, lex,$$sym1 == "(!(") )}

#<> CALL_BINDING →   \!? \(  \(  ↦{ env.start = lex.off+2 } html::BODY_SYMBOLS(+") \) (ERR θws ) \( html::BODY_SYMBOLS(*") \) (ERR θws ) \)      ↦r {(env.off = lex.off, new env.fn.wick_binding($$sym4, $$sym7, env, lex,$$sym2) )}