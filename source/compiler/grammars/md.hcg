@NAME CandleFW Markdown Parser

@EXT md

@SYMBOL ``` ``

@IMPORT ./html.hcg as html

<> MD → INLINE

<> MARKDOWN_BLOCKS → MD_BLOCK_PRE UNORDERED_LIST_ITEMS 	↦r { $sym2 }
	│ MD_BLOCK_PRE html::TEXT_NODE 						↦r { $sym2 }
	│ MD_BLOCK_PRE html::TAG  							↦r { $sym2 }
	│ MD_BLOCK_PRE 										↦cstr ^text
    │ MD_BLOCK_PRE BLOCK_QUOTES 						↦r { $sym2 }
   #│ CODE_BLOCK
   #│ UNORDERED_LIST_ITEMS

+> html::TAG_BODY_ITEM → MARKDOWN_BLOCKS

<> MD_BLOCK_PRE → θnl θws(*) ↦r {$sym1}

<> UNORDERED_LIST_ITEMS → (\* θws)(+) θws(*) (html::TEXT_NODE │ html::TAG)(+) ↦r { fn.element_selector("li", null, $sym3, env, lex, $sym1.length) }

<> BLOCK_QUOTES → (\> θws)(+) θws(*) (html::TEXT_NODE │ html::TAG)(+) 			↦r { fn.element_selector("blockquote", null, $sym3, env, lex, $sym1.length) }

<> HEADER → \# INLINE											↦r { fn.element_selector("h" + $sym1.length, null, $$sym2,  env, lex ) }

	
<> MD_INLINE_ELEMENTS → INLINE

<> INLINE → MD_INLINE_ELEMENT(+)						

<> MD_INLINE_ELEMENT → TEXT_NODE 
	│ EMPHASIS
	│ LINK
	│ CODE_QUOTE



<> CODE_BLOCK → ``` θid? ( θnl TEXT_NODE ↦r{fn.element_selector("pre", null,  [$$sym2], env, lex)} )(*) θnl ``` θnl 
																						
																			↦r { console.log("RAINBOW") ,fn.element_selector("pre", null,  $$sym3, env, lex) }

<> LINK → \[ TEXT_NODE \]\( TEXT_NODE \)

<> EMPHASIS → EMPHASIS_START \)												↦r { fn.element_selector("b", null,  $$sym2, env, lex) }

<> EMPHASIS_START → \( (MD_INLINE_ELEMENT(+) )

<> CODE_QUOTE → `` BODY_SYMBOLS(+")  `` 									↦r { fn.element_selector("code", null,  new fn.text([$sym2], env), env, lex) }

<> TEXT_NODE → (θid │ θws)(+") 												↦r {new fn.text([$sym1], env)} 
	
<> BODY_SYMBOLS → θid │ θany │ θws 

<> TEXT_NODE2 → BSYMS(+") 	↦cstr ^text

<> BSYMS → θid │ θsym │ θws


