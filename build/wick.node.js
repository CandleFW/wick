'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

/**
 * Global Document instance short name
 * @property DOC
 * @package
 * @memberof module:wick~internals
 * @type 	{Document}
 */
const DOC = (typeof(document) !== "undefined") ? document : ()=>{};

/**
 * Global Window Instance short name
 * @property WIN
 * @package
 * @memberof module:wick~internals
 * @type 	{Window}
 */
const WIN = (typeof(window) !== "undefined") ? window : ()=>{};

/**
 * Global HTMLElement class short name
 * @property EL
 * @package
 * @memberof module:wick~internals
 * @type 	{HTMLElement}
 */
const EL = (typeof(HTMLElement) !== "undefined") ? HTMLElement : ()=>{};

/**
 * Global Object class short name
 * @property OB
 * @package
 * @memberof module:wick~internals
 * @type Object
 */
const OB$1 = Object;

/**
 * Global String class short name
 * @property STR
 * @package
 * @memberof module:wick~internals
 * @type String
 */
const STR = String;

/**
 * Global Array class short name
 * @property AR
 * @package
 * @memberof module:wick~internals
 * @type 	{Array}
 */
const AR = Array;

/**
 * Global Number class short name
 * @property NUM
 * @package
 * @memberof module:wick~internals
 * @type 	{Number}
 */
const NUM = Number;

/**
 * Global Date class short name
 * @property DT
 * @package
 * @memberof module:wick~internals
 * @type 	{Date}
 */
const DT = Date;

/**
 * Global Boolean class short name
 * @property BO
 * @package
 * @memberof module:wick~internals
 * @type 	{Boolean}
 */
const BO = Boolean;

/***************** Functions ********************/

/**
 *  Global document.createElement short name function.
 * @method DOC
 * @package
 * @memberof module:wick~internals
 * @param 	{String}  		e   - tagname of element to create. 
 * @return  {HTMLElement}  		- HTMLElement instance generated by the document. 
 */
const createElement = (e) => document.createElement(e);

/**
 *  Element.prototype.appendChild short name wrapper.
 * @method appendChild
 * @package
 * @memberof module:wick~internals
 * @param 	{HTMLElement}  		el  	- parent HTMLElement.
 * @return  {HTMLElement | HTMLNode}  		ch_el 	- child HTMLElement or HTMLNode. 
 */
const appendChild$1 = (el, ch_el) => el.appendChild(ch_el);

/**
 *  Element.prototype.cloneNode short name wrapper.
 * @method cloneNode
 * @package
 * @memberof module:wick~internals
 * @param 	{HTMLElement}  		el   - HTMLElement to clone.
 * @return  {Boolean}  			bool - Switch for deep clone
 */
const cloneNode$1 = (el, bool) => el.cloneNode(bool);

/**
 *  Element.prototype.getElementsByTagName short name wrapper.
 * @method _getElementByTag_
 * @package
 * @memberof module:wick~internals
 * @param 	{HTMLElement}  		el   - HTMLElement to find tags on.
 * @return  {String}  			tag - tagnames of elements to find.
 */
const _getElementByTag_ = (el, tag) => el.getElementsByTagName(tag);

/**
 *  Shortname for `instanceof` expression
 * @method _instanceOf_
 * @package
 * @param      {object}  inst    The instance
 * @param      {object}  constr  The constructor
 * @return     {boolean}  the result of `inst instanceof constr`
 */
const _instanceOf_ = (inst, constr) => inst instanceof constr;

const _SealedProperty_ = (object, name, value) => OB$1.defineProperty(object, name, {value, configurable: false, enumerable: false, writable: true});
const _FrozenProperty_ = (object, name, value) => OB$1.defineProperty(object, name, {value, configurable: false, enumerable: false, writable: false});

/**
 * Used to call the Scheduler after a JavaScript runtime tick.
 *
 * Depending on the platform, caller will either map to requestAnimationFrame or it will be a setTimout.
 */
    
const caller = (typeof(window) == "object" && window.requestAnimationFrame) ? window.requestAnimationFrame : (f) => {
    setTimeout(f, 1);
};

const perf = (typeof(performance) == "undefined") ? { now: () => Date.now() } : performance;


/**
 * Handles updating objects. It does this by splitting up update cycles, to respect the browser event model. 
 *    
 * If any object is scheduled to be updated, it will be blocked from scheduling more updates until the next ES VM tick.
 */
class Spark {
    /**
     * Constructs the object.
     */
    constructor() {

        this.update_queue_a = [];
        this.update_queue_b = [];

        this.update_queue = this.update_queue_a;

        this.queue_switch = 0;

        this.callback = ()=>{};

        if(typeof(window) !== "undefined"){
            window.addEventListener("load",()=>{
                this.callback = () => this.update();
                caller(this.callback);
            });
        }else{
            this.callback = () => this.update();
        }

        this.frame_time = perf.now();

        this.SCHEDULE_PENDING = false;
    }

    /**
     * Given an object that has a _SCHD_ Boolean property, the Scheduler will queue the object and call its .update function 
     * the following tick. If the object does not have a _SCHD_ property, the Scheduler will persuade the object to have such a property.
     * 
     * If there are currently no queued objects when this is called, then the Scheduler will user caller to schedule an update.
     */
    queueUpdate(object, timestart = 1, timeend = 0) {

        if (object._SCHD_ || object._SCHD_ > 0) {
            if (this.SCHEDULE_PENDING)
                return;
            else
                return caller(this.callback);
        }

        object._SCHD_ = ((timestart & 0xFFFF) | ((timeend) << 16));

        this.update_queue.push(object);

        if (this._SCHD_)
            return;

        this.frame_time = perf.now() | 0;


        if(!this.SCHEDULE_PENDING){
            this.SCHEDULE_PENDING = true;
            caller(this.callback);
        }
    }

    removeFromQueue(object){

        if(object._SCHD_)
            for(let i = 0, l = this.update_queue.length; i < l; i++)
                if(this.update_queue[i] === object){
                    this.update_queue.splice(i,1);
                    object._SCHD_ = 0;

                    if(l == 1)
                        this.SCHEDULE_PENDING = false;

                    return;
                }
    }

    /**
     * Called by the caller function every tick. Calls .update on any object queued for an update. 
     */
    update() {

        this.SCHEDULE_PENDING = false;

        const uq = this.update_queue;
        const time = perf.now() | 0;
        const diff = Math.ceil(time - this.frame_time) | 1;
        const step_ratio = (diff * 0.06); //  step_ratio of 1 = 16.66666666 or 1000 / 60 for 60 FPS

        this.frame_time = time;
        
        if (this.queue_switch == 0)
            (this.update_queue = this.update_queue_b, this.queue_switch = 1);
        else
            (this.update_queue = this.update_queue_a, this.queue_switch = 0);

        for (let i = 0, l = uq.length, o = uq[0]; i < l; o = uq[++i]) {
            let timestart = ((o._SCHD_ & 0xFFFF)) - diff;
            let timeend = ((o._SCHD_ >> 16) & 0xFFFF);

            o._SCHD_ = 0;
            
            if (timestart > 0) {
                this.queueUpdate(o, timestart, timeend);
                continue;
            }

            timestart = 0;

            if (timeend > 0) 
                this.queueUpdate(o, timestart, timeend - diff);

            /** 
                To ensure on code path doesn't block any others, 
                scheduledUpdate methods are called within a try catch block. 
                Errors by default are printed to console. 
            **/
            try {
                o.scheduledUpdate(step_ratio, diff);
            } catch (e) {
                console.error(e);
            }
        }

        uq.length = 0;
    }
}

const spark = new Spark();

/**
 * The base class which all Model classes extend.
 * @memberof module:wick~internal .model
 * @alias ModelBase
 */
class ModelBase {
    constructor(root = null, address = []) {
        _SealedProperty_(this, "_cv_", []);
        _SealedProperty_(this, "fv", null);
        _SealedProperty_(this, "par", null);
        _SealedProperty_(this, "MUTATION_ID", 0);
        _SealedProperty_(this, "address", address);
        _SealedProperty_(this, "root", root || this);
        _SealedProperty_(this, "prop_name", "");
    }


    /**
     *   Remove all references to any objects still held by this object.
     *   @protected
     *   @instance
     */
    destroy() {

        //inform views of the models demise
        var view = this.fv;

        while (view) {
            let nx = view.nx;
            view.unsetModel();
            view = nx;
        }

        this._cv_ = null;
    }

    setHook(prop_name, data) { return data; }

    getHook(prop_name, data) { return data; }


    /**
     * Called by a class that extends ModelBase when on of its property values changes.
     * @param      {string}  changed_value  The changed value
     * @private
     */
    scheduleUpdate(changed_value) {
        if (!this.fv)
            return;


        this._cv_.push(changed_value);

        spark.queueUpdate(this);
    }


    getChanged(prop_name) {


        for (let i = 0, l = this._cv_.length; i < l; i++)
            if (this._cv_[i] == prop_name)
                return this[prop_name];

        return null;
    }

    addListener(listener) {
        return this.addView(listener);
    }


    /**
     * Adds a view to the linked list of views on the model. argument view MUST be an instance of View. 
     * @param {View} view - The view to _bind_ to the ModelBase
     * @throws {Error} throws an error if the value of `view` is not an instance of {@link View}.
     */
    addView(view) {
        if (view.model)
            if (view.model !== this) {
                view.model.removeView(view);
            } else return;

        if (this.fv) this.fv.pv = view;
        view.nx = this.fv;
        this.fv = view;

        view.pv = null;
        view.model = this;
        view.update(this);
    }

    /**
     * Removes view from set of views if the passed in view is a member of model. 
     * @param {View} view - The view to unbind from ModelBase
     */
    removeView(view) {
        

        if (view.model == this) {
            if (view == this.fv)
                this.fv = view.nx;

            if (view.nx)
                view.nx.pv = view.pv;
            if (view.pv)
                view.pv.nx = view.nx;

            view.nx = null;
            view.pv = null;
        }
    }


    /**
        Should return the value of the property if it is in the model and has been updated since the last cycle. Null otherwise.
        This should be overridden by a more efficient version by inheriting objects
    */
    isUpdated(prop_name) {

        let changed_properties = this._cv_;

        for (var i = 0, l = changed_properties.length; i < l; i++)
            if (changed_properties[i] == prop_name)
                if (this[prop_name] !== undefined)
                    return this[prop_name];

        return null;
    }



    /**
     * Called by the {@link spark} when if the ModelBase is scheduled for an update
     * @param      {number}  step    The step
     */
    scheduledUpdate(step) { this.updateViews(); }



    /**
     * Calls View#update on every bound View, passing the current state of the ModelBase.
     */
    updateViews() {

        let o = {};

        for (let p = null, i = 0, l = this._cv_.length; i < l; i++)
            (p = this._cv_[i], o[p] = this[p]);

        this._cv_.length = 0;

        var view = this.fv;

        while (view) {

            view.update(this, o);
            view = view.nx;
        }

        return;
    }



    /**
     * Updates views with a list of models that have been removed. 
     * Primarily used in conjunction with container based views, such as Templates.
     * @private
     */
    updateViewsRemoved(data) {

        var view = this.fv;

        while (view) {

            view.removed(data);

            view = view.nx;
        }
    }



    /** MUTATION FUNCTIONS **************************************************************************************/



    _deferUpdateToRoot_(data, MUTATION_ID = this.MUTATION_ID) {
        
        if(!this.root)
            return this;

        return this.root._setThroughRoot_(data, this.address, 0, this.address.length, MUTATION_ID);
    }



    _setThroughRoot_(data, address, index, len, m_id) {

        if (index >= len) {

            if (m_id !== this.MUTATION_ID) {
                let clone = this.clone();
                clone.set(data, true);
                clone.MUTATION_ID = (this.par) ? this.par.MUTATION_ID : this.MUTATION_ID + 1;
                return clone;
            }

            this.set(data, true);
            return this;
        }

        let i = address[index++];

        let model_prop = this.prop_array[i];

        if (model_prop.MUTATION_ID !== this.MUTATION_ID) {

            model_prop = model_prop.clone();

            model_prop.MUTATION_ID = this.MUTATION_ID;
        }

        this.prop_array[i] = model_prop;

        return model_prop._setThroughRoot_(data, address, index, len, model_prop.MUTATION_ID);
    }

    seal() {

        let clone = this._deferUpdateToRoot_(null, this.MUTATION_ID + 1);

        return clone;
    }

    clone() {

        let clone = new this.constructor(this);

        clone.prop_name = this.prop_name;
        clone._cv_ = this._cv_;
        clone.fv = this.fv;
        clone.par = this.par;
        clone.MUTATION_ID = this.MUTATION_ID;
        clone.address = this.address;
        clone.prop_name = this.prop_name;

        clone.root = (this.root == this) ? clone : this.root;

        return clone;
    }

    /**
     * Updates views with a list of models that have been added. 
     * Primarily used in conjunction with container based views, such as Templates.
     * @private
     */
    updateViewsAdded(data) {

        var view = this.fv;

        while (view) {

            view.added(data);

            view = view.nx;
        }
    }

    toJSON() { return JSON.stringify(this, null, '\t'); }


    /**
     * This will update the branch state of the data tree with a new branch if the MUTATION_ID is higher or lower than the current branch's parent level.
     * In this case, the new branch will stem from the root node, and all ancestor nodes from the originating child will be cloned.
     *
     * @param      {Object}         child_obj    The child object
     * @param      {(Object|number)}  MUTATION_ID  The mutation id
     * @return     {Object}         { description_of_the_return_value }
     */
    setMutation(child_obj, MUTATION_ID = child_obj.MUTATION_ID) {
        let clone = child_obj,
            result = this;

        if (MUTATION_ID == this.MUTATION_ID) return child_obj;

        if (this.par)
            result = this.par.setMutation(this, MUTATION_ID);

        if (MUTATION_ID > this.MUTATION_ID) {
            result = this.clone();
            result.MUTATION_ID = this.MUTATION_ID + 1;
        }

        clone = child_obj.clone();
        clone.MUTATION_ID = result.MUTATION_ID;
        result[clone.prop_name] = clone;

        return clone;
    }
}

/**
    Schema type. Handles the parsing, validation, and filtering of Model data properties. 
*/
class SchemeConstructor {

    constructor() {

        this.start_value = undefined;
    }

    /**
        Parses value returns an appropriate transformed value
    */
    parse(value) {

        return value;
    }

    /**

    */
    verify(value, result) {

        result.valid = true;
    }

    filter(id, filters) {
        for (let i = 0, l = filters.length; i < l; i++)
            if (id === filters[i]) return true;
        return false;
    }

    string(value) {

        return value + "";
    }
}

class MCArray extends Array {

    constructor() {
        super();
    }

    push(...item) {
        item.forEach(item => {
            if (item instanceof Array)
                item.forEach((i) => {
                    super.push(i);
                });
            else
                super.push(item);
        });
    }

    //For compatibility
    __setFilters__() {

    }

    getChanged() {

    }

    toJSON() { return this; }

    toJson() { return JSON.stringify(this, null, '\t'); }
}

// A no op function
let EmptyFunction = () => {};
let EmptyArray = [];

class ModelContainerBase extends ModelBase {

    constructor(root = null, address = []) {

        super(root, address);

        _SealedProperty_(this, "scope", null);
        _SealedProperty_(this, "first_link", null);

        //For keeping the container from garbage collection.
        _SealedProperty_(this, "pin", EmptyFunction);

        //For Linking to original 
        _SealedProperty_(this, "next", null);
        _SealedProperty_(this, "prev", null);

        //Filters are a series of strings or number selectors used to determine if a model should be inserted into or retrieved from the container.
        _SealedProperty_(this, "_filters_", null);

        this.validator = new SchemeConstructor();

        return this;
    }

    setByIndex(index) { /* NO OP **/ }

    getByIndex(index, value) { /* NO OP **/ }

    destroy() {


        this._filters_ = null;

        if (this.scope) {
            this.scope.__unlink__(this);
        }

        super.destroy();
    }

    /**
        Get the number of Models held in this._mContainerBase

        @returns {Number}
    */
    get length() { return 0; }

    set length(e) { /* NO OP */ }

    /** 
        Returns a ModelContainerBase type to store the results of a get().
    */
    __defaultReturn__(USE_ARRAY) {
        if (USE_ARRAY) return new MCArray;

        let n = new this.constructor();

        n.key = this.key;
        n.validator = this.validator;
        n.model = this.model;

        this.__link__(n);

        return n;
    }

    /**
        Array emulating kludge

        @returns The result of calling this.insert
    */
    push(...item) {
        item.forEach(item => {
            if (this.scope) {
                if (item instanceof Array)
                    item.forEach((i) => {
                        this.insert(i, true, true);
                    });
                else
                    this.insert(item, true, true);

            } else {
                if (item instanceof Array)
                    item.forEach((i) => {
                        this.insert(i);
                    });
                else
                    this.insert(item);

            }
        });
    }

    /**
        Retrieves a list of items that match the term/terms. 

        @param {(Array|SearchTerm)} term - A single term or a set of terms to look for in the ModelContainerBase. 
        @param {Array} __return_data__ - Set to true by a scope Container if it is calling a SubContainer insert function. 

        @returns {(ModelContainerBase|Array)} Returns a Model container or an Array of Models matching the search terms. 
    */
    get(term, __return_data__) {

        let out = null;

        term = this.getHook("term", term);

        let USE_ARRAY = (__return_data__ === null) ? false : true;

        if (term) {

            if (__return_data__) {
                out = __return_data__;
            } else {

                if (!this.scope)
                    USE_ARRAY = false;

                out = this.__defaultReturn__(USE_ARRAY);
                out.__setFilters__(term);
            }
        } else
            out = (__return_data__) ? __return_data__ : this.__defaultReturn__(USE_ARRAY);

        if (!term)
            this.__getAll__(out);
        else {

            let terms = term;

            if (!Array.isArray(term))
                terms = [term];

            //Need to convert terms into a form that will work for the identifier type
            terms = terms.map(t => this.validator.parse(t));

            this.__get__(terms, out);
        }

        return out;
    }

    set(item, from_root = false) {
        if (!from_root)
            return this._deferUpdateToRoot_(item).insert(item, true);
        else
            this.insert(item, true);
    }

    /**
        Inserts an item into the container. If the item is not a {Model}, an attempt will be made to convert the data in the Object into a Model.
        If the item is an array of objects, each object in the array will be considered separately. 

        @param {Object} item - An Object to insert into the container. On of the properties of the object MUST have the same name as the ModelContainerBase's 
        @param {Array} item - An array of Objects to insert into the container.
        @param {Boolean} __FROM_SCOPE__ - Set to true by a scope Container if it is calling a SubContainer insert function. 

        @returns {Boolean} Returns true if an insertion into the ModelContainerBase occurred, false otherwise.
    */
    insert(item, from_root = false, __FROM_SCOPE__ = false) {


        item = this.setHook("", item);

        if (!from_root)
            return this._deferUpdateToRoot_(item).insert(item, true);

        let add_list = (this.fv) ? [] : null;

        let out_data = false;

        if (!__FROM_SCOPE__ && this.scope)
            return this.scope.insert(item);


        if (item instanceof Array) {
            for (var i = 0; i < item.length; i++)
                if (this.__insertSub__(item[i], out_data, add_list))
                    out_data = true;
        } else if (item)
            out_data = this.__insertSub__(item, out_data, add_list);


        if (out_data) {
            if (this.par)
                this.par.scheduleUpdate(this.prop_name);


            if (add_list && add_list.length > 0) {
                this.updateViewsAdded(add_list);
                this.scheduleUpdate();
            }
        }

        return out_data;
    }

    /**
        A subset of the insert function. Handles the testing of presence of an identifier value, the conversion of an Object into a Model, and the calling of the implementation specific __insert__ function.
    */
    __insertSub__(item, out, add_list) {

        let model = item;

        var identifier = this._gI_(item);

        if (identifier !== undefined) {

            if (!(model instanceof ModelBase)) {
                model = new this.model(item);
                model.MUTATION_ID = this.MUTATION_ID;
            }

            identifier = this._gI_(model, this._filters_);

            if (identifier !== undefined) {
                out = this.__insert__(model, add_list, identifier);
                this.__linksInsert__(model);
            }
        }

        return out;
    }

    delete(term, from_root = false) {
        if (!from_root)
            return this._deferUpdateToRoot_(term).remove(term);
        else
            this.remove(term);
    }

    /**
        Removes an item from the container. 
    */
    remove(term, from_root = false, __FROM_SCOPE__ = false) {

        if (!from_root)
            return this._deferUpdateToRoot_(term).remove(term, true);

        //term = this.getHook("term", term);

        if (!__FROM_SCOPE__ && this.scope) {

            if (!term)
                return this.scope.remove(this._filters_);
            else
                return this.scope.remove(term);
        }

        let out_container = [];

        if (!term)
            this.__removeAll__();

        else {

            let terms = (Array.isArray(term)) ? term : [term];

            //Need to convert terms into a form that will work for the identifier type
            terms = terms.map(t => (t instanceof ModelBase) ? t : this.validator.parse(t));

            this.__remove__(terms, out_container);
        }

        if (out_container.length > 0) {
            if (this.par)
                this.par.scheduleUpdate(this.prop_name);


            if (out_container && out_container.length > 0) {
                this.updateViewsRemoved(out_container);
                this.scheduleUpdate();
            }
        }

        return out_container;
    }

    /**
        Removes a ModelContainerBase from list of linked containers. 

        @param {ModelContainerBase} container - The ModelContainerBase instance to remove from the set of linked containers. Must be a member of the linked containers. 
    */
    __unlink__(container) {

        if (container instanceof ModelContainerBase && container.scope == this) {

            if (container == this.first_link)
                this.first_link = container.next;

            if (container.next)
                container.next.prev = container.prev;

            if (container.prev)
                container.prev.next = container.next;

            container.scope = null;
        }
    }

    /**
        Adds a container to the list of tracked containers. 

        @param {ModelContainerBase} container - The ModelContainerBase instance to add the set of linked containers.
    */
    __link__(container) {
        if (container instanceof ModelContainerBase && !container.scope) {

            container.scope = this;

            container.next = this.first_link;

            if (this.first_link)
                this.first_link.prev = container;

            this.first_link = container;

            container.pin = ((container) => {
                let id = setTimeout(() => {
                    container.__unlink__();
                }, 50);

                return () => {
                    clearTimeout(id);
                    if (!container.scope)
                        console.warn("failed to clear the destruction of container in time!");
                };
            })(container);
        }
    }

    /**
     * Remove items from linked ModelContainers according to the terms provided.
     * @param      {Array}  terms   Array of terms.
     * @private
     */
    __linksRemove__(item) {
        let a = this.first_link;
        while (a) {
            for (let i = 0; i < item.length; i++)
                if (a._gI_(item[i], a._filters_)) {
                    a.scheduleUpdate();
                    a.__linksRemove__(item);
                    break;
                }

            a = a.next;
        }
    }

    /**
     * Add items to linked ModelContainers.
     * @param      {Model}  item   Item to add.
     * @private
     */
    __linksInsert__(item) {
        let a = this.first_link;
        while (a) {
            if (a._gI_(item, a._filters_))
                a.scheduleUpdate();
            a = a.next;
        }
    }

    /**
        Removes any items in the ModelConatiner not included in the array "items", and adds any item in `items` not already in the ModelContainerBase.
        @param {Array} items - An array of identifiable Models or objects. 
    */
    cull(items) {

        let hash_table = {};
        let existing_items = __getAll__([], true);

        let loadHash = (item) => {
            if (item instanceof Array)
                return item.forEach((e) => loadHash(e));

            let identifier = this._gI_(item);

            if (identifier !== undefined)
                hash_table[identifier] = item;

        };

        loadHash(items);

        for (let i = 0; i < existing_items.lenth; i++) {
            let e_item = existing_items[i];
            if (!existing_items[this._gI_(e_item)])
                this.__remove__(e_item);
        }

        this.insert(items);
    }

    __setFilters__(term) {

        if (!this._filters_) this._filters_ = [];

        if (Array.isArray(term))
            this._filters_ = this._filters_.concat(term.map(t => this.validator.parse(t)));
        else
            this._filters_.push(this.validator.parse(term));

    }

    /**
        Returns true if the identifier matches a predefined filter pattern, which is evaluated by this.parser. If a 
        parser was not present the ModelContainers schema, then the function will return true upon every evaluation.
    */
    __filterIdentifier__(identifier, filters) {
        if (filters.length > 0) {
            return this.validator.filter(identifier, filters);
        }
        return true;
    }

    _gIf_(item, term) {
        let t = this._gI_(item, this.filters);
    }

    /**
        Returns the Identifier property value if it exists in the item. If an array value for filters is passed, then undefined is returned if the identifier value does not pass filtering criteria.
        @param {(Object|Model)} item
        @param {Array} filters - An array of filter terms to test whether the identifier meets the criteria to be handled by the ModelContainerBase.
    */
    _gI_(item, filters = null) {

        let identifier;

        if (typeof(item) == "object" && this.key)
            identifier = item[this.key];
        else
            identifier = item;

        if (identifier && this.validator)
            identifier = this.validator.parse(identifier);

        if (filters && identifier)
            return (this.__filterIdentifier__(identifier, filters)) ? identifier : undefined;

        return identifier;
    }

    /** 
        OVERRIDE SECTION ********************************************************************
        
        All of these functions should be overridden by inheriting classes
    */

    __insert__() { return this; }

    __get__(item, __return_data__) { return __return_data__; }

    __getAll__(__return_data__) { return __return_data__; }

    __removeAll__() { return []; }

    __remove__() { return []; }

    clone() {
        let clone = super.clone();
        clone.key = this.key;
        clone.model = this.model;
        clone.validator = this.validator;
        clone.first_link = this.first_link;
        return clone;
    }

    // END OVERRIDE *************************************************************************
}

const proto = ModelContainerBase.prototype;
_SealedProperty_(proto, "model", null);
_SealedProperty_(proto, "key", "");
_SealedProperty_(proto, "validator", null);

class MultiIndexedContainer extends ModelContainerBase {

    constructor(data = [], root = null, address = []) {

        super(root, address);

        this.secondary_indexes = {};
        this.primary_index = null;
        this.primary_key = "";

        if (data[0] && data[0].key) {

            let key = data[0].key;

            if (data[0].model)
                this.model = data[0].model;

            if (Array.isArray(key))
                key.forEach((k) => (this.addKey(k)));

            data = data.slice(1);
        }

        if (Array.isArray(data) && data.length > 0)
            this.insert(data);
    }

    /**
        Returns the length of the first index in this container. 
    */
    get length() { return this.primary_index.length; }

    /**
        Insert a new ModelContainerBase into the index through the key.  
    */
    addKey(key) {
        let name = key.name;

        let container = new MultiIndexedContainer.array([{ key, model: this.model }]);

        if (this.primary_index) {
            this.secondary_indexes[name] = container;
            this.secondary_indexes[name].insert(this.primary_index.__getAll__());
        } else {
            this.primary_key = name;
            this.primary_index = container;
        }
    }

    get(item, __return_data__) {
        
        item = this.getHook("query", item);

        if (item) {
            for (let name in item) {
                if (name == this.primary_key)
                    return this.primary_index.get(item[name], __return_data__);

                else if (this.secondary_indexes[name])
                    return this.secondary_indexes[name].get(item[name], __return_data__);

            }
        } else
            return this.primary_index.get(null, __return_data__);
    }

    __insert__(model, add_list, identifier) {

        let out = false;

        model.par = this;

        if ((out = this.primary_index.insert(model))) {
            for (let name in this.secondary_indexes) {

                let index = this.secondary_indexes[name];

                index.insert(model);
            }
        }

        if (out)
            this.updateViews(this.primary_index.get());

        return out;
    }
    /**
        @private 
    */
    __remove__(term, out_container) {

        let out = false;

        if ((out = this.primary_index.__remove__(term, out_container))) {

            for (let name in this.secondary_indexes) {

                let index = this.secondary_indexes[name];

                index.__remove__(out_container);
            }
        }

        return out;
    }

    __removeAll__() {

        let out = false;

        out = this.primary_index.__removeAll__();

        for (let name in this.secondary_indexes) {

            let index = this.secondary_indexes[name];

            if (index.__removeAll__())
                out = true;
        }

        return out;
    }


    /**
        Overrides Model container default _gI_ to force item to pass.
        @private 
    */
    _gI_(item, filters = null) {
        return true;
    }

    toJSON() {
        return this.primary_index.toJSON();
    }

    clone() {
        let clone = super.clone();
        clone.secondary_indexes = this.secondary_indexes;
        clone.primary_index = this.primary_index;
        return clone;
    }
}

const A = 65;
const a = 97;
const ACKNOWLEDGE = 6;
const AMPERSAND = 38;
const ASTERISK = 42;
const AT = 64;
const B = 66;
const b = 98;
const BACKSLASH = 92;
const BACKSPACE = 8;
const BELL = 7;
const C = 67;
const c = 99;
const CANCEL = 24;
const CARET = 94;
const CARRIAGE_RETURN = 13;
const CLOSE_CURLY = 125;
const CLOSE_PARENTH = 41;
const CLOSE_SQUARE = 93;
const COLON = 58;
const COMMA = 44;
const d = 100;
const D = 68;
const DATA_LINK_ESCAPE = 16;
const DELETE = 127;
const DEVICE_CTRL_1 = 17;
const DEVICE_CTRL_2 = 18;
const DEVICE_CTRL_3 = 19;
const DEVICE_CTRL_4 = 20;
const DOLLAR = 36;
const DOUBLE_QUOTE = 34;
const e$1 = 101;
const E = 69;
const EIGHT = 56;
const END_OF_MEDIUM = 25;
const END_OF_TRANSMISSION = 4;
const END_OF_TRANSMISSION_BLOCK = 23;
const END_OF_TXT = 3;
const ENQUIRY = 5;
const EQUAL = 61;
const ESCAPE = 27;
const EXCLAMATION = 33;
const f = 102;
const F = 70;
const FILE_SEPERATOR = 28;
const FIVE = 53;
const FORM_FEED = 12;
const FORWARD_SLASH = 47;
const FOUR = 52;
const g = 103;
const G = 71;
const GRAVE = 96;
const GREATER_THAN = 62;
const GROUP_SEPERATOR = 29;
const h = 104;
const H = 72;
const HASH = 35;
const HORIZONTAL_TAB = 9;
const HYPHEN = 45;
const i$1 = 105;
const I = 73;
const j = 106;
const J = 74;
const k = 107;
const K = 75;
const l = 108;
const L = 76;
const LESS_THAN = 60;
const LINE_FEED = 10;
const m = 109;
const M = 77;
const n = 110;
const N = 78;
const NEGATIVE_ACKNOWLEDGE = 21;
const NINE = 57;
const NULL = 0;
const o = 111;
const O = 79;
const ONE = 49;
const OPEN_CURLY = 123;
const OPEN_PARENTH = 40;
const OPEN_SQUARE = 91;
const p = 112;
const P = 80;
const PERCENT = 37;
const PERIOD = 46;
const PLUS = 43;
const q = 113;
const Q = 81;
const QMARK = 63;
const QUOTE = 39;
const r = 114;
const R = 82;
const RECORD_SEPERATOR = 30;
const s = 115;
const S = 83;
const SEMICOLON = 59;
const SEVEN = 55;
const SHIFT_IN = 15;
const SHIFT_OUT = 14;
const SIX = 54;
const SPACE = 32;
const START_OF_HEADER = 1;
const START_OF_TEXT = 2;
const SUBSTITUTE = 26;
const SYNCH_IDLE = 22;
const t = 116;
const T = 84;
const THREE = 51;
const TILDE = 126;
const TWO = 50;
const u = 117;
const U = 85;
const UNDER_SCORE = 95;
const UNIT_SEPERATOR = 31;
const v = 118;
const V = 86;
const VERTICAL_BAR = 124;
const VERTICAL_TAB = 11;
const w = 119;
const W = 87;
const x = 120;
const X = 88;
const y = 121;
const Y = 89;
const z = 122;
const Z = 90;
const ZERO = 48;

/**
 * Lexer Jump table reference 
 * 0. NUMBER
 * 1. IDENTIFIER
 * 2. QUOTE STRING
 * 3. SPACE SET
 * 4. TAB SET
 * 5. CARIAGE RETURN
 * 6. LINEFEED
 * 7. SYMBOL
 * 8. OPERATOR
 * 9. OPEN BRACKET
 * 10. CLOSE BRACKET 
 * 11. DATA_LINK
 */ 
const jump_table = [
7, 	 	/* NULL */
7, 	 	/* START_OF_HEADER */
7, 	 	/* START_OF_TEXT */
7, 	 	/* END_OF_TXT */
7, 	 	/* END_OF_TRANSMISSION */
7, 	 	/* ENQUIRY */
7, 	 	/* ACKNOWLEDGE */
7, 	 	/* BELL */
7, 	 	/* BACKSPACE */
4, 	 	/* HORIZONTAL_TAB */
6, 	 	/* LINEFEED */
7, 	 	/* VERTICAL_TAB */
7, 	 	/* FORM_FEED */
5, 	 	/* CARRIAGE_RETURN */
7, 	 	/* SHIFT_OUT */
7, 		/* SHIFT_IN */
11,	 	/* DATA_LINK_ESCAPE */
7, 	 	/* DEVICE_CTRL_1 */
7, 	 	/* DEVICE_CTRL_2 */
7, 	 	/* DEVICE_CTRL_3 */
7, 	 	/* DEVICE_CTRL_4 */
7, 	 	/* NEGATIVE_ACKNOWLEDGE */
7, 	 	/* SYNCH_IDLE */
7, 	 	/* END_OF_TRANSMISSION_BLOCK */
7, 	 	/* CANCEL */
7, 	 	/* END_OF_MEDIUM */
7, 	 	/* SUBSTITUTE */
7, 	 	/* ESCAPE */
7, 	 	/* FILE_SEPERATOR */
7, 	 	/* GROUP_SEPERATOR */
7, 	 	/* RECORD_SEPERATOR */
7, 	 	/* UNIT_SEPERATOR */
3, 	 	/* SPACE */
8, 	 	/* EXCLAMATION */
2, 	 	/* DOUBLE_QUOTE */
7, 	 	/* HASH */
7, 	 	/* DOLLAR */
8, 	 	/* PERCENT */
8, 	 	/* AMPERSAND */
2, 	 	/* QUOTE */
9, 	 	/* OPEN_PARENTH */
10, 	 /* CLOSE_PARENTH */
8, 	 	/* ASTERISK */
8, 	 	/* PLUS */
7, 	 	/* COMMA */
7, 	 	/* HYPHEN */
7, 	 	/* PERIOD */
7, 	 	/* FORWARD_SLASH */
0, 	 	/* ZERO */
0, 	 	/* ONE */
0, 	 	/* TWO */
0, 	 	/* THREE */
0, 	 	/* FOUR */
0, 	 	/* FIVE */
0, 	 	/* SIX */
0, 	 	/* SEVEN */
0, 	 	/* EIGHT */
0, 	 	/* NINE */
8, 	 	/* COLON */
7, 	 	/* SEMICOLON */
8, 	 	/* LESS_THAN */
8, 	 	/* EQUAL */
8, 	 	/* GREATER_THAN */
7, 	 	/* QMARK */
7, 	 	/* AT */
1, 	 	/* A*/
1, 	 	/* B */
1, 	 	/* C */
1, 	 	/* D */
1, 	 	/* E */
1, 	 	/* F */
1, 	 	/* G */
1, 	 	/* H */
1, 	 	/* I */
1, 	 	/* J */
1, 	 	/* K */
1, 	 	/* L */
1, 	 	/* M */
1, 	 	/* N */
1, 	 	/* O */
1, 	 	/* P */
1, 	 	/* Q */
1, 	 	/* R */
1, 	 	/* S */
1, 	 	/* T */
1, 	 	/* U */
1, 	 	/* V */
1, 	 	/* W */
1, 	 	/* X */
1, 	 	/* Y */
1, 	 	/* Z */
9, 	 	/* OPEN_SQUARE */
7, 	 	/* TILDE */
10, 	/* CLOSE_SQUARE */
7, 	 	/* CARET */
7, 	 	/* UNDER_SCORE */
2, 	 	/* GRAVE */
1, 	 	/* a */
1, 	 	/* b */
1, 	 	/* c */
1, 	 	/* d */
1, 	 	/* e */
1, 	 	/* f */
1, 	 	/* g */
1, 	 	/* h */
1, 	 	/* i */
1, 	 	/* j */
1, 	 	/* k */
1, 	 	/* l */
1, 	 	/* m */
1, 	 	/* n */
1, 	 	/* o */
1, 	 	/* p */
1, 	 	/* q */
1, 	 	/* r */
1, 	 	/* s */
1, 	 	/* t */
1, 	 	/* u */
1, 	 	/* v */
1, 	 	/* w */
1, 	 	/* x */
1, 	 	/* y */
1, 	 	/* z */
9, 	 	/* OPEN_CURLY */
7, 	 	/* VERTICAL_BAR */
10,  	/* CLOSE_CURLY */
7,  	/* TILDE */
7 		/* DELETE */
];	

/**
 * LExer Number and Identifier jump table reference
 * Number are masked by 12(4|8) and Identifiers are masked by 10(2|8)
 * entries marked as `0` are not evaluated as either being in the number set or the identifier set.
 * entries marked as `2` are in the identifier set but not the number set
 * entries marked as `4` are in the number set but not the identifier set
 * entries marked as `8` are in both number and identifier sets
 */
const number_and_identifier_table = [
0, 		/* NULL */
0, 		/* START_OF_HEADER */
0, 		/* START_OF_TEXT */
0, 		/* END_OF_TXT */
0, 		/* END_OF_TRANSMISSION */
0, 		/* ENQUIRY */
0,		/* ACKNOWLEDGE */
0,		/* BELL */
0,		/* BACKSPACE */
0,		/* HORIZONTAL_TAB */
0,		/* LINEFEED */
0,		/* VERTICAL_TAB */
0,		/* FORM_FEED */
0,		/* CARRIAGE_RETURN */
0,		/* SHIFT_OUT */
0,		/* SHIFT_IN */
0,		/* DATA_LINK_ESCAPE */
0,		/* DEVICE_CTRL_1 */
0,		/* DEVICE_CTRL_2 */
0,		/* DEVICE_CTRL_3 */
0,		/* DEVICE_CTRL_4 */
0,		/* NEGATIVE_ACKNOWLEDGE */
0,		/* SYNCH_IDLE */
0,		/* END_OF_TRANSMISSION_BLOCK */
0,		/* CANCEL */
0,		/* END_OF_MEDIUM */
0,		/* SUBSTITUTE */
0,		/* ESCAPE */
0,		/* FILE_SEPERATOR */
0,		/* GROUP_SEPERATOR */
0,		/* RECORD_SEPERATOR */
0,		/* UNIT_SEPERATOR */
0,		/* SPACE */
0,		/* EXCLAMATION */
0,		/* DOUBLE_QUOTE */
0,		/* HASH */
8,		/* DOLLAR */
0,		/* PERCENT */
0,		/* AMPERSAND */
2,		/* QUOTE */
0,		/* OPEN_PARENTH */
0,		 /* CLOSE_PARENTH */
0,		/* ASTERISK */
0,		/* PLUS */
0,		/* COMMA */
2,		/* HYPHEN */
4,		/* PERIOD */
0,		/* FORWARD_SLASH */
8,		/* ZERO */
8,		/* ONE */
8,		/* TWO */
8,		/* THREE */
8,		/* FOUR */
8,		/* FIVE */
8,		/* SIX */
8,		/* SEVEN */
8,		/* EIGHT */
8,		/* NINE */
0,		/* COLON */
0,		/* SEMICOLON */
0,		/* LESS_THAN */
0,		/* EQUAL */
0,		/* GREATER_THAN */
0,		/* QMARK */
0,		/* AT */
2,		/* A*/
8,		/* B */
2,		/* C */
2,		/* D */
8,		/* E */
2,		/* F */
2,		/* G */
2,		/* H */
2,		/* I */
2,		/* J */
2,		/* K */
2,		/* L */
2,		/* M */
2,		/* N */
8,		/* O */
2,		/* P */
2,		/* Q */
2,		/* R */
2,		/* S */
2,		/* T */
2,		/* U */
2,		/* V */
2,		/* W */
8,		/* X */
2,		/* Y */
2,		/* Z */
0,		/* OPEN_SQUARE */
0,		/* TILDE */
0,		/* CLOSE_SQUARE */
0,		/* CARET */
2,		/* UNDER_SCORE */
0,		/* GRAVE */
2,		/* a */
8,		/* b */
2,		/* c */
2,		/* d */
2,		/* e */
2,		/* f */
2,		/* g */
2,		/* h */
2,		/* i */
2,		/* j */
2,		/* k */
2,		/* l */
2,		/* m */
2,		/* n */
8,		/* o */
2,		/* p */
2,		/* q */
2,		/* r */
2,		/* s */
2,		/* t */
2,		/* u */
2,		/* v */
2,		/* w */
8,		/* x */
2,		/* y */
2,		/* z */
0,		/* OPEN_CURLY */
0,		/* VERTICAL_BAR */
0,		/* CLOSE_CURLY */
0,		/* TILDE */
0		/* DELETE */
];

const number = 1,
    identifier = 2,
    string = 4,
    white_space = 8,
    open_bracket = 16,
    close_bracket = 32,
    operator = 64,
    symbol = 128,
    new_line = 256,
    data_link = 512,
    alpha_numeric = (identifier | number),
    white_space_new_line = (white_space | new_line),
    Types = {
        num: number,
        number,
        id: identifier,
        identifier,
        str: string,
        string,
        ws: white_space,
        white_space,
        ob: open_bracket,
        open_bracket,
        cb: close_bracket,
        close_bracket,
        op: operator,
        operator,
        sym: symbol,
        symbol,
        nl: new_line,
        new_line,
        dl: data_link,
        data_link,
        alpha_numeric,
        white_space_new_line,
    },

    /*** MASKS ***/

    TYPE_MASK = 0xF,
    PARSE_STRING_MASK = 0x10,
    IGNORE_WHITESPACE_MASK = 0x20,
    CHARACTERS_ONLY_MASK = 0x40,
    TOKEN_LENGTH_MASK = 0xFFFFFF80,

    //De Bruijn Sequence for finding index of right most bit set.
    //http://supertech.csail.mit.edu/papers/debruijn.pdf
    debruijnLUT = [
        0, 1, 28, 2, 29, 14, 24, 3, 30, 22, 20, 15, 25, 17, 4, 8,
        31, 27, 13, 23, 21, 19, 16, 7, 26, 12, 18, 6, 11, 5, 10, 9
    ];

const  getNumbrOfTrailingZeroBitsFromPowerOf2 = (value) => debruijnLUT[(value * 0x077CB531) >>> 27];

class Lexer {

    constructor(string = "", INCLUDE_WHITE_SPACE_TOKENS = false, PEEKING = false) {

        if (typeof(string) !== "string") throw new Error(`String value must be passed to Lexer. A ${typeof(string)} was passed as the \`string\` argument.`);

        /**
         * The string that the Lexer tokenizes.
         */
        this.str = string;

        /**
         * Reference to the peeking Lexer.
         */
        this.p = null;

        /**
         * The type id of the current token.
         */
        this.type = 32768; //Default "non-value" for types is 1<<15;

        /**
         * The offset in the string of the start of the current token.
         */
        this.off = 0;

        this.masked_values = 0;

        /**
         * The character offset of the current token within a line.
         */
        this.char = 0;
        /**
         * The line position of the current token.
         */
        this.line = 0;
        /**
         * The length of the string being parsed
         */
        this.sl = string.length;
        /**
         * The length of the current token.
         */
        this.tl = 0;

        /**
         * Flag to ignore white spaced.
         */
        this.IWS = !INCLUDE_WHITE_SPACE_TOKENS;

        /**
         * Flag to force the lexer to parse string contents
         */
        this.PARSE_STRING = false;

        if (!PEEKING) this.next();
    }

    /**
     * Restricts max parse distance to the other Lexer's current position.
     * @param      {Lexer}  Lexer   The Lexer to limit parse distance by.
     */
    fence(marker = this) {
        if (marker.str !== this.str)
            return;
        this.sl = marker.off;
        return this;
    }

    /**
     * Copies the Lexer.
     * @return     {Lexer}  Returns a new Lexer instance with the same property values.
     */
    copy(destination = new Lexer(this.str, false, true)) {
        destination.off = this.off;
        destination.char = this.char;
        destination.line = this.line;
        destination.sl = this.sl;
        destination.masked_values = this.masked_values;
        return destination;
    }

    /**
     * Given another Lexer with the same `str` property value, it will copy the state of that Lexer.
     * @param      {Lexer}  [marker=this.peek]  The Lexer to clone the state from. 
     * @throws     {Error} Throws an error if the Lexers reference different strings.
     * @public
     */
    sync(marker = this.p) {

        if (marker instanceof Lexer) {
            if (marker.str !== this.str) throw new Error("Cannot sync Lexers with different strings!");
            this.off = marker.off;
            this.char = marker.char;
            this.line = marker.line;
            this.masked_values = marker.masked_values;
        }

        return this;
    }

    /**
    Creates and error message with a diagrame illustrating the location of the error. 
    */
    errorMessage(message = "") {
        const arrow = String.fromCharCode(0x2b89),
            trs = String.fromCharCode(0x2500),
            line = String.fromCharCode(0x2500),
            thick_line = String.fromCharCode(0x2501),
            line_number = "    " + this.line + ": ",
            line_fill = line_number.length,
            t$$1 = thick_line.repeat(line_fill + 48),
            is_iws = (!this.IWS) ? "\n The Lexer produced whitespace tokens" : "";
        const pk = this.copy();
        pk.IWS = false;
        while (!pk.END && pk.ty !== Types.nl) { pk.next(); }
        const end = (pk.END) ? this.str.length : pk.off ;

    console.log(end);

    console.log(this.line, this.char, this.off, line_fill, end,this.off-this.char+((this.line > 0) ? 1 :0));
    let v$$1 = "", length = 0;
    v$$1 = this.str.slice(this.off-this.char+((this.line > 0) ? 1 :0), end);
    length = this.char;
    return `${message} at ${this.line}:${this.char}
${t$$1}
${line_number+v$$1}
${line.repeat(length+line_fill-((this.line > 0) ? 1 :0))+arrow}
${t$$1}
${is_iws}`;
    }

    /**
     * Will throw a new Error, appending the parsed string line and position information to the the error message passed into the function.
     * @instance
     * @public
     * @param {String} message - The error message.
     * @param {Bool} DEFER - if true, returns an Error object instead of throwing.
     */
    throw (message, DEFER = false) {
        const error = new Error(this.errorMessage(message));
        if (DEFER)
            return error;
        throw error;
    }

    /**
     * Proxy for Lexer.prototype.reset
     * @public
     */
    r() { return this.reset() }

    /**
     * Restore the Lexer back to it's initial state.
     * @public
     */
    reset() {
        this.p = null;
        this.type = 32768;
        this.off = 0;
        this.tl = 0;
        this.char = 0;
        this.line = 0;
        this.n;
        return this;
    }

    resetHead() {
        this.off = 0;
        this.tl = 0;
        this.char = 0;
        this.line = 0;
        this.p = null;
        this.type = 32768;
    }

    /**
     * Sets the internal state to point to the next token. Sets Lexer.prototype.END to `true` if the end of the string is hit.
     * @public
     * @param {Lexer} [marker=this] - If another Lexer is passed into this method, it will advance the token state of that Lexer.
     */
    next(marker = this) {

        if (marker.sl < 1) {
            marker.off = 0;
            marker.type = 32768;
            marker.tl = 0;
            marker.line = 0;
            marker.char = 0;
            return marker;
        }

        //Token builder
        const l$$1 = marker.sl,
            str = marker.str,
            IWS = marker.IWS;

        let length = marker.tl,
            off = marker.off + length,
            type = symbol,
            line = marker.line,
            base = off,
            char = marker.char,
            root = marker.off;

        if (off >= l$$1) {
            length = 0;
            base = l$$1;
            //char -= base - off;
            marker.char = char + (base - marker.off);
            marker.type = type;
            marker.off = base;
            marker.tl = 0;
            marker.line = line;
            return marker;
        }

        const USE_CUSTOM_SYMBOLS = !!this.symbol_map;
        let NORMAL_PARSE = true;

        if (USE_CUSTOM_SYMBOLS) {

            let code = str.charCodeAt(off);
            let off2 = off;
            let map = this.symbol_map,
                m$$1;
            let i = 0;

            while (code == 32 && IWS)
                (code = str.charCodeAt(++off2), off++);

            while ((m$$1 = map.get(code))) {
                map = m$$1;
                off2 += 1;
                code = str.charCodeAt(off2);
            }

            if (map.IS_SYM) {
                NORMAL_PARSE = false;
                base = off;
                length = off2 - off;
                //char += length;
            }
        }

        if (NORMAL_PARSE) {

            for (;;) {

                base = off;

                length = 1;

                const code = str.charCodeAt(off);

                if (code < 128) {

                    switch (jump_table[code]) {
                        case 0: //NUMBER
                            while (++off < l$$1 && (12 & number_and_identifier_table[str.charCodeAt(off)]));

                            if ((str[off] == "e" || str[off] == "E") && (12 & number_and_identifier_table[str.charCodeAt(off + 1)])) {
                                off++;
                                if (str[off] == "-") off++;
                                marker.off = off;
                                marker.tl = 0;
                                marker.next();
                                off = marker.off + marker.tl;
                                //Add e to the number string
                            }

                            type = number;
                            length = off - base;

                            break;
                        case 1: //IDENTIFIER
                            while (++off < l$$1 && ((10 & number_and_identifier_table[str.charCodeAt(off)])));
                            type = identifier;
                            length = off - base;
                            break;
                        case 2: //QUOTED STRING
                            if (this.PARSE_STRING) {
                                type = symbol;
                            } else {
                                while (++off < l$$1 && str.charCodeAt(off) !== code);
                                type = string;
                                length = off - base + 1;
                            }
                            break;
                        case 3: //SPACE SET
                            while (++off < l$$1 && str.charCodeAt(off) === SPACE);
                            type = white_space;
                            length = off - base;
                            break;
                        case 4: //TAB SET
                            while (++off < l$$1 && str[off] === HORIZONTAL_TAB);
                            type = white_space;
                            length = off - base;
                            break;
                        case 5: //CARIAGE RETURN
                            length = 2;
                        case 6: //LINEFEED
                            //Intentional
                            type = new_line;
                            line++;
                            base = off;
                            root = off;
                            off += length;
                            char = 0;
                            break;
                        case 7: //SYMBOL
                            type = symbol;
                            break;
                        case 8: //OPERATOR
                            type = operator;
                            break;
                        case 9: //OPEN BRACKET
                            type = open_bracket;
                            break;
                        case 10: //CLOSE BRACKET
                            type = close_bracket;
                            break;
                        case 11: //Data Link Escape
                            type = data_link;
                            length = 4; //Stores two UTF16 values and a data link sentinel
                            break;
                    }
                }else{
                    break;
                }

                if (IWS && (type & white_space_new_line)) {
                    if (off < l$$1) {
                        type = symbol;
                        //off += length;
                        continue;
                    } else {
                        //Trim white space from end of string
                        //base = l - off;
                        //marker.sl -= off;
                        //length = 0;
                    }
                }
                break;
            }
        }

        marker.type = type;
        marker.off = base;
        marker.tl = (this.masked_values & CHARACTERS_ONLY_MASK) ? Math.min(1, length) : length;
        marker.char = char + base - root;
        marker.line = line;
        return marker;
    }


    /**
     * Proxy for Lexer.prototype.assert
     * @public
     */
    a(text) {
        return this.assert(text);
    }

    /**
     * Compares the string value of the current token to the value passed in. Advances to next token if the two are equal.
     * @public
     * @throws {Error} - `Expecting "${text}" got "${this.text}"`
     * @param {String} text - The string to compare.
     */
    assert(text) {

        if (this.off < 0) this.throw(`Expecting ${text} got null`);

        if (this.text == text)
            this.next();
        else
            this.throw(`Expecting "${text}" got "${this.text}"`);

        return this;
    }

    /**
     * Proxy for Lexer.prototype.assertCharacter
     * @public
     */
    aC(char) { return this.assertCharacter(char) }
    /**
     * Compares the character value of the current token to the value passed in. Advances to next token if the two are equal.
     * @public
     * @throws {Error} - `Expecting "${text}" got "${this.text}"`
     * @param {String} text - The string to compare.
     */
    assertCharacter(char) {

        if (this.off < 0) this.throw(`Expecting ${char[0]} got null`);

        if (this.ch == char[0])
            this.next();
        else
            this.throw(`Expecting "${char[0]}" got "${this.tx[this.off]}"`);

        return this;
    }

    /**
     * Returns the Lexer bound to Lexer.prototype.p, or creates and binds a new Lexer to Lexer.prototype.p. Advences the other Lexer to the token ahead of the calling Lexer.
     * @public
     * @type {Lexer}
     * @param {Lexer} [marker=this] - The marker to originate the peek from. 
     * @param {Lexer} [peek_marker=this.p] - The Lexer to set to the next token state.
     * @return {Lexer} - The Lexer that contains the peeked at token.
     */
    peek(marker = this, peek_marker = this.p) {

        if (!peek_marker) {
            if (!marker) return null;
            if (!this.p) {
                this.p = new Lexer(this.str, false, true);
                peek_marker = this.p;
            }
        }
        peek_marker.masked_values = marker.masked_values;
        peek_marker.type = marker.type;
        peek_marker.off = marker.off;
        peek_marker.tl = marker.tl;
        peek_marker.char = marker.char;
        peek_marker.line = marker.line;
        this.next(peek_marker);
        return peek_marker;
    }


    /**
     * Proxy for Lexer.prototype.slice
     * @public
     */
    s(start) { return this.slice(start) }

    /**
     * Returns a slice of the parsed string beginning at `start` and ending at the current token.
     * @param {Number | LexerBeta} start - The offset in this.str to begin the slice. If this value is a LexerBeta, sets the start point to the value of start.off.
     * @return {String} A substring of the parsed string.
     * @public
     */
    slice(start = this.off) {

        if (start instanceof Lexer) start = start.off;

        return this.str.slice(start, (this.off <= start) ? this.sl : this.off);
    }

    /**
     * Skips to the end of a comment section.
     * @param {boolean} ASSERT - If set to true, will through an error if there is not a comment line or block to skip.
     * @param {Lexer} [marker=this] - If another Lexer is passed into this method, it will advance the token state of that Lexer.
     */
    comment(ASSERT = false, marker = this) {

        if (!(marker instanceof Lexer)) return marker;

        if (marker.ch == "/") {
            if (marker.pk.ch == "*") {
                marker.sync();
                while (!marker.END && (marker.next().ch != "*" || marker.pk.ch != "/")) { /* NO OP */ }
                marker.sync().assert("/");
            } else if (marker.pk.ch == "/") {
                const IWS = marker.IWS;
                while (marker.next().ty != Types.new_line && !marker.END) { /* NO OP */ }
                marker.IWS = IWS;
                marker.next();
            } else
            if (ASSERT) marker.throw("Expecting the start of a comment");
        }

        return marker;
    }

    setString(string, RESET = true) {
        this.str = string;
        this.sl = string.length;
        if (RESET) this.resetHead();
    }

    toString() {
        return this.slice();
    }

    /**
     * Returns new Whind Lexer that has leading and trailing whitespace characters removed from input. 
     * leave_leading_amount - Maximum amount of leading space caracters to leave behind. Default is zero
     * leave_trailing_amount - Maximum amount of trailing space caracters to leave behind. Default is zero
     */
    trim(leave_leading_amount = 0, leave_trailing_amount = leave_leading_amount) {
        const lex = this.copy();

        let space_count = 0,
            off = lex.off;

        for (; lex.off < lex.sl; lex.off++) {
            const c$$1 = jump_table[lex.string.charCodeAt(lex.off)];

            if (c$$1 > 2 && c$$1 < 7) {

                if (space_count >= leave_leading_amount) {
                    off++;
                } else {
                    space_count++;
                }
                continue;
            }

            break;
        }

        lex.off = off;
        space_count = 0;
        off = lex.sl;

        for (; lex.sl > lex.off; lex.sl--) {
            const c$$1 = jump_table[lex.string.charCodeAt(lex.sl - 1)];

            if (c$$1 > 2 && c$$1 < 7) {
                if (space_count >= leave_trailing_amount) {
                    off--;
                } else {
                    space_count++;
                }
                continue;
            }

            break;
        }

        lex.sl = off;

        if (leave_leading_amount > 0)
            lex.IWS = false;

        lex.token_length = 0;

        lex.next();

        return lex;
    }

    /** Adds symbol to symbol_map. This allows custom symbols to be defined and tokenized by parser. **/
    addSymbol(sym) {
        if (!this.symbol_map)
            this.symbol_map = new Map;


        let map = this.symbol_map;

        for (let i = 0; i < sym.length; i++) {
            let code = sym.charCodeAt(i);
            let m$$1 = map.get(code);
            if (!m$$1) {
                m$$1 = map.set(code, new Map).get(code);
            }
            map = m$$1;
        }
        map.IS_SYM = true;
    }

    /*** Getters and Setters ***/
    get string() {
        return this.str;
    }

    get string_length() {
        return this.sl - this.off;
    }

    set string_length(s$$1) {}

    /**
     * The current token in the form of a new Lexer with the current state.
     * Proxy property for Lexer.prototype.copy
     * @type {Lexer}
     * @public
     * @readonly
     */
    get token() {
        return this.copy();
    }


    get ch() {
        return this.str[this.off];
    }

    /**
     * Proxy for Lexer.prototype.text
     * @public
     * @type {String}
     * @readonly
     */
    get tx() { return this.text }

    /**
     * The string value of the current token.
     * @type {String}
     * @public
     * @readonly
     */
    get text() {
        return (this.off < 0) ? "" : this.str.slice(this.off, this.off + this.tl);
    }

    /**
     * The type id of the current token.
     * @type {Number}
     * @public
     * @readonly
     */
    get ty() { return this.type }

    /**
     * The current token's offset position from the start of the string.
     * @type {Number}
     * @public
     * @readonly
     */
    get pos() {
        return this.off;
    }

    /**
     * Proxy for Lexer.prototype.peek
     * @public
     * @readonly
     * @type {Lexer}
     */
    get pk() { return this.peek() }

    /**
     * Proxy for Lexer.prototype.next
     * @public
     */
    get n() { return this.next() }

    get END() { return this.off >= this.sl }
    set END(v$$1) {}

    get type() {
        return 1 << (this.masked_values & TYPE_MASK);
    }

    set type(value) {
        //assuming power of 2 value.
        this.masked_values = (this.masked_values & ~TYPE_MASK) | ((getNumbrOfTrailingZeroBitsFromPowerOf2(value)) & TYPE_MASK);
    }

    get tl() {
        return this.token_length;
    }

    set tl(value) {
        this.token_length = value;
    }

    get token_length() {
        return ((this.masked_values & TOKEN_LENGTH_MASK) >> 7);
    }

    set token_length(value) {
        this.masked_values = (this.masked_values & ~TOKEN_LENGTH_MASK) | (((value << 7) | 0) & TOKEN_LENGTH_MASK);
    }

    get IGNORE_WHITE_SPACE() {
        return this.IWS;
    }

    set IGNORE_WHITE_SPACE(bool) {
        this.iws = !!bool;
    }

    get CHARACTERS_ONLY() {
        return !!(this.masked_values & CHARACTERS_ONLY_MASK);
    }

    set CHARACTERS_ONLY(boolean) {
        this.masked_values = (this.masked_values & ~CHARACTERS_ONLY_MASK) | ((boolean | 0) << 6);
    }

    get IWS() {
        return !!(this.masked_values & IGNORE_WHITESPACE_MASK);
    }

    set IWS(boolean) {
        this.masked_values = (this.masked_values & ~IGNORE_WHITESPACE_MASK) | ((boolean | 0) << 5);
    }

    get PARSE_STRING() {
        return !!(this.masked_values & PARSE_STRING_MASK);
    }

    set PARSE_STRING(boolean) {
        this.masked_values = (this.masked_values & ~PARSE_STRING_MASK) | ((boolean | 0) << 4);
    }

    /**
     * Reference to token id types.
     */
    get types() {
        return Types;
    }
}

Lexer.prototype.addCharacter = Lexer.prototype.addSymbol;

function whind$1(string, INCLUDE_WHITE_SPACE_TOKENS = false) { return new Lexer(string, INCLUDE_WHITE_SPACE_TOKENS) }

whind$1.constructor = Lexer;

Lexer.types = Types;
whind$1.types = Types;

class NumberSchemeConstructor extends SchemeConstructor {

    constructor() {

        super();

        this.start_value = 0;
    }

    parse(value) {

        return parseFloat(value);
    }

    verify(value, result) {

        result.valid = true;

        if (value == NaN || value == undefined) {
            result.valid = false;
            result.reason = "Invalid number type.";
        }
    }

    filter(identifier, filters) {

        for (let i = 0, l = filters.length; i < l; i++)
            if (identifier == filters[i])
                return true;

        return false;
    }
}

let number$1 = new NumberSchemeConstructor();

let scape_date = new Date();
scape_date.setHours(0);
scape_date.setMilliseconds(0);
scape_date.setSeconds(0);
scape_date.setTime(0);

class DateSchemeConstructor extends NumberSchemeConstructor {

    parse(value) {

        if(!value)
            return undefined;

        if(value instanceof Date)
            return value.valueOf();

        if (!isNaN(value))
            return parseInt(value);

        let date = (new Date(value)).valueOf();

        if(date) return date;

        let lex = whind$1(value);

        let year = parseInt(lex.text);

        if (year) {

            scape_date.setHours(0);
            scape_date.setMilliseconds(0);
            scape_date.setSeconds(0);
            scape_date.setTime(0);

            lex.next();
            lex.next();
            let month = parseInt(lex.text) - 1;
            lex.next();
            lex.next();
            let day = parseInt(lex.text);
            scape_date.setFullYear(year);
            scape_date.setDate(day);
            scape_date.setMonth(month);

            lex.next();

            if (lex.pos > -1) {

                let hours = parseInt(lex.text);
                lex.next();
                lex.next();
                let minutes = parseInt(lex.text);

                scape_date.setHours(hours);
                scape_date.setMinutes(minutes);
            }



            return scape_date.valueOf();
        } 
    }

    /**
     
     */
    verify(value, result) {

        value = this.parse(value);

        super.verify(value, result);
    }

    filter(identifier, filters) {

        if (filters.length > 1) {

            for (let i = 0, l = filters.length - 1; i < l; i += 2) {
                let start = filters[i];
                let end = filters[i + 1];

                if (start <= identifier && identifier <= end) {
                    return true;
                }
            }
        }

        return false;
    }

    string(value) {
        
        return (new Date(value)) + "";
    }
}

let date = new DateSchemeConstructor();

class TimeSchemeConstructor extends NumberSchemeConstructor {

    parse(value) {
        if (!isNaN(value))
            return parseFloat(value);
        try {
            var hour = parseInt(value.split(":")[0]);
            var min = parseInt(value.split(":")[1].split(" ")[0]);
            if (value.split(":")[1].split(" ")[1])
                half = (value.split(":")[1].split(" ")[1].toLowerCase() == "pm");
            else
                half = 0;
        } catch (e) {
            var hour = 0;
            var min = 0;
            var half = 0;
        }
        
        return parseFloat((hour + ((half) ? 12 : 0) + (min / 60)));
    }

    verify(value, result) {
        this.parse(value);
        super.verify(value, result);
    }

    filter(identifier, filters) {
        return true
    }

    string(value) {
        return (new Date(value)) + "";
    }
}

let time = new TimeSchemeConstructor();

class StringSchemeConstructor extends SchemeConstructor {
    
    constructor() {

        super();

        this.start_value = "";
    }
    parse(value) {

        return value + "";
    }

    verify(value, result) {
        result.valid = true;

        if (value === undefined) {
            result.valid = false;
            result.reason = " value is undefined";
        } else if (!value instanceof String) {
            result.valid = false;
            result.reason = " value is not a string.";
        }
    }

    filter(identifier, filters) {

        for (let i = 0, l = filters.length; i < l; i++)
            if (identifier.match(filters[i] + ""))
                return true;

        return false;
    }
}

let string$1 = new StringSchemeConstructor();

class BoolSchemeConstructor extends SchemeConstructor {

    constructor() {

        super();

        this.start_value = false;
    }

    parse(value) {

        return (value) ? true : false;
    }

    verify(value, result) {

        result.valid = true;

        if (value === undefined) {
            result.valid = false;
            result.reason = " value is undefined";
        } else if (!value instanceof Boolean) {
            result.valid = false;
            result.reason = " value is not a Boolean.";
        }
    }

    filter(identifier, filters) {

        if (value instanceof Boolean)
            return true;

        return false;
    }
}

let bool = new BoolSchemeConstructor();

let schemes = { date, string: string$1, number: number$1, bool, time };


/**
 * Used by Models to ensure conformance to a predefined data structure. Becomes immutable once created.
 * @param {Object} data - An Object of `key`:`value` pairs used to define the Scheme. `value`s must be instances of or SchemeConstructor or classes that extend SchemeConstructor.
 * @readonly
 */
class Schema {}

class BTreeModelContainer extends ModelContainerBase {

    constructor(data = [], root = null, address = []) {

        super(root, address);

        this.validator = schemes.number;

        if (data[0] && data[0].key) {

            let key = data[0].key;

            if (typeof key == "object") {

                if (key.type)
                    this.validator = (key.type instanceof NumberSchemeConstructor) ? key.type : this.validator;

                if (key.name)
                    this.key = key.name;

                if (key.unique_key)
                    this.unique_key = key.unique_key;
            } else
                this.key = key;

            if (data[0].model)
                this.model = data[0].model;

            data = data.slice(1);
        }

        this.min = 10;
        this.max = 20;
        this.size = 0;
        this.btree = null;

        if (Array.isArray(data) && data.length > 0)
            this.insert(data);
    }

    destroy() {
        if (this.btree)
            this.btree.destroy();

        super.destroy();
    }

    get length() {
        return this.size;
    }

    __insert__(model, add_list, identifier) {

        let result = {
            added: false
        };

        if (!this.btree)
            this.btree = new BtreeNode(true);

        this.btree = this.btree.insert(identifier, model, this.unique_key, this.max, true, result).newnode;

        if (add_list) add_list.push(model);

        if (result.added) {
            this.size++;
            this.__updateLinks__();
        }

        return result.added;
    }

    __get__(terms, __return_data__) {

        if(!this.btree) return __return_data__;

        if (__return_data__ instanceof BTreeModelContainer){
            __return_data__.btree = this.btree;
            return __return_data__;
        }

        let out = [];

        for (let i = 0, l = terms.length; i < l; i++) {
            let b, a = terms[i];

            if (a instanceof ModelBase)
                continue;

            if (i < l-1 && !(terms[i + 1] instanceof ModelBase)) {
                b = terms[++i];
            } else
                b = a;

            this.btree.get(a, b, out);
        }

        if (this._filters_) {
            for (let i = 0, l = out.length; i < l; i++) {
                let model = out[i];

                if (this._gI_(model, this._filters_))
                    __return_data__.push(model);
            }
        } else
            for (let i = 0, l = out.length; i < l; i++)
                __return_data__.push(out[i]);



        return __return_data__;
    }

    __remove__(terms, out_container = []) {

        if(!this.btree) return false;

        let result = 0;

        for (let i = 0, l = terms.length; i < l; i++) {
            let b, a = terms[i];

            if ((a instanceof ModelBase)) {
                let v = this._gI_(a);
                let o = this.btree.remove(v, v, this.unique_key, this.unique_key ? a[this.unique_key] : "", true, this.min, out_container);
                result += o.out;
                this.btree = o.out_node;
                continue;
            }

            if (i < l-1 && !(terms[i + 1] instanceof ModelBase)) {
                b = terms[++i];
            } else
                b = a;

            let o = this.btree.remove(a, b, "", "", true, this.min, out_container);
            result += o.out;
            this.btree = o.out_node;
        }

        if (result > 0) {
            this.size -= result;
            this.__updateLinks__();
            this.__linksRemove__(out_container);
        }


        return result !== 0;
    }

    __updateLinks__() {
        let a = this.first_link;
        while (a) {
            a.btree = this.btree;
            a = a.next;
        }
    }

    __getAll__(__return_data__) {

        if (this._filters_) {
            this.__get__(this._filters_, __return_data__);
        } else if (this.btree)
            this.btree.get(-Infinity, Infinity, __return_data__);

        return __return_data__;
    }

    __removeAll__() {
        if (this.btree)
            this.btree.destroy();
        this.btree = null;
    }

    toJSON() {
        let out_data = [];

        if (this.btree) {

            this.btree.get(this.min, this.max, out_data);
        }

        return out_data;
    }

    clone() {
        let clone = super.clone();
        clone.btree = this.btree;
        return clone;
    }
}

class BtreeNode {
    constructor(IS_LEAF = false) {
        this.LEAF = IS_LEAF;
        this.nodes = [];
        this.keys = [];
        this.items = 0;
    }

    destroy() {

        this.nodes = null;
        this.keys = null;

        if (!this.LEAF) {
            for (let i = 0, l = this.nodes.length; i < l; i++)
                this.nodes[i].destroy();
        }

    }

    balanceInsert(max_size, IS_ROOT = false) {
        if (this.keys.length >= max_size) {
            //need to split this up!

            let newnode = new BtreeNode(this.LEAF);

            let split = (max_size >> 1) | 0;

            let key = this.keys[split];

            let left_keys = this.keys.slice(0, split);
            let left_nodes = this.nodes.slice(0, (this.LEAF) ? split : split + 1);

            let right_keys = this.keys.slice((this.LEAF) ? split : split + 1);
            let right_nodes = this.nodes.slice((this.LEAF) ? split : split + 1);

            newnode.keys = right_keys;
            newnode.nodes = right_nodes;

            this.keys = left_keys;
            this.nodes = left_nodes;

            if (IS_ROOT) {

                let root = new BtreeNode();

                root.keys.push(key);
                root.nodes.push(this, newnode);

                return {
                    newnode: root,
                    key: key
                };
            }

            return {
                newnode: newnode,
                key: key
            };
        }

        return {
            newnode: this,
            key: 0
        };
    }

    /**
        Inserts model into the tree, sorted by identifier. 
    */
    insert(identifier, model, unique_key, max_size, IS_ROOT = false, result) {

        let l = this.keys.length;

        if (!this.LEAF) {

            for (var i = 0; i < l; i++) {

                let key = this.keys[i];

                if (identifier < key) {
                    let node = this.nodes[i];

                    let o = node.insert(identifier, model, unique_key, max_size, false, result);
                    let keyr = o.key;
                    let newnode = o.newnode;

                    if (keyr == undefined) debugger

                    if (newnode != node) {
                        this.keys.splice(i, 0, keyr);
                        this.nodes.splice(i + 1, 0, newnode);
                    }

                    return this.balanceInsert(max_size, IS_ROOT);
                }
            }

            let node = this.nodes[i];

            let {
                newnode,
                key
            } = node.insert(identifier, model, unique_key, max_size, false, result);

            if (key == undefined) debugger

            if (newnode != node) {
                this.keys.push(key);
                this.nodes.push(newnode);
            }

            return this.balanceInsert(max_size, IS_ROOT);

        } else {

            for (let i = 0, l = this.keys.length; i < l; i++) {
                let key = this.keys[i];

                if (identifier == key) {

                    if (unique_key) {
                        if (this.nodes[i][unique_key] !== model[unique_key]) { continue; }
                    } else
                        this.nodes[i].set(model);
                    

                    result.added = false;

                    return {
                        newnode: this,
                        key: identifier
                    };
                } else if (identifier < key) {

                    this.keys.splice(i, 0, identifier);
                    this.nodes.splice(i, 0, model);

                    result.added = true;

                    return this.balanceInsert(max_size, IS_ROOT);
                }
            }

            this.keys.push(identifier);
            this.nodes.push(model);

            result.added = true;

            return this.balanceInsert(max_size, IS_ROOT);
        }

        return {
            newnode: this,
            key: identifier,
        };
    }

    balanceRemove(index, min_size) {
        let left = this.nodes[index - 1];
        let right = this.nodes[index + 1];
        let node = this.nodes[index];

        //Left rotate
        if (left && left.keys.length > min_size) {

            let lk = left.keys.length;
            let ln = left.nodes.length;

            node.keys.unshift((node.LEAF) ? left.keys[lk - 1] : this.keys[index - 1]);
            node.nodes.unshift(left.nodes[ln - 1]);

            this.keys[index - 1] = left.keys[lk - 1];

            left.keys.length = lk - 1;
            left.nodes.length = ln - 1;

            return false;
        } else
            //Right rotate
            if (right && right.keys.length > min_size) {

                node.keys.push((node.LEAF) ? right.keys[0] : this.keys[index]);
                node.nodes.push(right.nodes[0]);

                right.keys.splice(0, 1);
                right.nodes.splice(0, 1);

                this.keys[index] = (node.LEAF) ? right.keys[1] : right.keys[0];

                return false;

            } else {

                //Left or Right Merge
                if (!left) {
                    index++;
                    left = node;
                    node = right;
                }

                let key = this.keys[index - 1];
                this.keys.splice(index - 1, 1);
                this.nodes.splice(index, 1);

                left.nodes = left.nodes.concat(node.nodes);
                if (!left.LEAF) left.keys.push(key);
                left.keys = left.keys.concat(node.keys);


                if (left.LEAF)
                    for (let i = 0; i < left.keys.length; i++)
                        if (left.keys[i] != left.nodes[i].id)
                            {/*debugger*/}

                return true;
            }

    }

    remove(start, end, unique_key, unique_id, IS_ROOT = false, min_size, out_container) {
        let l = this.keys.length,
            out = 0,
            out_node = this;

        if (!this.LEAF) {

            for (var i = 0; i < l; i++) {

                let key = this.keys[i];

                if (start <= key)
                    out += this.nodes[i].remove(start, end, unique_key, unique_id, false, min_size, out_container).out;
            }

            out += this.nodes[i].remove(start, end, unique_key, unique_id, false, min_size, out_container).out;

            for (var i = 0; i < this.nodes.length; i++) {
                if (this.nodes[i].keys.length < min_size) {
                    if (this.balanceRemove(i, min_size)) {
                        l--;
                        i--;
                    }
                }
            }

            if (this.nodes.length == 1)
                out_node = this.nodes[0];

        } else {

            for (let i = 0, l = this.keys.length; i < l; i++) {
                let key = this.keys[i];

                if (key <= end && key >= start) {
                    if (unique_key, unique_id && this.nodes[i][unique_key] !== unique_id) continue;
                    out_container.push(this.nodes[i]);
                    out++;
                    this.keys.splice(i, 1);
                    this.nodes.splice(i, 1);
                    l--;
                    i--;
                }
            }
        }

        return {
            out_node,
            out
        };
    }

    get(start, end, out_container) {

        if (!start || !end)
            return false;

        if (!this.LEAF) {

            for (var i = 0, l = this.keys.length; i < l; i++) {

                let key = this.keys[i];

                if (start <= key)
                    this.nodes[i].get(start, end, out_container);
            }

            this.nodes[i].get(start, end, out_container);

        } else {

            let out = false;

            for (let i = 0, l = this.keys.length; i < l; i++) {
                let key = this.keys[i];

                if (key <= end && key >= start)
                    out_container.push(this.nodes[i]);
            }
        }
    }
}

MultiIndexedContainer.btree = BTreeModelContainer;

const ArrayContainerProxySettings = {

    set: function(obj, prop, val) {

        if (prop in obj && obj[prop] == val)
            return true;

        let property = obj[prop];

        if (property && typeof(property) == "object")
            property.set(val);
        else
            obj[prop] = val;

        obj.scheduleUpdate(prop);

        return true;
    },

    get: function(obj, prop, val) {

        if (prop in obj)
            return obj[prop];

        if (!isNaN(prop))
            return obj.data[prop];

        let term = {};

        term[obj.key] = prop;

        return obj.get(prop, [])[0];
    }
};

/**
    Stores models in random order inside an internal array object. 
 */

class ArrayModelContainer extends ModelContainerBase {

    constructor(data = [], root = null, address = []) {

        super(root, address);

        if (data[0] && data[0].key) {

            let key = data[0].key;

            /* Custom selection of container types happens here. 
             * If there are multiple keys present, then a MultiIndexedContainer is used.
             * If the value of the key is a Numerical type, then a BtreeModelContainer is used.
             **/
            if (typeof(key) == "object") {

                if (Array.isArray(key))
                    return new MultiIndexedContainer(data, root, address);

                if (key.type) {
                    if (key.type instanceof NumberSchemeConstructor)
                        return new BTreeModelContainer(data, root, address);
                    this.validator = (key.type instanceof SchemeConstructor) ? key.type : this.validator;
                }

                if (key.name)
                    this.key = key.name;
            } else
                this.key = key;

            if (data[0].model)
                this.model = data[0].model;

            data = data.slice(1);
        }

        this.data = [];

        if (Array.isArray(data) && data.length > 0)
            this.insert(data, true);
    }

    destroy() {

        this.data = null;

        super.destroy();
    }

    get proxy() { return new Proxy(this, ArrayContainerProxySettings); }

    set proxy(v) {}

    get length() { return this.data.length; }

    __defaultReturn__(USE_ARRAY) {

        if (USE_ARRAY) return new MCArray();

        let n = this.clone();

        this.__link__(n);

        return n;
    }

    __insert__(model, add_list, identifier) {

        for (var i = 0, l = this.data.length; i < l; i++) {

            var obj = this.data[i];

            if (this._gI_(obj) == identifier) {

                if (obj.MUTATION_ID !== this.MUTATION_ID) {
                    obj = obj.clone();
                    obj.MUTATION_ID = this.MUTATION_ID;
                }

                obj.set(model, true);

                this.data[i] = obj;

                return false; //Model not added to Container. Model just updated.
            }
        }

        this.data.push(model);

        model.address = this.address.slice();
        model.address.push(this.data.length - 1);

        model.root = this.root;

        if (add_list) add_list.push(model);

        return true; // Model added to Container.
    }

    getByIndex(i) {
        return this.data[i];
    }

    setByIndex(i, m) {
        this.data[i] = m;
    }

    __get__(term, return_data) {

        let terms = null;

        if (term)
            if (term instanceof Array)
                terms = term;
            else
                terms = [term];

        for (let i = 0, l = this.data.length; i < l; i++) {
            let obj = this.data[i];
            if (this._gI_(obj, terms)) {
                return_data.push(obj);
            }
        }

        return return_data;
    }

    __getAll__(return_data) {

        this.data.forEach((m) => {
            return_data.push(m);
        });

        return return_data;
    }

    __removeAll__() {
        let items = this.data.map(d => d) || [];

        this.data.length = 0;

        return items;
    }

    _setThroughRoot_(data, address, index, len, m_id) {

        if (index >= len)
            return this;

        let i = address[index++];

        let model_prop = this.data[i];

        if (model_prop.MUTATION_ID !== this.MUTATION_ID) {
            model_prop = model_prop.clone();
            model_prop.MUTATION_ID = this.MUTATION_ID;
        }

        this.data[i] = model_prop;

        return model_prop._setThroughRoot_(data, address, index, len, model_prop.MUTATION_ID);
    }

    __remove__(term, out_container) {

        let result = false;

        term = term.map(t => (t instanceof ModelBase) ? this._gI_(t) : t);
        
        for (var i = 0, l = this.data.length; i < l; i++) {
            var obj = this.data[i];

            if (this._gI_(obj, term)) {

                result = true;

                this.data.splice(i, 1);

                l--;
                i--;

                out_container.push(obj);

                break;
            }
        }

        return result;
    }

    toJSON() { return this.data; }

    clone() {
        let clone = super.clone();
        clone.data = this.data.slice();
        return clone;
    }
}

MultiIndexedContainer.array = ArrayModelContainer;

Object.freeze(ArrayModelContainer);

class Model extends ModelBase {

    constructor(data, root = null, address = []) {

        super(root, address);

        _SealedProperty_(this, "prop_array", []);
        _SealedProperty_(this, "prop_offset", 0);
        _SealedProperty_(this, "look_up", {});

        if (data)
            for (let name in data)
                this.createProp(name, data[name]);

    }

    get proxy() { return this;}

    set(data, FROM_ROOT = false) {

        if (!FROM_ROOT)
            return this._deferUpdateToRoot_(data).set(data, true);

        if (!data)
            return false;

        let out = false;

        for (let prop_name in data) {

            let index = this.look_up[prop_name];

            if (index !== undefined) {

                let prop = this.prop_array[index];

                if (typeof(prop) == "object") {

                    if (prop.MUTATION_ID !== this.MUTATION_ID) {
                        prop = prop.clone();
                        prop.MUTATION_ID = this.MUTATION_ID;
                        this.prop_array[index] = prop;
                    }

                    if (prop.set(data[prop_name], true)){
                        this.scheduleUpdate(prop_name);
                        out = true;
                    }

                } else if (prop !== data[prop_name]) {
                    this.prop_array[index] = data[prop_name];
                     this.scheduleUpdate(prop_name);
                     out = true;
                }
            } else{
                this.createProp(prop_name, data[prop_name]);
                out = true;
            }
        }

        return out;
    }
    createProp(name, value) {

        let index = this.prop_offset++;

        this.look_up[name] = index;
        var address = this.address.slice();
        address.push(index);

        switch (typeof(value)) {

            case "object":
                if (Array.isArray(value))
                    this.prop_array.push(new ArrayModelContainer(value, this.root, address));
                else {
                    if (value instanceof ModelBase) {
                        value.address = address;
                        this.prop_array.push(value);
                    } else
                        this.prop_array.push(new Model(value, this.root, address));
                }

                this.prop_array[index].prop_name = name;
                this.prop_array[index].par = this;

                Object.defineProperty(this, name, {

                    configurable: false,

                    enumerable: true,

                    get: function() { return this.getHook(name, this.prop_array[index]); },

                    set: (v) => {}
                });

                break;

            case "function":

                let object = new value(null, this.root, address);

                object.par = this;
                object.prop_name = name;

                this.prop_array.push(object);

                Object.defineProperty(this, name, {

                    configurable: false,

                    enumerable: true,

                    get: function() { return this.getHook(name, this.prop_array[index]); },

                    set: (v) => {}
                });

                break;

            default:
                this.prop_array.push(value);

                Object.defineProperty(this, name, {

                    configurable: false,

                    enumerable: true,

                    get: function() { return this.getHook(name, this.prop_array[index]); },

                    set: function(value) {

                        let val = this.prop_array[index];

                        if (val !== value) {
                            this.prop_array[index] = this.setHook(name, value);
                            this.scheduleUpdate(name);
                        }
                    }
                });
        }

        this.scheduleUpdate(name);
    }

    toJSON(HOST = true){
        let data = {};

        for(let name in this.look_up){
            let index = this.look_up[name];
            let prop = this.prop_array[index];

            if(prop){
                if(prop instanceof ModelBase)
                    data[name] = prop.toJSON(false);
                else
                    data[name] = prop;
            }
        }

        return HOST ? JSON.stringify(data) : data;    
    }
}

ModelContainerBase.prototype.model = Model;

class Store {
    constructor(data) {

        this.history = [{ model: new Model(data, this), actions: [{ d: data, a: null }] }];
        this.MUTATION_ID = 0;
    }

    seal() { this.MUTATION_ID++; }

    getHistory(index) { return (this.history[index]) ? this.history[index].model : null; }

    get current() { return this.history[this.history.length - 1].model; }

    set current(v) {}

    get(data){
        return this.current.get(data);
    }

    set(data){
        return this.current.set(data);
    }

    _getParentMutationID_() { return this.MUTATION_ID; }

    _setThroughRoot_(data, address, index, len_minus_1, m_id) {

        let model_prop = this.current;

        if (m_id !== this.MUTATION_ID) {

            if (m_id > this.MUTATION_ID)
                this.MUTATION_ID = this.MUTATION_ID + 1;
            else
                this.MUTATION_ID = this.MUTATION_ID;

            model_prop = model_prop.clone();

            model_prop.MUTATION_ID = this.MUTATION_ID;

            this.history.push({ model: model_prop, actions: [] });
        }

        if (data)
            this.history[this.history.length - 1].actions.push({ d: data, a: address });

        return model_prop._setThroughRoot_(data, address, index, len_minus_1, this.MUTATION_ID);
    }
}

const uri_reg_ex = /(?:([a-zA-Z][\dA-Za-z\+\.\-]*)(?:\:\/\/))?(?:([a-zA-Z][\dA-Za-z\+\.\-]*)(?:\:([^\<\>\:\?\[\]\@\/\#\b\s]*)?)?\@)?(?:(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})|((?:\[[0-9a-f]{1,4})+(?:\:[0-9a-f]{0,4}){2,7}\])|([^\<\>\:\?\[\]\@\/\#\b\s\.]{2,}(?:\.[^\<\>\:\?\[\]\@\/\#\b\s]*)*))?(?:\:(\d+))?((?:[^\?\[\]\#\s\b]*)+)?(?:\?([^\[\]\#\s\b]*))?(?:\#([^\#\s\b]*))?/i;

const STOCK_LOCATION = {
    protocol: "",
    host: "",
    port: "",
    path: "",
    hash: "",
    query: "",
    search: ""
};

function fetchLocalText(URL, m = "same-origin") {
    return new Promise((res, rej) => {
        fetch(URL, {
            mode: m, // CORs not allowed
            credentials: m,
            method: "GET"
        }).then(r => {

            if (r.status < 200 || r.status > 299)
                r.text().then(rej);
            else
                r.text().then(res);
        }).catch(e => rej(e));
    });
}

function fetchLocalJSON(URL, m = "same-origin") {
    return new Promise((res, rej) => {
        fetch(URL, {
            mode: m, // CORs not allowed
            credentials: m,
            method: "GET"
        }).then(r => {
            if (r.status < 200 || r.status > 299)
                r.json().then(rej);
            else
                r.json().then(res).catch(rej);
        }).catch(e => rej(e));
    });
}

function submitForm(URL, form_data, m = "same-origin") {
    return new Promise((res, rej) => {
        var form;

        if (form_data instanceof FormData)
            form = form_data;
        else {
            form = new FormData();
            for (let name in form_data)
                form.append(name, form_data[name] + "");
        }

        fetch(URL, {
            mode: m, // CORs not allowed
            credentials: m,
            method: "POST",
            body: form,
        }).then(r => {
            if (r.status < 200 || r.status > 299)
                r.text().then(rej);
            else
                r.json().then(res);
        }).catch(e => e.text().then(rej));
    });
}

function submitJSON(URL, json_data, m = "same-origin") {
    return new Promise((res, rej) => {
        fetch(URL, {
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json',
            },
            mode: m, // CORs not allowed
            credentials: m,
            method: "POST",
            body: JSON.stringify(json_data),
        }).then(r => {
            if (r.status < 200 || r.status > 299)
                r.json().then(rej);
            else
                r.json().then(res);
        }).catch(e => e.text().then(rej));
    });
}



/**
 * Used for processing URLs, handling `document.location`, and fetching data.
 * @param      {string}   url           The URL string to wrap.
 * @param      {boolean}  USE_LOCATION  If `true` missing URL parts are filled in with data from `document.location`. 
 * @return     {URL}   If a falsy value is passed to `url`, and `USE_LOCATION` is `true` a Global URL is returned. This is directly linked to the page and will _update_ the actual page URL when its values are change. Use with caution. 
 * @alias URL
 * @memberof module:wick.core.network
 */
class URL {

    static resolveRelative(URL_or_url_new, URL_or_url_original = document.location.toString(), ) {

        let URL_old = (URL_or_url_original instanceof URL) ? URL_or_url_original : new URL(URL_or_url_original);
        let URL_new = (URL_or_url_new instanceof URL) ? URL_or_url_new : new URL(URL_or_url_new);

        if (!(URL_old + "") || !(URL_new + "")) return null;

        let new_path = "";
        if (URL_new.path[0] != "/") {

            let a = URL_old.path.split("/");
            let b = URL_new.path.split("/");


            if (b[0] == "..") a.splice(a.length - 1, 1);
            for (let i = 0; i < b.length; i++) {
                switch (b[i]) {
                    case "..":
                    case ".":
                        a.splice(a.length - 1, 1);
                        break;
                    default:
                        a.push(b[i]);
                }
            }
            URL_new.path = a.join("/");
        }

        return URL_new;
    }

    constructor(url = "", USE_LOCATION = false) {

        let IS_STRING = true,
            IS_LOCATION = false;


        let location = (typeof(document) !== "undefined") ? document.location : STOCK_LOCATION;

        if (typeof(Location) !== "undefined" && url instanceof Location) {
            location = url;
            url = "";
            IS_LOCATION = true;
        }
        if (!url || typeof(url) != "string") {
            IS_STRING = false;
            IS_LOCATION = true;
            if (URL.GLOBAL && USE_LOCATION)
                return URL.GLOBAL;
        }

        /**
         * URL protocol
         */
        this.protocol = "";

        /**
         * Username string
         */
        this.user = "";

        /**
         * Password string
         */
        this.pwd = "";

        /**
         * URL hostname
         */
        this.host = "";

        /**
         * URL network port number.
         */
        this.port = 0;

        /**
         * URL resource path
         */
        this.path = "";

        /**
         * URL query string.
         */
        this.query = "";

        /**
         * Hashtag string
         */
        this.hash = "";

        /**
         * Map of the query data
         */
        this.map = null;

        if (IS_STRING) {
            if (url instanceof URL) {
                this.protocol = url.protocol;
                this.user = url.user;
                this.pwd = url.pwd;
                this.host = url.host;
                this.port = url.port;
                this.path = url.path;
                this.query = url.query;
                this.hash = url.hash;
            } else {
                let part = url.match(uri_reg_ex);

                //If the complete string is not matched than we are dealing with something other 
                //than a pure URL. Thus, no object is returned. 
                if (part[0] !== url) return null;

                this.protocol = part[1] || ((USE_LOCATION) ? location.protocol : "");
                this.user = part[2] || "";
                this.pwd = part[3] || "";
                this.host = part[4] || part[5] || part[6] || ((USE_LOCATION) ? location.hostname : "");
                this.port = parseInt(part[7] || ((USE_LOCATION) ? location.port : 0));
                this.path = part[8] || ((USE_LOCATION) ? location.pathname : "");
                this.query = part[9] || ((USE_LOCATION) ? location.search.slice(1) : "");
                this.hash = part[10] || ((USE_LOCATION) ? location.hash.slice(1) : "");

            }
        } else if (IS_LOCATION) {
            this.protocol = location.protocol.replace(/\:/g, "");
            this.host = location.hostname;
            this.port = location.port;
            this.path = location.pathname;
            this.hash = location.hash.slice(1);
            this.query = location.search.slice(1);
            this._getQuery_(this.query);

            if (USE_LOCATION) {
                URL.G = this;
                return URL.R;
            }
        }
        this._getQuery_(this.query);
    }


    /**
    URL Query Syntax

    root => [root_class] [& [class_list]]
         => [class_list]

    root_class = key_list

    class_list [class [& key_list] [& class_list]]

    class => name & key_list

    key_list => [key_val [& key_list]]

    key_val => name = val

    name => ALPHANUMERIC_ID

    val => NUMBER
        => ALPHANUMERIC_ID
    */

    /**
     * Pulls query string info into this.map
     * @private
     */
    _getQuery_() {
        let map = (this.map) ? this.map : (this.map = new Map());

        let lex = whind$1(this.query);


        const get_map = (k, m) => (m.has(k)) ? m.get(k) : m.set(k, new Map).get(k);

        let key = 0,
            key_val = "",
            class_map = get_map(key_val, map),
            lfv = 0;

        while (!lex.END) {
            switch (lex.tx) {
                case "&": //At new class or value
                    if (lfv > 0)
                        key = (class_map.set(key_val, lex.s(lfv)), lfv = 0, lex.n.pos);
                    else {
                        key_val = lex.s(key);
                        key = (class_map = get_map(key_val, map), lex.n.pos);
                    }
                    continue;
                case "=":
                    //looking for a value now
                    key_val = lex.s(key);
                    lfv = lex.n.pos;
                    continue;
            }
            lex.n;
        }

        if (lfv > 0) class_map.set(key_val, lex.s(lfv));
    }

    setPath(path) {

        this.path = path;

        return new URL(this);
    }

    setLocation() {
        history.replaceState({}, "replaced state", `${this}`);
        window.onpopstate();
    }

    toString() {
        let str = [];

        if (this.host) {

            if (this.protocol)
                str.push(`${this.protocol}://`);

            str.push(`${this.host}`);
        }

        if (this.port)
            str.push(`:${this.port}`);

        if (this.path)
            str.push(`${this.path[0] == "/" ? "" : "/"}${this.path}`);

        if (this.query)
            str.push(((this.query[0] == "?" ? "" : "?") + this.query));

        if (this.hash)
            str.push("#" + this.hash);


        return str.join("");
    }

    /**
     * Pulls data stored in query string into an object an returns that.
     * @param      {string}  class_name  The class name
     * @return     {object}  The data.
     */
    getData(class_name = "") {
        if (this.map) {
            let out = {};
            let _c = this.map.get(class_name);
            if (_c) {
                for (let [key, val] of _c.entries())
                    out[key] = val;
                return out;
            }
        }
        return null;
    }

    /**
     * Sets the data in the query string. Wick data is added after a second `?` character in the query field, and appended to the end of any existing data.
     * @param      {string}  class_name  Class name to use in query string. Defaults to root, no class 
     * @param      {object | Model | AnyModel}  data        The data
     */
    setData(data = null, class_name = "") {

        if (data) {

            let map = this.map = new Map();

            let store = (map.has(class_name)) ? map.get(class_name) : (map.set(class_name, new Map()).get(class_name));

            //If the data is a falsy value, delete the association.

            for (let n in data) {
                if (data[n] !== undefined && typeof data[n] !== "object")
                    store.set(n, data[n]);
                else
                    store.delete(n);
            }

            //set query
            let class_, null_class, str = "";

            if ((null_class = map.get(""))) {
                if (null_class.size > 0) {
                    for (let [key, val] of null_class.entries())
                        str += `&${key}=${val}`;

                }
            }

            for (let [key, class_] of map.entries()) {
                if (key === "")
                    continue;
                if (class_.size > 0) {
                    str += `&${key}`;
                    for (let [key, val] of class_.entries())
                        str += `&${key}=${val}`;
                }
            }

            str = str.slice(1);

            this.query = this.query.split("?")[0] + "?" + str;

            if (URL.G == this)
                this.goto();
        } else {
            this.query = "";
        }

        return this;

    }

    /**
     * Fetch a string value of the remote resource. 
     * Just uses path component of URL. Must be from the same origin.
     * @param      {boolean}  [ALLOW_CACHE=true]  If `true`, the return string will be cached. If it is already cached, that will be returned instead. If `false`, a network fetch will always occur , and the result will not be cached.
     * @return     {Promise}  A promise object that resolves to a string of the fetched value.
     */
    fetchText(ALLOW_CACHE = true) {

        if (ALLOW_CACHE) {

            let resource = URL.RC.get(this.path);

            if (resource)
                return new Promise((res) => {
                    res(resource);
                });
        }

        return fetchLocalText(this.path).then(res => (URL.RC.set(this.path, res), res));
    }

    /**
     * Fetch a JSON value of the remote resource. 
     * Just uses path component of URL. Must be from the same origin.
     * @param      {boolean}  [ALLOW_CACHE=true]  If `true`, the return string will be cached. If it is already cached, that will be returned instead. If `false`, a network fetch will always occur , and the result will not be cached.
     * @return     {Promise}  A promise object that resolves to a string of the fetched value.
     */
    fetchJSON(ALLOW_CACHE = true) {

        let string_url = this.toString();

        if (ALLOW_CACHE) {

            let resource = URL.RC.get(string_url);

            if (resource)
                return new Promise((res) => {
                    res(resource);
                });
        }

        return fetchLocalJSON(string_url).then(res => (URL.RC.set(this.path, res), res));
    }

    /**
     * Cache a local resource at the value 
     * @param    {object}  resource  The resource to store at this URL path value.
     * @returns {boolean} `true` if a resource was already cached for this URL, false otherwise.
     */
    cacheResource(resource) {

        let occupied = URL.RC.has(this.path);

        URL.RC.set(this.path, resource);

        return occupied;
    }

    submitForm(form_data) {
        return submitForm(this.toString(), form_data);
    }

    submitJSON(json_data, mode) {
        return submitJSON(this.toString(), json_data, mode);
    }
    /**
     * Goes to the current URL.
     */
    goto() {
        return;
        let url = this.toString();
        history.pushState({}, "ignored title", url);
        window.onpopstate();
        URL.G = this;
    }
    //Returns the last segment of the path
    get file() {
        return this.path.split("/").pop();
    }


    //Returns the all but the last segment of the path
    get dir() {
        return this.path.split("/").slice(0, -1).join("/") || "/";
    }

    get pathname() {
        return this.path;
    }

    get href() {
        return this.toString();
    }

    get ext() {
        const m = this.path.match(/\.([^\.]*)$/);
        return m ? m[1] : "";
    }

    get search() {
        return this.query;
    }
}

/**
 * The fetched resource cache.
 */
URL.RC = new Map();

/**
 * The Default Global URL object. 
 */
URL.G = null;

/**
 * The Global object Proxy.
 */
URL.R = {
    get protocol() {
        return URL.G.protocol;
    },
    set protocol(v) {
        return;
        URL.G.protocol = v;
    },
    get user() {
        return URL.G.user;
    },
    set user(v) {
        return;
        URL.G.user = v;
    },
    get pwd() {
        return URL.G.pwd;
    },
    set pwd(v) {
        return;
        URL.G.pwd = v;
    },
    get host() {
        return URL.G.host;
    },
    set host(v) {
        return;
        URL.G.host = v;
    },
    get port() {
        return URL.G.port;
    },
    set port(v) {
        return;
        URL.G.port = v;
    },
    get path() {
        return URL.G.path;
    },
    set path(v) {
        return;
        URL.G.path = v;
    },
    get query() {
        return URL.G.query;
    },
    set query(v) {
        return;
        URL.G.query = v;
    },
    get hash() {
        return URL.G.hash;
    },
    set hash(v) {
        return;
        URL.G.hash = v;
    },
    get map() {
        return URL.G.map;
    },
    set map(v) {
        return;
        URL.G.map = v;
    },
    setPath(path) {
        return URL.G.setPath(path);
    },
    setLocation() {
        return URL.G.setLocation();
    },
    toString() {
        return URL.G.toString();
    },
    getData(class_name = "") {
        return URL.G.getData(class_name = "");
    },
    setData(class_name = "", data = null) {
        return URL.G.setData(class_name, data);
    },
    fetchText(ALLOW_CACHE = true) {
        return URL.G.fetchText(ALLOW_CACHE);
    },
    cacheResource(resource) {
        return URL.G.cacheResource(resource);
    }
};





let SIMDATA = null;

/* Replaces the fetch actions with functions that simulate network fetches. Resources are added by the user to a Map object. */
URL.simulate = function() {
    SIMDATA = new Map;
    URL.prototype.fetchText = async d => ((d = this.toString()), SIMDATA.get(d)) ? SIMDATA.get(d) : "";
    URL.prototype.fetchJSON = async d => ((d = this.toString()), SIMDATA.get(d)) ? JSON.parse(SIMDATA.get(d).toString()) : {};
};

//Allows simulated resources to be added as a key value pair, were the key is a URI string and the value is string data.
URL.addResource = (n, v) => (n && v && (SIMDATA || (SIMDATA = new Map())) && SIMDATA.set(n.toString(), v.toString));

URL.polyfill = async function() {
    if (typeof(global) !== "undefined") {

        const 
            fs = (await Promise.resolve(require("fs"))).promises,
            path = (await Promise.resolve(require("path")));


        global.Location = (class extends URL {});

        global.document = global.document || {};

        global.document.location = new URL(process.env.PWD);
        /**
         * Global `fetch` polyfill - basic support
         */
        global.fetch = async (url, data) => {
            let
                p = path.join(process.cwd(), (url[0] == ".") ? url + "" : "." + url),
                d = await fs.readFile(p, "utf8");

            try {
                return {
                    status: 200,
                    text: () => {
                        return {
                            then: (f) => f(d)
                        }
                    }
                };
            } catch (err) {
                throw err;
            }
        };
    }
};

Object.freeze(URL.R);
Object.freeze(URL.RC);
Object.seal(URL);

//import { CustomComponent } from "../page/component"

let CachedPresets = null;
/**
 // There are a number of configurable options and global objects that can be passed to wick to be used throughout the PWA. The instances of the Presets class are objects that hosts all these global properties. 
 * 
 // Presets are designed to be created once, upfront, and not changed once defined. This reinforces a holistic design for a PWA should have in terms of the types of Schemas, global Models, and overall form the PWA takes, e.g whether to use the ShadowDOM or not.
 * 
 // Note: *This object is made immutable once created. There may only be one instance of Presets*
 * 
 */
class Presets {
    constructor(preset_options = {}) {

        if(Presets.global.v)
            return Presets.global.v;

        this.store = (preset_options.store instanceof Store) ? preset_options.store : null;

        /**
         * {Object} Store for optional parameters used in the app
         */
        this.options = {
            USE_SECURE: true,
            USE_SHADOW: false,
        };

        //Declaring the properties upfront to give the VM a chance to build an appropriate virtual class.
        this.components = {};

        this.custom_components = {};

        /** 
         * Store of user defined CustomScopePackage factories that can be used in place of the components built by the Wick templating system. Accepts any class extending the CustomComponent class. Adds these classes from preset_options.custom_scopes or preset_options.components. 
         * 
         * In routing mode, a HTML `<component>` tag whose first classname matches a property name of a member of presets.custom_scopes will be assigned to an instance of that member.
         * 
         * ### Example
         * In HTML:
         * ```html
         * <component class="my_scope class_style">
         * 
         * ```
         * In JavaScript:
         * ```javascript
         * let MyScope = CustomScopePackage( ele =>{
         *      ele.append
         * }, {});
         * 
         * preset_options.custom_componets = {
         *      my_scope : MyScope
         * }
         * ```
         * @instance
         * @readonly
         */
        this.custom_scopes = {};

        /**
         * { Object } Store of user defined classes that extend the Model or Model classes. `<w-scope>` tags in templates that have a value set for the  `schema` attribute, e.g. `<w-s schema="my_favorite_model_type">...</w-s>`, will be bound to a new instance of the class in presets.schema whose property name matches the "schema" attribute.
         * 
         * Assign classes that extend Model or SchemedModel to preset_options.schemas to have them available to Wick.
         * 
         * In JavaScript:
         * ```javascript
         * class MyFavoriteModelType extends Model {};
         * preset_options.custom_componets = {
         *      my_favorite_model_type : MyFavoriteModelType
         * }
         * ```
         * note: presets.schema.any is always assigned to the Model class.
         * @instance
         * @readonly
         */
        this.schemas = { any: Model };

        /**
         * { Object } Store of user defined Model instances that serve as global models, which are available to the whole application. Multiple Scopes will be able to _bind_ to the Models. `<w-scope>` tags in templates that have a value set for the  `model` attribute, e.g. `<w-s model="my_global_model">...</w-s>`, will be bound to the model in presets .model whose property name matches the "model" attribute.
         * 
         * Assign instances of Model or Model or any class that extends these to preset_options.models to have them used by Wick.
         * 
         * In JavaScript:
         * ```javascript
         * const MyGlobalModel = new Model({global_data: "This is global!"});
         * preset_options.custom_componets = {
         *      my_global_model : MyGlobalModel
         * }
         * ```
         * @instance
         * @readonly
         */
        this.models = {};

        /**
         * Configured by `preset_options.USE_SHADOW`. If set to true, and if the browser supports it, compiled and rendered template elements will be bound to a `<component>` shadow DOM, instead being appended as a child node.
         * @instance
         * @readonly
         */
        this.USE_SHADOW = false;

        /**
         * { Object } Contains all user defined HTMLElement templates 
         */
        this.templates = {};

        /**
         * Custom objects that can be used throughout component scripts. User defined. 
         */
        this.custom = preset_options.custom;

        let c = preset_options.options;
        if (c)
            for (let cn in c)
                this.options[cn] = c[cn];


        c = preset_options.components;
        if (c)
            for (let cn in c)
                this.components[cn] = c[cn];

        c = preset_options.custom_scopes;
        if (c)
            for (let cn in c)
                if (cn instanceof CustomComponent)
                    this.custom_scopes[cn] = c[cn];

        c = preset_options.custom_components;
        if (c)
            for (let cn in c)
                this.custom_components[cn] = c[cn];

        c = preset_options.models;

        if (c)
            for (let cn in c)
                if (c[cn] instanceof ModelBase)
                    this.models[cn] = c[cn];

        c = preset_options.schemas;
        if (c)
            for (let cn in c)
                if (ModelBase.isPrototypeOf(c[cn]))
                    this.schemas[cn] = c[cn];

        this.options.USE_SHADOW = (this.options.USE_SHADOW) ? (DOC.head.createShadowRoot || DOC.head.attachShadow) : false;

        this.url = URL;

        Object.freeze(this.options);
        Object.freeze(this.custom_scopes);
        Object.freeze(this.schemas);
        Object.freeze(this.models);

        CachedPresets = this;
    }

    processLink(link) {}

    /**
        Copies values of the Presets object into a generic object. The new object is not frozen.
    */
    copy() {
        let obj = {};

        for (let a in this) {
            if (a == "components")
                obj.components = this.components;
            else if (typeof(this[a]) == "object")
                obj[a] = Object.assign({}, this[a]);
            else if (typeof(this[a]) == "array")
                obj[a] = this[a].slice();
            else
                obj[a] = this[a];
        }

        obj.processLink = this.processLink.bind(this);

        return obj;
    }
}

Presets.global = {get v(){return CachedPresets}, set v(e){}};

/**
 *   This is used by Model to create custom property getter and setters on non-ModelContainerBase and non-Model properties of the Model constructor.
 *   @protected
 *   @memberof module:wick~internals.model
 */
function CreateSchemedProperty(object, scheme, schema_name, index) {
    if (object[schema_name])
        return;

    Object.defineProperty(object, schema_name, {
        configurable: false,
        enumerable: true,
        get: function() {
            return this.getHook(schema_name, this.prop_array[index]);
        },
        set: function(value) {

            let result = { valid: false };

            let val = scheme.parse(value);

            scheme.verify(val, result);

            if (result.valid && this.prop_array[index] != val) {
                this.prop_array[index] = this.setHook(schema_name, val);
                this.scheduleUpdate(schema_name);
                this._changed_ = true;
            }
        }
    });
}

/**
    This is used by Model to create custom property getter and setters on Model properties of the Model constructor.
    @protected
    @memberof module:wick~internals.model
*/
function CreateModelProperty(object, model, schema_name, index) {

    Object.defineProperty(object, schema_name, {
        configurable: false,
        enumerable: true,
        get: function() {

            let m = this.prop_array[index];

            if (!m) {
                let address = this.address.slice();
                address.push(index);
                m = new model(null, this.root, address);
                m.par = this;
                m.prop_name = schema_name;
                m.MUTATION_ID = this.MUTATION_ID;
                this.prop_array[index] = m;
            }

            return this.getHook(schema_name, m);
        }
    });
}

class SchemedModel extends ModelBase {

    constructor(data, root = null, address = [], _schema_ = null) {

        super(root, address);

        if (this.constructor === SchemedModel)
            this.constructor = (class extends SchemedModel {});

        if (!this.schema) {

            let schema = this.constructor.schema || _schema_;

            this.constructor.schema = schema;

            if (schema) {

                let __FinalConstructor__ = schema.__FinalConstructor__;

                let constructor = this.constructor;
                let prototype = constructor.prototype;

                if (!__FinalConstructor__) {
                    let count = 0;
                    let look_up = {};

                    for (let schema_name in schema) {
                        let scheme = schema[schema_name];

                        if (schema_name == "self" && Array.isArray(scheme)) 
                            return new SchemedContainer(schema, root, address);
                        

                        if (schema_name == "getHook") {
                            prototype.getHook = scheme;
                            continue;
                        }

                        if (schema_name == "setHook") {
                            prototype.setHook = scheme;
                            continue;
                        }

                        if (schema_name == "proto") {
                            for (let name in schema.proto)
                                _SealedProperty_(prototype, name, schema.proto[name]);
                            continue;
                        }

                        if (typeof(scheme) == "function") {
                            CreateModelProperty(prototype, scheme, schema_name, count);
                        } else if (typeof(scheme) == "object") {
                            if (Array.isArray(scheme)) {
                                if (scheme[0] && scheme[0].container && scheme[0].schema)
                                    CreateModelProperty(prototype, scheme[0], schema_name, count);
                                else if (scheme[0] instanceof ModelContainerBase)
                                    CreateModelProperty(prototype, scheme[0].constructor, schema_name, count);
                                else
                                    CreateModelProperty(prototype, Model, schema_name, count);
                            } else if (scheme instanceof SchemeConstructor)
                                CreateSchemedProperty(prototype, scheme, schema_name, count);
                            else {
                                CreateModelProperty(prototype, scheme.constructor, schema_name, count);
                            }
                        } else {
                            console.warn(`Could not create property ${schema_name}.`);

                            continue;
                        }

                        look_up[schema_name] = count;
                        count++;
                    }

                    _SealedProperty_(prototype, "prop_offset", count);
                    _SealedProperty_(prototype, "look_up", look_up);
                    _SealedProperty_(prototype, "changed", false);

                    Object.seal(constructor);

                    schema.__FinalConstructor__ = constructor;
                    //_FrozenProperty_(schema, "__FinalConstructor__", constructor);

                    //Start the process over with a newly minted Model that has the properties defined in the Schema
                    return new schema.__FinalConstructor__(data, root, address);
                }

                _FrozenProperty_(prototype, "schema", schema);
            } else
                return new Model(data, root, address);
        }

        Object.defineProperty(this, "prop_array", { value: new Array(this.prop_offset), enumerable: false, configurable: false, writable: true });

        if (data)
            this.set(data, true);
    }

    destroy() { this.root = null; }

    set(data, FROM_ROOT = false) {

        if (!FROM_ROOT)
            return this._deferUpdateToRoot_(data).set(data, true);

        if (!data)
            return false;

        this._changed_ = false;

        for (let prop_name in data) {

            let data_prop = data[prop_name];

            let index = this.look_up[prop_name];

            if (index !== undefined) {

                let prop = this[prop_name];

                if (typeof(prop) == "object") {

                    if (prop.MUTATION_ID !== this.MUTATION_ID) {
                        prop = prop.clone();
                        prop.MUTATION_ID = this.MUTATION_ID;
                        this.prop_array[index] = prop;
                    }

                    if (prop.set(data_prop, true))
                        this.scheduleUpdate(prop_name);

                } else {
                    this[prop_name] = data_prop;
                }
            }
        }

        return this._changed_;
    }

    createProp() {}
}
SchemedModel.prototype.toJSON = Model.prototype.toJSON;

class SchemedContainer extends ArrayModelContainer {
    
    constructor(schema, root, address) {

        super(schema.self, root, address);

        if (schema.proto)
            for (let name in schema.proto)
                _SealedProperty_(this, name, schema.proto[name]);
    }
}

/**
 * To be extended by objects needing linked list methods.
 */
const LinkedList = {

    props: {
        /**
         * Properties for horizontal graph traversal
         * @property {object}
         */
        defaults: {
            /**
             * Next sibling node
             * @property {object | null}
             */
            nxt: null,

            /**
             * Previous sibling node
             * @property {object | null}
             */
            prv: null
        },

        /**
         * Properties for vertical graph traversal
         * @property {object}
         */
        children: {
            /**
             * Number of children nodes.
             * @property {number}
             */
            noc: 0,
            /**
             * First child node
             * @property {object | null}
             */
            fch: null,
        },
        parent: {
            /**
             * Parent node
             * @property {object | null}
             */
            par: null
        }
    },

    methods: {
        /**
         * Default methods for Horizontal traversal
         */
        defaults: {

            insertBefore: function(node) {

                if (!this.nxt && !this.prv) {
                    this.nxt = this;
                    this.prv = this;
                }

                if(node){
                    if (node.prv)
                       node.prv.nxt = node.nxt;
                    
                    if(node.nxt) 
                        node.nxt.prv = node.prv;
                
                    node.prv = this.prv;
                    node.nxt = this;
                    this.prv.nxt = node;
                    this.prv = node;
                }else{
                    if (this.prv)
                        this.prv.nxt = node;
                    this.prv = node;
                } 
            },

            insertAfter: function(node) {

                if (!this.nxt && !this.prv) {
                    this.nxt = this;
                    this.prv = this;
                }

                if(node){
                    if (node.prv)
                       node.prv.nxt = node.nxt;
                    
                    if(node.nxt) 
                        node.nxt.prv = node.prv;
                
                    node.nxt = this.nxt;
                    node.prv = this;
                    this.nxt.prv = node;
                    this.nxt = node;
                }else{
                    if (this.nxt)
                        this.nxt.prv = node;
                    this.nxt = node;
                } 
            }
        },
        /**
         * Methods for both horizontal and vertical traversal.
         */
        parent_child: {
            /**
             *  Returns eve. 
             * @return     {<type>}  { description_of_the_return_value }
             */
            root() {
                return this.eve();
            },
            /**
             * Returns the root node. 
             * @return     {Object}  return the very first node in the linked list graph.
             */
            eve() {
                if (this.par)
                    return this.par.eve();
                return this;
            },

            push(node) {
                this.addChild(node);
            },

            unshift(node) {
                this.addChild(node, (this.fch) ? this.fch.pre : null);
            },

            replace(old_node, new_node) {
                if (old_node.par == this && old_node !== new_node) {
                    if (new_node.par) new_node.par.remove(new_node);

                    if (this.fch == old_node) this.fch = new_node;
                    new_node.par = this;


                    if (old_node.nxt == old_node) {
                        new_node.nxt = new_node;
                        new_node.prv = new_node;
                    } else {
                        new_node.prv = old_node.prv;
                        new_node.nxt = old_node.nxt;
                        old_node.nxt.prv = new_node;
                        old_node.prv.nxt = new_node;
                    }

                    old_node.par = null;
                    old_node.prv = null;
                    old_node.nxt = null;
                }
            },

            insertBefore: function(node) {
                if (this.par)
                    this.par.addChild(node, this.pre);
                else
                    LinkedList.methods.defaults.insertBefore.call(this, node);
            },

            insertAfter: function(node) {
                if (this.par)
                    this.par.addChild(node, this);
                else
                    LinkedList.methods.defaults.insertAfter.call(this, node);
            },

            addChild: function(child = null, prev = null) {

                if (!child) return;

                if (child.par)
                    child.par.removeChild(child);

                if (prev && prev.par && prev.par == this) {
                    if (child == prev) return;
                    child.prv = prev;
                    prev.nxt.prv = child;
                    child.nxt = prev.nxt;
                    prev.nxt = child;
                } else if (this.fch) {
                    child.prv = this.fch.prv;
                    this.fch.prv.nxt = child;
                    child.nxt = this.fch;
                    this.fch.prv = child;
                } else {
                    this.fch = child;
                    child.nxt = child;
                    child.prv = child;
                }

                child.par = this;
                this.noc++;
            },

            /**
             * Analogue to HTMLElement.removeChild()
             *
             * @param      {HTMLNode}  child   The child
             */
            removeChild: function(child) {
                if (child.par && child.par == this) {
                    child.prv.nxt = child.nxt;
                    child.nxt.prv = child.prv;

                    if (child.prv == child || child.nxt == child) {
                        if (this.fch == child)
                            this.fch = null;
                    } else if (this.fch == child)
                        this.fch = child.nxt;

                    child.prv = null;
                    child.nxt = null;
                    child.par = null;
                    this.noc--;
                }
            },

            /**
             * Gets the next node. 
             *
             * @param      {HTMLNode}  node    The node to get the sibling of.
             * @return {HTMLNode | TextNode | undefined}
             */
            getNextChild: function(node = this.fch) {
                if (node && node.nxt != this.fch && this.fch)
                    return node.nxt;
                return null;
            },

            /**
             * Gets the child at index.
             *
             * @param      {number}  index   The index
             */
            getChildAtIndex: function(index, node = this.fch) {
                if(node.par !== this)
                    node = this.fch;

                let first = node;
                let i = 0;
                while (node && node != first) {
                    if (i++ == index)
                        return node;
                    node = node.nxt;
                }

                return null;
            },
        }
    },

    gettersAndSetters : {
        peer : {
            next: {
                enumerable: true,
                configurable: true,
                get: function() {
                    return this.nxt;
                },
                set: function(n) {
                    this.insertAfter(n);
                }
            },
            previous: {
                enumerable: true,
                configurable: true,
                get: function() {
                    return this.prv;
                },
                set: function(n) {
                    this.insertBefore(n);
                }   
            }
        },
        tree : {
            children: {
                enumerable: true,
                configurable: true,
                /**
                 * @return {array} Returns an array of all children.
                 */
                get: function() {
                    for (var z = [], i = 0, node = this.fch; i++ < this.noc;)(
                        z.push(node), node = node.nxt
                    );
                    return z;
                },
                set: function(e) {
                    /* No OP */
                }
            },
            parent: {
                enumerable: true,
                configurable: true,
                /**
                 * @return parent node
                 */
                get: function() {
                    return this.par;
                },
                set: function(p) {
                    if(p && p.addChild)
                        p.addChild(this);
                    else if(p === null && this.par)
                        this.par.removeChild(this);
                }
            }
        }
    },


    mixin : (constructor)=>{
        const proto = (typeof(constructor) == "function") ? constructor.prototype : (typeof(constructor) == "object") ? constructor : null;
        if(proto){
            Object.assign(proto, 
                LinkedList.props.defaults, 
                LinkedList.methods.defaults
            );
        }
        Object.defineProperties(proto, LinkedList.gettersAndSetters.peer);
    },

    mixinTree : (constructor)=>{
        const proto = (typeof(constructor) == "function") ? constructor.prototype : (typeof(constructor) == "object") ? constructor : null;
        if(proto){
            Object.assign(proto, 
                LinkedList.props.defaults, 
                LinkedList.props.children, 
                LinkedList.props.parent, 
                LinkedList.methods.defaults, 
                LinkedList.methods.parent_child
                );
            Object.defineProperties(proto, LinkedList.gettersAndSetters.tree);
            Object.defineProperties(proto, LinkedList.gettersAndSetters.peer);
        }
    }
};

/** NODE TYPE IDENTIFIERS **/
const HTML = 0;
const TEXT = 1;
const offset = "    ";

// Pollyfill of HTMLElement classList
function classList(this_arg, list) {
    Object.assign(list, {
        add: (name) => {
            let attrib = this_arg.getAttrib("class");
            if (attrib) {
                attrib.value += " " + name;
                list.push(name);
            } else {
                this_arg.setAttribute("class", name);
            }
        }
    });
    return list;
}

/**
 * A node for text data.
 * @param  {string}  str     The text value of the node.
 */
class TextNode {

    constructor(str = "") {
        /**
         * The text value
         */
        this.txt = str;
    }

    /**
     * Returns the type of `1` (`TEXT`)
     */
    get type() {
        return TEXT;
    }

    set data(e) { this.txt = e; }

    get data() { return this.txt }

    /**
     * Returns a string representation of the object.
     * @param      {string}  str     Optional string passed down from calling method.
     * @return     {string}  String representation of the object.
     */
    toString(off = 0) {
        return `${offset.repeat(off)} ${this.txt}\n`;
    }

    /**
     * Builds a real DOM HTMLTextNode node. 
     * @param      {HTMLElement}  parent  The real html element.
     */
    build(parent) {
        parent.appendChild(document.createTextNode(this.txt));
    }

}

LinkedList.mixinTree(TextNode);


/**
 * A node for HTML data. 
 * Handles the parsing of HTML strings.
 */
class HTMLNode {

    constructor() {

        /**
         * Element attributes
         * @public
         */
        this.attributes = [];

        /**
         * Any Comment Lines found within.
         * @private
         */
        //this.dtd_nodes = [];

        /**
         * The tag name of the object.
         * @public
         */
        this.tag = "";

        /**
         * A URL instance when set.
         * @private
         */
        this.url = null;

        /**
         * Whether the node is a DTD, such as a comment.
         * @private
         */
        this.DTD = false;

        /**
         * True if the element is a single tag element. 
         */
        this.single = false;


        //Charactar positional information from input.
        this.line = 0;
        this.char = 0;
        this.offset = 0;

    }

    /******************************************* ATTRIBUTE AND ELEMENT ACCESS ******************************************************************************************************************/

    /**
     * Returns the type of `0` (`HTML`)
     * @public
     */
    get type() {
        return HTML;
    }

    get tagName() {
        return this.tag.toUpperCase();
    }

    get classList() {
        let classes = this.getAttrib("class");
        if (classes && typeof(classes.value) === "string")
            return classList(this, classes.value.split(" "));
        return classList(this, []);
    }

    getAttribute(name) {
        let attrib = this.getAttrib(name);
        return (attrib) ? attrib.value : void 0;
    }

    get parentElement() {
        return this.par;
    }

    get firstChild() {
        return this.fch;
    }

    get lastChild() {
        return this.fch ? this.fch.previous : null;
    }

    get previousElementSibling() {
        if (this.par) {
            let guard = this.par.fch;

            if (this == guard) return null;

            let node = this.prv;

            while (node && node != gaurd) {
                if (node.type == HTML)
                    return node;
                node = node.prv;
            }

            if (node.type == HTML)
                return node;
        }
        return null;
    }

    get nextElementSibling() {
        if (this.par) {
            let guard = this.par.fch;

            let node = this.nxt;

            while (node && node != guard) {
                if (node.type == HTML)
                    return node;
                node = node.nxt;
            }
        }
        return null;
    }



    /**
     * Gets an attribute.
     * @param      {string}  prop    The attribute name to lookup;
     * @public
     */
    getAttrib(prop, GET_IGNORED = false) {
        for (let i = -1, l = this.attributes.length; ++i < l;) {
            let attrib = this.attributes[i];
            if (attrib.name == prop && (!attrib.IGNORE || GET_IGNORED)) return attrib;
        }
        return null;
    }



    /**
     * Get Elements by the tag name.
     * @param      {string}   tag                  A string to match with the element's tag value.
     * @param      {boolean}  [INCLUDE_DESCENDANTS=false]  When `true` searching will recurse depth first into child elements.
     * @param      {Array}    array                Internal element store that is returned. 
     * @return     {Array}    An array of matched elements.
     * @public
     */
    getTag(tag, INCLUDE_DESCENDANTS = false, array = []) {
        for (let node = this.fch; node;
            (node = this.getNextChild(node))) {
            if (node.type == HTML) {
                if (node.tag == tag) array.push(node);
                if (INCLUDE_DESCENDANTS) node.getTag(tag, INCLUDE_DESCENDANTS, array);
            }
        }
        return array;
    }



    /**
     * Get Elements by the tag name.
     * @param      {string}   _class               A string to find with the element's class value.
     * @param      {boolean}  [INCLUDE_DESCENDANTS=false]  When `true` searching will recurse depth first into child elements.
     * @param      {Array}    array                Internal element store that is returned. 
     * @return     {Array}    An array of matched elements.
     * @public
     */
    getClass(_class, INCLUDE_DESCENDANTS = false, array = []) {
        for (let node = this.fch; node;
            (node = this.getNextChild(node))) {
            if (node.type == HTML) {
                if (node.class.includes(_class)) array.push(node);
                if (INCLUDE_DESCENDANTS) node.getClass(_class, INCLUDE_DESCENDANTS, array);
            }
        }
        return array;
    }



    /**
     * Get first element with matching id.
     * @param      {string}   id                   The identifier value to find.
     * @param      {boolean}  [INCLUDE_DESCENDANTS=false]  When `true` searching will recurse depth first into child elements.
     * @return     {HTMLNode}   The first element whose id matches.
     * @public
     */
    getID(id, INCLUDE_DESCENDANTS = false) {
        for (let node = this.fch, ch; node;
            (node = this.getNextChild(node))) {
            if (node.type == HTML) {
                if (node.id == id) return node;
                if (INCLUDE_DESCENDANTS && (ch = node.getID(id, INCLUDE_DESCENDANTS))) return ch;
            }
        }
        return null;
    }



    /**
     * The id attribute value.
     * @public
     */
    get id() {
        let id_attrib = this.getAttrib("id");
        return (id_attrib) ? id_attrib.value : "";
    }



    /**
     * The class attribute value.
     * @public
     */
    get class() {
        let id_attrib = this.getAttrib("class");
        return (id_attrib) ? id_attrib.value : "";
    }



    /**
     * Returns a string representation of the object.
     * @return     {string}  String representation of the object.
     * @public
     */
    toString(off = 0) {

        let o = offset.repeat(off);

        let str = `${o}<${this.tag}`,
            atr = this.attributes,
            i = -1,
            l = atr.length;

        while (++i < l) {
            let attr = atr[i];

            if (attr.name)
                str += ` ${attr.name}="${attr.value}"`;
        }

        str += ">\n";

        if (this.single)
            return str;

        str += this.innerToString(off + 1);

        return str + `${o}</${this.tag}>\n`;
    }

    innerToString(off) {
        let str = "";
        for (let node = this.fch; node;
            (node = this.getNextChild(node))) {
            str += node.toString(off);
        }
        return str;
    }



    /******************************************* PARSING ******************************************************************************************************************/



    /**
     * Creates a text node. 
     *
     * @param      {Lexer} - A Lexical tokenizing object supporting methods found in {@link Lexer}
     * @param      {start}  start   The starting point of the data slice
     * @private
     */
    async createTextNode(lex, start, end) {

        if (end) {
            const other_lex = lex.copy();
            other_lex.off = start - 1;
            other_lex.tl = 1;
            other_lex.sl = end;
            other_lex.IWS = false;
            other_lex.next();
            const text_node = await this.processTextNodeHook(other_lex, true);
            if (text_node) this.addChild(text_node);
        } else if (start < lex.off) {
            let other_lex = lex.copy();

            other_lex.off = start;
            other_lex.END = false;
            other_lex.tl = 0;
            other_lex.fence(lex);
            other_lex.IWS = false;
            other_lex.n;
            other_lex.IWS = true;
            if ((other_lex.sl - other_lex.off) < 2) {
                //No data
                //TODO
                //throw new Error("Unexpected end of input");
            } else {
                let text_node = await this.processTextNodeHook(other_lex, false);
                if (text_node) this.addChild(text_node);
            }

        }
    }



    /**
     * Parses an HTML open tag.
     * @param {Lexer} - A Lexical tokenizing object supporting methods found in {@link Lexer}  
     * @param {Object} attribs - An object which will receive the attribute keys and values. 
     * @private
     */
    parseOpenTag(lex, DTD, old_url) {
        let HAS_URL = false;
        lex.PARSE_STRING = false; // Want to make sure lex creates string tokens. 

        while (!lex.END && lex.text !== ">" && lex.text !== "/") {


            if (DTD && lex.ch == "-" && lex.pk.ch == "-") {
                //parse comment

                let pk = lex.pk;
                if (!lex.text) throw Error("Unexpected end of input.");
                let a = pk.n.ch,
                    b = pk.n.ch;
                while (!pk.END && (b !== "-" || a !== "-")) {
                    a = b;
                    b = pk.n.tx;
                }
                lex.sync().n;
                continue;
            }

            lex.IWS = false;

            let pk = lex.pk;

            while (!pk.END && !(pk.ty & (pk.types.ws | pk.types.str | pk.types.nl)) && pk.ch !== "=" && pk.ch !== ">") { pk.n; }

            let attrib_name = pk.slice(lex).trim();

            lex.sync();

            lex.IWS = true;

            let out_lex = lex.copy();

            out_lex.sl = lex.off;

            if (lex.ch == "=") {
                let pk = lex.pk;

                let start = pk.off;

                pk.IWS = false;
                
                while (!(pk.ty & (pk.types.ws | pk.types.str | pk.types.nl)) && pk.ch !== ">") { pk.n; }

                if (pk.off > start) {
                    out_lex = lex.n.copy();
                    out_lex.fence(pk);
                    lex.sync();
                } else {
                    //Have simple value
                    lex.sync(pk);
                    out_lex = lex.copy();
                    if (lex.pos < 0)
                        lex.throw(`Unexpected end of input. Expecting value for attribute "${attrib_name}"`);
                    else if (lex.type == lex.types.str) {
                        out_lex.tl = 1;
                        out_lex.n;
                        out_lex.sl = lex.pos + lex.tl - 1;
                        lex.n;
                    } else {
                        lex.next();
                        out_lex.fence(lex);
                    }
                }
            }

            if (attrib_name == "url") {
                this.url = URL.resolveRelative(out_lex.slice(), old_url);
                HAS_URL = true;
            }

            let attrib = this.processAttributeHook(attrib_name, out_lex);

            if (attrib)
                this.attributes.push(attrib);
        }

        //if (lex.ch == "/") // Void Nodes
        //    lex.next();

        lex.PARSE_STRING = true; // Reset lex to ignore string tokens.
        
        return HAS_URL;
    }

    async parseRunner(lex = null, OPENED = false, IGNORE_TEXT_TILL_CLOSE_TAG = false, parent = null, old_url = new URL(0, !!1)) {
        let start = lex.pos;
        let end = lex.pos;
        let HAS_INNER_TEXT = false;

        // The lexer Should not produce string tokens when parsing HTML tags. If it does, markup such as 
        //  
        // <div> The " Market Row <b> Clipers <\b> " </div>
        // 
        // Would be incorrectly parsed since the lexer would produce a token {type:"string", tx:" Market Row <b> Clipers <\b> "} 
        // that would prevent the <b> tag from being detected and parsed.

        lex.PARSE_STRING = true;
        
        main_loop:
            while (!lex.END) {
                switch (lex.ch) {
                    case "<":
                        if (!IGNORE_TEXT_TILL_CLOSE_TAG) lex.IWS = true;

                        let pk = lex.pk;

                        if (pk.ch == "/") {
                            if (pk.pk.tx !== this.tag) {
                                break main_loop;
                            }

                            if (HAS_INNER_TEXT) {
                                lex.PARSE_STRING = false;
                                if (IGNORE_TEXT_TILL_CLOSE_TAG)
                                    await this.createTextNode(lex, start);
                                else if ((end - start) > 0)
                                    await this.createTextNode(lex, start, end);
                                lex.PARSE_STRING = true;
                            }

                            //Close tag
                            let name = lex.sync().n.tx;

                            //Close tag is not the one we are looking for. We'll create a new dummy node and close the tag with it. 
                            if (name !== this.tag) {
                                //Create new node with the open tag 
                                let insert = new HTMLNode();
                                insert.tag = name;
                                this.addChild(insert);
                            }

                            lex.n;
                            lex.IWS = false;
                            lex.a(">");

                            lex.PARSE_STRING = false;
                            return await this.endOfElementHook(lex, parent);
                        }

                        if (pk.ch == "!") {
                            /* DTD - Doctype and Comment tags*/
                            //This type of tag is dropped
                            while (!lex.END && lex.n.ch !== ">") {}
                            lex.a(">");
                            lex.IWS = false;
                            continue;
                        }

                        if (!IGNORE_TEXT_TILL_CLOSE_TAG) {

                            //Open tag
                            if (!OPENED) {
                                let URL$$1 = false;
                                this.DTD = false;
                                this.attributes.length = 0;

                                //Expect tag name 
                                this.tag = lex.n.tx.toLowerCase();
                                


                                lex.PARSE_STRING = false;
                                URL$$1 = this.parseOpenTag(lex.n, false, old_url);
                                lex.PARSE_STRING = true;

                                this.char = lex.char;
                                this.offset = lex.off;
                                this.line = lex.line;

                                start = lex.pos + 1;
                                lex.IWS = false;

                                let SELF_CLOSING = this.selfClosingTagHook(this.tag);

                                if (lex.ch == "/") {
                                    //This is a tag that should be closed 
                                    lex.next();

                                    SELF_CLOSING = true;

                                    //This element is self closing and does not have a body.
                                }else{
                                    HAS_INNER_TEXT = IGNORE_TEXT_TILL_CLOSE_TAG = (await this.ignoreTillHook(this.tag, lex));
                                    OPENED = true;
                                }

                                //End of Open Tag
                                lex.a(">");


                                if (HAS_INNER_TEXT){
                                    //Insure that string do not lead to 
                                    lex.PARSE_STRING = false;
                                    start = lex.pos;
                                }                                

                                if (URL$$1) {

                                    //Need to block against infinitely recursive URL fetches. 

                                    //Hook to pull in data from remote resource
                                    lex.PARSE_STRING = false;
                                    
                                    await this.processFetchHook(lex, true, IGNORE_TEXT_TILL_CLOSE_TAG, parent);
                                    
                                    lex.PARSE_STRING = true;
                                    
                                    if (this.selfClosingTagHook(this.tag))
                                        return this;

                                    // Tags without matching end tags.
                                    return this.parseRunner(lex, true, IGNORE_TEXT_TILL_CLOSE_TAG, this, old_url);
                                }

                                
                                if (SELF_CLOSING) {
                                    // Tags without matching end tags.
                                    this.single = true;

                                    return (await this.endOfElementHook(lex, parent)) || this;
                                }

                                continue;
                            } else {
                                lex.IWS = false;
                                //Create text node;
                                if (HAS_INNER_TEXT) {
                                    lex.PARSE_STRING = false;
                                    if (IGNORE_TEXT_TILL_CLOSE_TAG)
                                        await this.createTextNode(lex, start);
                                    else if ((end - start) > 0) {
                                        await this.createTextNode(lex, start, end);
                                    }
                                    lex.PARSE_STRING = true;
                                }

                                //New Child node found
                                let node = await this.createHTMLNodeHook(lex.pk.tx, lex.off, lex, this);

                                if (node) {

                                    node.par = this;

                                    node = await node.parseRunner(lex, false, false, this, this.url || old_url);

                                    node.par = null;

                                    node.parent = this;


                                    if (!this.url)
                                        this.url = old_url;

                                    if (node.DTD) this.removeChild(node);
                                }

                                if (!this.url)
                                    this.url = old_url;
                                lex.IWS = false;
                                start = lex.pos;
                                end = lex.pos;
                                HAS_INNER_TEXT = false;
                                IGNORE_TEXT_TILL_CLOSE_TAG = false;

                                continue main_loop;
                            }
                        }

                        lex.IWS = false;
                        break;
                }

                if (!IGNORE_TEXT_TILL_CLOSE_TAG) {
                    if (lex.ty == 8 && !HAS_INNER_TEXT) {
                        start = lex.pos;
                    } else if (lex.ty == 256) {} else {
                        HAS_INNER_TEXT = true;
                        end = lex.off + lex.tl;
                    }
                }

                lex.n;
            }

        if (OPENED && start < lex.off) {
            if (lex.off - start > 0) {
                //Got here from a network import, need produce a text node;
                await this.createTextNode(lex, start);
            }
        }

        return this;
    }

    /**
     * Parses HTML string. Appends new nodes, or consumes first node if tag is an empty string.
     * @param      {Lexer} - A Lexical tokenizing object supporting methods found in {@link Lexer}
     * @param      {boolean}  OPENED       The opened
     * @param      {boolean}  IGNORE_TEXT_TILL_CLOSE_TAG  If `true`, parser will ignore all HTML syntax until the closing tag is found.
     * @return     {Promise}  
     * @private
     */
    async parse(lex, url = new URL(0, !!1)) {

        if (typeof(lex) == "string") lex = whind$1(lex);

        lex.IWS = false;

        return await this.parseRunner(lex, false, false, null, url);
    }

    /******************************************* HOOKS ******************************************************************************************************************/

    endOfElementHook() { return this; }

    selfClosingTagHook(tag) {
        return ["input", "br" ,"img", "rect"].includes(tag);
    }

    async ignoreTillHook(tag) {
        // Special character escaping tags.
        return ["script", "style" ,"pre"].includes(tag);
    }

    async createHTMLNodeHook(tag, start) { return new HTMLNode(tag); }

    processFetchHook(lexer, OPENED, IGNORE_TEXT_TILL_CLOSE_TAG, parent, url) {
        let path = this.url.path,
            CAN_FETCH = true;

        //make sure URL is not already called by a parent.
        while (parent) {
            if (parent.url && parent.url.path == path) {
                console.warn(`Preventing recursion on resource ${this.url.path}`);
                CAN_FETCH = false;
                break;
            }
            parent = parent.par;
        }

        if (CAN_FETCH) {
            return this.url.fetchText().then((text) => {
                let lexer = whind$1(text);
                return this.parseRunner(lexer, true, IGNORE_TEXT_TILL_CLOSE_TAG, this, this.url);
            }).catch((e) => {
                console.error(e);
                return this;
            });
        }
        return null;
    }

    processAttributeHook(name, lex) { return { IGNORE: false, name, value: lex.slice() }; }

    async processTextNodeHook(lex, IS_INNER_HTML) {
        if (!IS_INNER_HTML)
            return new TextNode(lex.trim(1).slice());

        let t = lex.trim(1);

        if (t.string_length > 0)
            return new TextNode(t.slice());

        return null;
    }

    /**
        Deep Clone of Element
    */
    clone() {
        const clone = new this.constructor();

        clone.tag = this.tag;

        clone.parse(this.toString());

        return clone;
    }

    build(parent) {
        let ele = document.createElement(this.tag);

        for (let i = 0, l = this.attributes.length; i < l; i++) {
            let attr = this.attributes[i];
            ele.setAttribute(attr.name, attr.value);
        }
        //let passing_element = ele;
        let passing_element = (this.tag == "template") ? ele.content : ele;
        for (let node = this.fch; node;
            (node = this.getNextChild(node))) {
            node.build(passing_element);
        }

        if (parent) parent.appendChild(ele);

        return ele;
    }
}

LinkedList.mixinTree(HTMLNode);


/**
 * Builds an HTML AST. 
 * @function
 * @param {string} html_string - A string containing HTML data.
 * @param {string} css_string - An existing CSSRootNode to merge with new `selectors` and `rules`.
 * @return {Promise} Returns a `Promise` that will return a new or existing CSSRootNode.
 * @memberof module:wick.core
 * @alias html
 */
const HTMLParser = (html_string, root = null, url) => (root = (!root || !(root instanceof HTMLNode)) ? new HTMLNode() : root, root.parse(whind$1(html_string.replace(/\&lt;/g, "<").replace(/\&gt;/g, ">"), url)));

HTMLParser.polyfill = function() {
    URL.polyfill();

    if (typeof(global) !== "undefined") {
        global.HTMLElement = HTMLNode;
        global.TextNode = TextNode;

        if(!global.document)
            global.document = {};

        Object.assign(global.document, {
            createElement: function(tag) {
                let node = new HTMLElement();
                node.tag = tag.toString().toLowerCase();
                return node;
            },
            createTextNode: function(text) {
                let node = new TextNode(text);
                return node;
            }
        });
    }

    HTMLNode.prototype.appendChild = function(child) {
        this.addChild(child);
    };

    HTMLNode.prototype.removeChild = function(child) {
        this.removeChild(child);
    };

    HTMLNode.prototype.setAttribute = function(name, value) {
        let attr = this.getAttrib(name);
        if (attr)
            attr.value = value;
        else
            this.attributes.push({ name, value });
    };
};

const tagHandler = {
    name: "tagHandler",

    handlers: new Map(),

    load: function(in_ext, func_) {
        tagHandler.handlers.set(in_ext, func_);
    },

    plugin: async function(in_ext, node) {

        const handler = tagHandler.handlers.get(in_ext);

        if (handler){

            const out_node = await handler(node);

            if(out_node !== node && out_node instanceof HTMLNode){
                //Swap out nodes. 
                return out_node;
            }

        }

        return node;
    }
};


// Allows a plugin function to parse the contents of a fetched rescope whose file extensions matches the one set by the plugin. 
const extensionParse = {
    name: "extensionParse",

    handlers: new Map(),

    load: function(in_ext, out_ext, func_) {
        extensionParse.handlers.set(in_ext, async (d) => ({ ext: out_ext, data: await func_(d) }));
    },

    plugin: async function(in_ext, data) {

        const handler = extensionParse.handlers.get(in_ext);

        if (handler)
            return await handler(data);

        return { ext: in_ext, data: data }
    }
};

// Allows a plugin function to replace innerHTML content in-stream when a HTML tag is matched. 
// A string containing the contents of the matched elements innerHTML is passed to the plugin function. 
// The executor expects a string to be returned from the plugin function
const parseInnerHTMLOnTag = {
    name: "parseInnerHTMLOnTag",

    handlers: new Map(),

    load: function(tag_name, fun) {
        parseInnerHTMLOnTag.handlers.set(tag_name, fun);
    },

    plugin: async function(tag_name, calling_node, lex) {

        const handler = parseInnerHTMLOnTag.handlers.get(tag_name);

        if (handler) {

            //Search for the closing tag and extract a copy of lex that is fenced between the start and points.
            let level = 1;

            const cpy = lex.copy();

            let end = 0;

            while (level > 0 && !cpy.END) {
                //*
                if (cpy.ch == "<") {
                    if (cpy.pk.tx == tag_name) {
                        cpy.next();
                        level++;
                    } else if (cpy.pk.ch == "/" && cpy.pk.pk.tx == tag_name) {
                        level--;
                        end = cpy.off;
                        cpy.sync();
                    }
                }

                cpy.next();
                //*/
            }

            if(cpy.END)
                throw cpy.throw("Unexpected end of input");

            cpy.off = end;

            const out = lex.copy().fence(cpy); 

            lex.sync(cpy);

            lex.tl = 0; // reset lexer token

            lex.next(); // should be <

            const newHTML = await handler(out.trim().slice(), calling_node);

            if (typeof(newHTML) == "string")
                await calling_node.parseRunner(whind$1(newHTML), true);

            return true;
        }

        return false;
    }
};

// Allows a plugin function to replace content in-stream when a HTML tag is matched. The entire contents of the element, inner and outer HTML, can be replaced through such a plugin. 
// A string containing the contents of the matched element (open tag, inner content, and close tag) is passed to the plugin function. 
// The executor expects an HTML string to be returned by the HTML function.

const parseHTMLonTag = {
    name: "parseHTMLonTag",

    handlers: new Map(),

    load: function(tag_name, fun) {
        //Should dissallow common tags to prevent recursion. 
        //Test: Make sure recurssion does no occure, or if it does, detect and report.
        parseHTMLonTag.handlers.set(tag_name, fun);
    },

    plugin: async function(tag_name, calling_node, lex) {

        const handler = parseHTMLonTag.handlers.get(tag_name);

        if (handler) {

            lex.IWS = true;

            let level = 1;

            while (lex.next().ch != ">" && !lex.END);

            const cpy = lex.copy();

            lex.a(">", `Expecting an > end brace for opening tag ${tag_name}`);

            let end = 0;

            while (level > 0 && !cpy.END) {
                //*
                if (cpy.ch == "/" && ((end = cpy.off) && cpy.pk.tx == tag_name)) {
                    cpy.next();
                    level--;
                } else if (cpy.ch == "<" && cpy.pk.tx == tag_name) {
                    cpy.next();
                    level++;
                }

                cpy.next();
                //*/
            }

            cpy.a(">", `Expecting a matching closing tag for ${tag_name}`);

            const off = cpy.off;

            cpy.off = end - 1;

            const newHTML = await handler(lex.copy().fence(cpy).trim().slice(), calling_node);

            cpy.off = off;

            lex.sync(cpy);

            if (typeof(newHTML) == "string")
                await calling_node.parseRunner(whind$1(newHTML), true);

            lex.IWS = false;

            return true;
        }

        return false;
    }
};


// Houses handlers for all plugins 
// Makes the `plugin` funciton of the handler available, which can be accessed by calling Plugin.*plugin.name* 
// e.g Plugin({name:"newPlugin"}) ...> Plugin.newPlugin(...)
const Plugin = ((...plugins) => {

    const plugin_map = new Map(plugins.map(p => [p.name, p.load]));

    async function plugin(name, ...data) {

        const plugin = plugin_map.get(name);

        if (plugin)
            await plugin(...data);
    }

    plugins.forEach(e => {
        plugin[e.name] = e.plugin;
    });

    Object.freeze(plugin);

    return plugin;
})(extensionParse, parseInnerHTMLOnTag, parseHTMLonTag, tagHandler);

/**
 * Base class for an object that binds to and observes a Model.
 *@alias module:wick.core.view
 */
class View{

	constructor(){
		/**
		 * property
		 */
		this.nx = null;
		this.pv = null;
		this .model = null;
	}

	/**
     * Unbinds the View from its Model and sets all properties to undefined. Should be called by any class extending View
	 * ``` js
	 * class ExtendingView extends wick.core.view.View{
	 * 		destroy(){
	 * 			//... do some stuff ...
	 * 			super.destroy();
	 * 		}
	 * }
	 * ```
     * @protected
     */
	destroy(){

		if(this.model && this.model.removeView)
			this.model.removeView(this);
	
		this .model = undefined;
		this.nx = undefined;
	}	
	/**
		Called by a Model when its data has changed.
	*/
	update(data){

	}
	/**
		Called by a ModelContainerBase when an item has been removed.
	*/
	removed(data){

	}

	/**
		Called by a ModelContainerBase when an item has been added.
	*/
	added(data){

	}
	setModel(model){
	}

	reset(){
		
	}
	unsetModel(){

		this.nx = null;
		this .model = null;
	}
}

/**
 * Holds a set of rendered CSS properties.
 * @memberof module:wick~internals.css
 * @alias CSSRule
 */
class CSSRule {
    constructor(root) {
        /**
         * Collection of properties held by this rule.
         * @public
         */
        this.props = {};
        this.LOADED = false;
        this.root = root;

        //Reference Counting
        this.refs = 0;

        //Versioning
        this.ver = 0;
    }

    incrementRef(){
        this.refs++;
    }

    decrementRef(){
        this.refs--;
        if(this.refs <= 0){
            //TODO: remove from rules entries.
            debugger
        }
    }

    addProperty(prop, rule) {
        if (prop)
            this.props[prop.name] = prop.value;
    }



    toString(off = 0, rule = "") {
        let str = [],
            offset = ("    ").repeat(off);

        if (rule) {
            if (this.props[rule]) {
                if (Array.isArray(this.props[rule]))
                    str.push(this.props[rule].join(" "));
                else
                    str.push(this.props[rule].toString());
            }else
                return "";
        } else {
            for (let a in this.props) {
                if (this.props[a] !== null) {
                    if (Array.isArray(this.props[a]))
                        str.push(offset, a.replace(/\_/g, "-"), ":", this.props[a].join(" "), ";\n");
                    else
                        str.push(offset, a.replace(/\_/g, "-"), ":", this.props[a].toString(), ";\n");
                }
            }
        }

        return str.join(""); //JSON.stringify(this.props).replace(/\"/g, "").replace(/\_/g, "-");
    }

    merge(rule) {
        if (rule.props) {
            for (let n in rule.props)
                this.props[n] = rule.props[n];
            this.LOADED = true;
            this.ver++;
        }
    }

    get _wick_type_() { return 0; }

    set _wick_type_(v) {}
}

class Color extends Float64Array {

    constructor(r, g, b, a = 0) {
        super(4);

        this.r = 0;
        this.g = 0;
        this.b = 0;
        this.a = 1;

        if (typeof(r) === "number") {
            this.r = r; //Math.max(Math.min(Math.round(r),255),-255);
            this.g = g; //Math.max(Math.min(Math.round(g),255),-255);
            this.b = b; //Math.max(Math.min(Math.round(b),255),-255);
            this.a = a; //Math.max(Math.min(a,1),-1);
        }
    }

    get r() {
        return this[0];
    }

    set r(r) {
        this[0] = r;
    }

    get g() {
        return this[1];
    }

    set g(g) {
        this[1] = g;
    }

    get b() {
        return this[2];
    }

    set b(b) {
        this[2] = b;
    }

    get a() {
        return this[3];
    }

    set a(a) {
        this[3] = a;
    }

    set(color) {
        this.r = color.r;
        this.g = color.g;
        this.b = color.b;
        this.a = (color.a != undefined) ? color.a : this.a;
    }

    add(color) {
        return new Color(
            color.r + this.r,
            color.g + this.g,
            color.b + this.b,
            color.a + this.a
        );
    }

    mult(color) {
        if (typeof(color) == "number") {
            return new Color(
                this.r * color,
                this.g * color,
                this.b * color,
                this.a * color
            );
        } else {
            return new Color(
                this.r * color.r,
                this.g * color.g,
                this.b * color.b,
                this.a * color.a
            );
        }
    }

    sub(color) {
        return new Color(
            this.r - color.r,
            this.g - color.g,
            this.b - color.b,
            this.a - color.a
        );
    }

    lerp(to, t){
        return this.add(to.sub(this).mult(t));
    }

    toString() {
        return `rgba(${this.r|0},${this.g|0},${this.b|0},${this.a})`;
    }

    toJSON() {
        return `rgba(${this.r|0},${this.g|0},${this.b|0},${this.a})`;
    }

    copy(other){
        let out = new Color(other);
        return out;
    }
}

/*
    BODY {color: black; background: white }
    H1 { color: maroon }
    H2 { color: olive }
    EM { color: #f00 }              // #rgb //
    EM { color: #ff0000 }           // #rrggbb //
    EM { color: rgb(255,0,0) }      // integer range 0 - 255 //
    EM { color: rgb(100%, 0%, 0%) } // float range 0.0% - 100.0% //
*/
class CSS_Color extends Color {

    /** UI FUNCTIONS **/

    static list(){}

    static valueHandler(existing_value){
        let ele = document.createElement("input");
        ele.type = "color";
        ele.value = (existing_value) ? existing_value+ "" : "#000000";
        ele.addEventListener("change", (e)=>{
            ele.css_value = ele.value;
        });
        return ele;
    }

    static setInput(input, value){
        input.type = "color";
        input.value = value;
    }

    static buildInput(){
        let ele = document.createElement("input");
        ele.type = "color";
        return ele;
    }

    static parse(l, rule, r) {

        let c = CSS_Color._fs_(l);

        if (c) {

            let color = new CSS_Color();

            color.set(c);

            return color;
        }

        return null;
    }
    static _verify_(l) {
        let c = CSS_Color._fs_(l, true);
        if (c)
            return true;
        return false;
    }
    /**
        Creates a new Color from a string or a Lexer.
    */
    static _fs_(l, v = false) {
        let c;

        if (typeof(l) == "string")
            l = whind$1(l);

        let out = { r: 0, g: 0, b: 0, a: 1 };

        switch (l.ch) {
            case "#":
                l.next();
                let pk = l.copy();

                let type = l.types;
                pk.IWS = false;


                while(!(pk.ty & (type.newline | type.ws)) && !pk.END && pk.ch !== ";"){
                    pk.next();
                }

                var value = pk.slice(l);
                l.sync(pk);
                l.tl = 0;
                l.next();
                
                let num = parseInt(value,16);

                if(value.length == 3 || value.length == 4){
                    
                    if(value.length == 4){
                        const a = (num >> 8) & 0xF;
                        out.a = a | a << 4;
                        num >>= 4;
                    }

                    const r = (num >> 8) & 0xF;
                    out.r = r | r << 4;
                    
                    const g = (num >> 4) & 0xF;
                    out.g = g | g << 4;
                    
                    const b = (num) & 0xF;
                    out.b = b | b << 4;

                }else{

                    if(value.length == 8){
                        out.a = num & 0xFF;
                        num >>= 8;
                    }

                    out.r = (num >> 16) & 0xFF;       
                    out.g = (num >> 8) & 0xFF;
                    out.b = (num) & 0xFF;
                }
                l.next();
                break;
            case "r":
                let tx = l.tx;

                const RGB_TYPE = tx === "rgba"  ? 1 : tx === "rgb" ? 2 : 0;
                
                if(RGB_TYPE > 0){

                    l.next(); // (
                    
                    out.r = parseInt(l.next().tx);
                    
                    l.next(); // , or  %

                    if(l.ch == "%"){
                        l.next(); out.r = out.r * 255 / 100;
                    }
                    
                    
                    out.g = parseInt(l.next().tx);
                    
                    l.next(); // , or  %
                   
                    if(l.ch == "%"){
                        l.next(); out.g = out.g * 255 / 100;
                    }
                    
                    
                    out.b = parseInt(l.next().tx);
                    
                    l.next(); // , or ) or %
                    
                    if(l.ch == "%")
                        l.next(), out.b = out.b * 255 / 100;

                    if(RGB_TYPE < 2){
                        out.a = parseFloat(l.next().tx);

                        l.next();
                        
                        if(l.ch == "%")
                            l.next(), out.a = out.a * 255 / 100;
                    }

                    l.a(")");
                    c = new CSS_Color();
                    c.set(out);
                    return c;
                }  // intentional
            default:

                let string = l.tx;

                if (l.ty == l.types.str){
                    string = string.slice(1, -1);
                }

                out = CSS_Color.colors[string.toLowerCase()];

                if(out)
                    l.next();
        }

        return out;
    }

    constructor(r, g, b, a) {
        super(r, g, b, a);

        if (typeof(r) == "string")
            this.set(CSS_Color._fs_(r) || {r:255,g:255,b:255,a:0});

    }

    toString(){
        return `#${("0"+this.r.toString(16)).slice(-2)}${("0"+this.g.toString(16)).slice(-2)}${("0"+this.b.toString(16)).slice(-2)}`
    }
    toRGBString(){
        return `rgba(${this.r.toString()},${this.g.toString()},${this.b.toString()},${this.a.toString()})`   
    }
} {

    let _$ = (r = 0, g = 0, b = 0, a = 1) => ({ r, g, b, a });
    let c = _$(0, 255, 25);
    CSS_Color.colors = {
        "alice blue": _$(240, 248, 255),
        "antique white": _$(250, 235, 215),
        "aqua marine": _$(127, 255, 212),
        "aqua": c,
        "azure": _$(240, 255, 255),
        "beige": _$(245, 245, 220),
        "bisque": _$(255, 228, 196),
        "black": _$(),
        "blanched almond": _$(255, 235, 205),
        "blue violet": _$(138, 43, 226),
        "blue": _$(0, 0, 255),
        "brown": _$(165, 42, 42),
        "burly wood": _$(222, 184, 135),
        "cadet blue": _$(95, 158, 160),
        "chart reuse": _$(127, 255),
        "chocolate": _$(210, 105, 30),
        "clear": _$(255, 255, 255),
        "coral": _$(255, 127, 80),
        "corn flower blue": _$(100, 149, 237),
        "corn silk": _$(255, 248, 220),
        "crimson": _$(220, 20, 60),
        "cyan": c,
        "dark blue": _$(0, 0, 139),
        "dark cyan": _$(0, 139, 139),
        "dark golden rod": _$(184, 134, 11),
        "dark gray": _$(169, 169, 169),
        "dark green": _$(0, 100),
        "dark khaki": _$(189, 183, 107),
        "dark magenta": _$(139, 0, 139),
        "dark olive green": _$(85, 107, 47),
        "dark orange": _$(255, 140),
        "dark orchid": _$(153, 50, 204),
        "dark red": _$(139),
        "dark salmon": _$(233, 150, 122),
        "dark sea green": _$(143, 188, 143),
        "dark slate blue": _$(72, 61, 139),
        "dark slate gray": _$(47, 79, 79),
        "dark turquoise": _$(0, 206, 209),
        "dark violet": _$(148, 0, 211),
        "deep pink": _$(255, 20, 147),
        "deep sky blue": _$(0, 191, 255),
        "dim gray": _$(105, 105, 105),
        "dodger blue": _$(30, 144, 255),
        "firebrick": _$(178, 34, 34),
        "floral white": _$(255, 250, 240),
        "forest green": _$(34, 139, 34),
        "fuchsia": _$(255, 0, 255),
        "gainsboro": _$(220, 220, 220),
        "ghost white": _$(248, 248, 255),
        "gold": _$(255, 215),
        "golden rod": _$(218, 165, 32),
        "gray": _$(128, 128, 128),
        "green yellow": _$(173, 255, 47),
        "green": _$(0, 128),
        "honeydew": _$(240, 255, 240),
        "hot pink": _$(255, 105, 180),
        "indian red": _$(205, 92, 92),
        "indigo": _$(75, 0, 130),
        "ivory": _$(255, 255, 240),
        "khaki": _$(240, 230, 140),
        "lavender blush": _$(255, 240, 245),
        "lavender": _$(230, 230, 250),
        "lawn green": _$(124, 252),
        "lemon chiffon": _$(255, 250, 205),
        "light blue": _$(173, 216, 230),
        "light coral": _$(240, 128, 128),
        "light cyan": _$(224, 255, 255),
        "light golden rod yellow": _$(250, 250, 210),
        "light gray": _$(211, 211, 211),
        "light green": _$(144, 238, 144),
        "light pink": _$(255, 182, 193),
        "light salmon": _$(255, 160, 122),
        "light sea green": _$(32, 178, 170),
        "light sky blue": _$(135, 206, 250),
        "light slate gray": _$(119, 136, 153),
        "light steel blue": _$(176, 196, 222),
        "light yellow": _$(255, 255, 224),
        "lime green": _$(50, 205, 50),
        "lime": _$(0, 255),
        "lime": _$(0, 255),
        "linen": _$(250, 240, 230),
        "magenta": _$(255, 0, 255),
        "maroon": _$(128),
        "medium aqua marine": _$(102, 205, 170),
        "medium blue": _$(0, 0, 205),
        "medium orchid": _$(186, 85, 211),
        "medium purple": _$(147, 112, 219),
        "medium sea green": _$(60, 179, 113),
        "medium slate blue": _$(123, 104, 238),
        "medium spring green": _$(0, 250, 154),
        "medium turquoise": _$(72, 209, 204),
        "medium violet red": _$(199, 21, 133),
        "midnight blue": _$(25, 25, 112),
        "mint cream": _$(245, 255, 250),
        "misty rose": _$(255, 228, 225),
        "moccasin": _$(255, 228, 181),
        "navajo white": _$(255, 222, 173),
        "navy": _$(0, 0, 128),
        "old lace": _$(253, 245, 230),
        "olive drab": _$(107, 142, 35),
        "olive": _$(128, 128),
        "orange red": _$(255, 69),
        "orange": _$(255, 165),
        "orchid": _$(218, 112, 214),
        "pale golden rod": _$(238, 232, 170),
        "pale green": _$(152, 251, 152),
        "pale turquoise": _$(175, 238, 238),
        "pale violet red": _$(219, 112, 147),
        "papaya whip": _$(255, 239, 213),
        "peach puff": _$(255, 218, 185),
        "peru": _$(205, 133, 63),
        "pink": _$(255, 192, 203),
        "plum": _$(221, 160, 221),
        "powder blue": _$(176, 224, 230),
        "purple": _$(128, 0, 128),
        "red": _$(255),
        "rosy brown": _$(188, 143, 143),
        "royal blue": _$(65, 105, 225),
        "saddle brown": _$(139, 69, 19),
        "salmon": _$(250, 128, 114),
        "sandy brown": _$(244, 164, 96),
        "sea green": _$(46, 139, 87),
        "sea shell": _$(255, 245, 238),
        "sienna": _$(160, 82, 45),
        "silver": _$(192, 192, 192),
        "sky blue": _$(135, 206, 235),
        "slate blue": _$(106, 90, 205),
        "slate gray": _$(112, 128, 144),
        "snow": _$(255, 250, 250),
        "spring green": _$(0, 255, 127),
        "steel blue": _$(70, 130, 180),
        "tan": _$(210, 180, 140),
        "teal": _$(0, 128, 128),
        "thistle": _$(216, 191, 216),
        "tomato": _$(255, 99, 71),
        "transparent": _$(0, 0, 0, 0),
        "turquoise": _$(64, 224, 208),
        "violet": _$(238, 130, 238),
        "wheat": _$(245, 222, 179),
        "white smoke": _$(245, 245, 245),
        "white": _$(255, 255, 255),
        "yellow green": _$(154, 205, 50),
        "yellow": _$(255, 255)
    };
}

class CSS_Percentage extends Number {
    static setInput(input, value){
        input.type = "number";
        input.value = parseFloat(value);
    }

    static buildInput(value){
        let ele = document.createElement("input");
        ele.type = "number";
        ele.value = parseFloat(value) || 0;
        ele.addEventListener("change", (e)=>{
            ele.css_value = ele.value + "%";
        });
        return ele;
    }
    
    static parse(l, rule, r) {
        let tx = l.tx,
            pky = l.pk.ty;

        if (l.ty == l.types.num || tx == "-" && pky == l.types.num) {
            let mult = 1;

            if (l.ch == "-") {
                mult = -1;
                tx = l.p.tx;
                l.p.next();
            }

            if (l.p.ch == "%") {
                l.sync().next();
                return new CSS_Percentage(parseFloat(tx) * mult);
            }
        }
        return null;
    }

    static _verify_(l) {
        if(typeof(l) == "string" &&  !isNaN(parseInt(l)) && l.includes("%"))
            return true;
        return false;
    }

    static valueHandler(){
        let ele = document.createElement("input");
        ele.type = "number";
        ele.value = 100;
        return ele;
    }

    constructor(v) {

        if (typeof(v) == "string") {
            let lex = whind(v);
            let val = CSS_Percentage.parse(lex);
            if (val) 
                return val;
        }
        
        super(v);
    }

    toJSON() {
        return super.toString() + "%";
    }

    toString(radix) {
        return super.toString(radix) + "%";
    }

    get str() {
        return this.toString();
    }

    lerp(to, t) {
        return new CSS_Percentage(this + (to - this) * t);
    }

    copy(other){
        return new CSS_Percentage(other);
    }

    get type(){
        return "%";
    }
}

CSS_Percentage.label_name = "Percentage";

class CSS_Length extends Number {

    static valueHandler(value, ui_seg){
        let ele = document.createElement("input");


        ele.type = "number";
        ele.value = (value) ? value + 0 : 0;
        
        ui_seg.css_value = ele.value + "%";
        
        ele.addEventListener("change", (e)=>{
            ele.css_value = ele.value + "px";
        });
        return ele;
    }

    static setInput(input, value){
        input.type = "number";
        input.value = value;
    }

    static buildInput(){
        let ele = document.createElement("input");
        ele.type = "number";
        return ele;
    }

    static parse(l, rule, r) {
        let tx = l.tx,
            pky = l.pk.ty;
        if (l.ty == l.types.num || tx == "-" && pky == l.types.num) {
            let sign = 1;
            if (l.ch == "-") {
                sign = -1;
                tx = l.p.tx;
                l.p.next();
            }
            if (l.p.ty == l.types.id) {
                let id = l.sync().tx;
                l.next();
                return new CSS_Length(parseFloat(tx) * sign, id);
            }
        }
        return null;
    }

    static _verify_(l) {
        if (typeof(l) == "string" && !isNaN(parseInt(l)) && !l.includes("%")) return true;
        return false;
    }

    constructor(v, u = "") {
        
        if (typeof(v) == "string") {
            let lex = whind$1(v);
            let val = CSS_Length.parse(lex);
            if (val) return val;
        }

        if(u){
            switch(u){
                //Absolute
                case "px": return new PXLength(v);
                case "mm": return new MMLength(v);
                case "cm": return new CMLength(v);
                case "in": return new INLength(v);
                case "pc": return new PCLength(v);
                case "pt": return new PTLength(v);
                
                //Relative
                case "ch": return new CHLength(v);
                case "em": return new EMLength(v);
                case "ex": return new EXLength(v);
                case "rem": return new REMLength(v);

                //View Port
                case "vh": return new VHLength(v);
                case "vw": return new VWLength(v);
                case "vmin": return new VMINLength(v);
                case "vmax": return new VMAXLength(v);

                //Deg
                case "deg": return new DEGLength(v);

                case "%" : return new CSS_Percentage(v);
            }
        }

        super(v);
    }

    get milliseconds() {
        switch (this.unit) {
            case ("s"):
                return parseFloat(this) * 1000;
        }
        return parseFloat(this);
    }

    toString(radix) {
        return super.toString(radix) + "" + this.unit;
    }

    toJSON() {
        return super.toString() + "" + this.unit;
    }

    get str() {
        return this.toString();
    }

    lerp(to, t) {
        return new CSS_Length(this + (to - this) * t, this.unit);
    }

    copy(other) {
        return new CSS_Length(other, this.unit);
    }

    set unit(t){}
    get unit(){return "";}
}

class PXLength extends CSS_Length {
    get unit(){return "px";}
}
class MMLength extends CSS_Length {
    get unit(){return "mm";}
}
class CMLength extends CSS_Length {
    get unit(){return "cm";}
}
class INLength extends CSS_Length {
    get unit(){return "in";}
}
class PTLength extends CSS_Length {
    get unit(){return "pt";}
}
class PCLength extends CSS_Length {
    get unit(){return "pc";}
}
class CHLength extends CSS_Length {
    get unit(){return "ch";}
}
class EMLength extends CSS_Length {
    get unit(){return "em";}
}
class EXLength extends CSS_Length {
    get unit(){return "ex";}
}
class REMLength extends CSS_Length {
    get unit(){return "rem";}
}
class VHLength extends CSS_Length {
    get unit(){return "vh";}
}
class VWLength extends CSS_Length {
    get unit(){return "vw";}
}
class VMINLength extends CSS_Length {
    get unit(){return "vmin";}
}
class VMAXLength extends CSS_Length {
    get unit(){return "vmax";}
}
class DEGLength extends CSS_Length {
    get unit(){return "deg";}
}

class CSS_URL extends URL {
    static parse(l, rule, r) {
        if (l.tx == "url" || l.tx == "uri") {
            l.next().a("(");
            let v = "";
            if (l.ty == l.types.str) {
                v = l.tx.slice(1,-1);
                l.next().a(")");
            } else {
                const p = l.peek();
                while (!p.END && p.next().tx !== ")") { /* NO OP */ }
                v = p.slice(l);
                l.sync().a(")");
            }
            return new CSS_URL(v);
        } if (l.ty == l.types.str){
            let v = l.tx.slice(1,-1);
            l.next();
            return new CSS_URL(v);
        }

        return null;
    }
}

class CSS_String extends String {
    
    static list(){}

    static valueHandler(existing_value){
        let ele = document.createElement("input");
        ele.type = "text";
        ele.value = existing_value || "";
        return ele;
    }

    static setInput(input, value){
        input.type = "text";
        input.value = value;
    }

    static buildInput(){
        let ele = document.createElement("input");
        ele.type = "text";
        return ele;
    }

    static parse(l, rule, r) {
        if (l.ty == l.types.str) {
            let tx = l.tx;
            l.next();
            return new CSS_String(tx);
        }
        return null;
    }

    constructor(string){
        if(string[0] == "\"" || string[0] == "\'" || string[0] == "\'")
            string = string.slice(1,-1);
        super(string);
    }
}

class CSS_Id extends String {
    static parse(l, rule, r) {
        if (l.ty == l.types.id) {
            let tx = l.tx;
            l.next();
            return new CSS_Id(tx);
        }
        return null;
    }
}

/* https://www.w3.org/TR/css-shapes-1/#typedef-basic-shape */
class CSS_Shape extends Array {
    static parse(l, rule, r) {
        if (l.tx == "inset" || l.tx == "circle" || l.tx == "ellipse" || l.tx == "polygon" || l.tx == "rect") {
            l.next().a("(");
            let v = "";
            if (l.ty == l.types.str) {
                v = l.tx.slice(1,-1);
                l.next().a(")");
            } else {
                let p = l.pk;
                while (!p.END && p.next().tx !== ")") { /* NO OP */ }
                v = p.slice(l);
                l.sync().a(")");
            }
            return new CSS_Shape(v);
        }
        return null;
    }
}

class CSS_Number extends Number {

    static valueHandler(value){
        let ele = document.createElement("input");
        ele.type = "number";
        ele.value = (value) ? value + 0 : 0;
        ele.addEventListener("change", (e)=>{
            ele.css_value = ele.value;
        });
        return ele;
    }

    static setInput(input, value){
        input.type = "number";
        input.value = value;
    }

    static buildInput(){
        let ele = document.createElement("input");
        ele.type = "number";
        return ele;
    }

    static parse(l, rule, r) {
        
        let sign = 1;

        if(l.ch == "-" && l.pk.ty == l.types.num){
        	l.sync();
        	sign = -1;
        }

        if(l.ty == l.types.num){
        	let tx = l.tx;
            l.next();
            return new CSS_Number(sign*(new Number(tx)));
        }
        return null;
    }
}

class Point2D extends Float64Array{
	
	constructor(x, y) {
		super(2);

		if (typeof(x) == "number") {
			this[0] = x;
			this[1] = y;
			return;
		}

		if (x instanceof Array) {
			this[0] = x[0];
			this[1] = x[1];
		}
	}

	draw(ctx, s = 1){
		ctx.beginPath();
		ctx.moveTo(this.x*s,this.y*s);
		ctx.arc(this.x*s, this.y*s, s*0.01, 0, 2*Math.PI);
		ctx.stroke();
	}

	get x (){ return this[0]}
	set x (v){if(typeof(v) !== "number") return; this[0] = v;}

	get y (){ return this[1]}
	set y (v){if(typeof(v) !== "number") return; this[1] = v;}
}

const sqrt = Math.sqrt;
const cos = Math.cos;
const acos = Math.acos;
const PI = Math.PI; 
const pow = Math.pow;

// A helper function to filter for values in the [0,1] interval:
function accept(t) {
  return 0<=t && t <=1;
}

// A real-cuberoots-only function:
function cuberoot(v) {
  if(v<0) return -pow(-v,1/3);
  return pow(v,1/3);
}

function point(t, p1, p2, p3, p4) {
	var ti = 1 - t;
	var ti2 = ti * ti;
	var t2 = t * t;
	return ti * ti2 * p1 + 3 * ti2 * t * p2 + t2 * 3 * ti * p3 + t2 * t * p4;
}


class CBezier extends Float64Array{
	constructor(x1, y1, x2, y2, x3, y3, x4, y4) {
		super(8);

		//Map P1 and P2 to {0,0,1,1} if only four arguments are provided; for use with animations
		if(arguments.length == 4){
			this[0] = 0;
			this[1] = 0;
			this[2] = x1;
			this[3] = y1;
			this[4] = x2;
			this[5] = y2;
			this[6] = 1;
			this[7] = 1;
			return;
		}
		
		if (typeof(x1) == "number") {
			this[0] = x1;
			this[1] = y1;
			this[2] = x2;
			this[3] = y2;
			this[4] = x3;
			this[5] = y3;
			this[6] = x4;
			this[7] = y4;
			return;
		}

		if (x1 instanceof Array) {
			this[0] = x1[0];
			this[1] = x1[1];
			this[2] = x1[2];
			this[3] = x1[3];
			this[4] = x1[4];
			this[5] = x1[5];
			this[6] = x1[6];
			this[7] = x1[4];
			return;
		}
	}

	get x1 (){ return this[0]}
	set x1 (v){this[0] = v;}
	get x2 (){ return this[2]}
	set x2 (v){this[2] = v;}
	get x3 (){ return this[4]}
	set x3 (v){this[4] = v;}
	get x4 (){ return this[6]}
	set x4 (v){this[6] = v;}
	get y1 (){ return this[1]}
	set y1 (v){this[1] = v;}
	get y2 (){ return this[3]}
	set y2 (v){this[3] = v;}
	get y3 (){ return this[5]}
	set y3 (v){this[5] = v;}
	get y4 (){ return this[7]}
	set y4 (v){this[7] = v;}

	add(x,y = 0){
		return new CCurve(
			this[0] + x,
			this[1] + y,
			this[2] + x,
			this[3] + y,
			this[4] + x,
			this[5] + y,
			this[6] + x,
			this[7] + y
		)
	}

	valY(t){
		return point(t, this[1], this[3], this[5], this[7]);
	}

	valX(t){
		return point(t, this[0], this[2], this[4], this[6]);
	}

	point(t) {
		return new Point2D(
			point(t, this[0], this[2], this[4], this[6]),
			point(t, this[1], this[3], this[5], this[7])
		)
	}
	
	/** 
		Acquired from : https://pomax.github.io/bezierinfo/
		Author:  Mike "Pomax" Kamermans
		GitHub: https://github.com/Pomax/
	*/

	roots(p1,p2,p3,p4) {
		var d = (-p1 + 3 * p2 - 3 * p3 + p4),
			a = (3 * p1 - 6 * p2 + 3 * p3) / d,
			b = (-3 * p1 + 3 * p2) / d,
			c = p1 / d;

		var p = (3 * b - a * a) / 3,
			p3 = p / 3,
			q = (2 * a * a * a - 9 * a * b + 27 * c) / 27,
			q2 = q / 2,
			discriminant = q2 * q2 + p3 * p3 * p3;

		// and some variables we're going to use later on:
		var u1, v1, root1, root2, root3;

		// three possible real roots:
		if (discriminant < 0) {
			var mp3 = -p / 3,
				mp33 = mp3 * mp3 * mp3,
				r = sqrt(mp33),
				t = -q / (2 * r),
				cosphi = t < -1 ? -1 : t > 1 ? 1 : t,
				phi = acos(cosphi),
				crtr = cuberoot(r),
				t1 = 2 * crtr;
			root1 = t1 * cos(phi / 3) - a / 3;
			root2 = t1 * cos((phi + 2 * PI) / 3) - a / 3;
			root3 = t1 * cos((phi + 4 * PI) / 3) - a / 3;
			return [root3, root1, root2]
		}

		// three real roots, but two of them are equal:
		if (discriminant === 0) {
			u1 = q2 < 0 ? cuberoot(-q2) : -cuberoot(q2);
			root1 = 2 * u1 - a / 3;
			root2 = -u1 - a / 3;
			return [root2, root1];
		}

		// one real root, two complex roots
		var sd = sqrt(discriminant);
		u1 = cuberoot(sd - q2);
		v1 = cuberoot(sd + q2);
		root1 = u1 - v1 - a / 3;
		return [root1];
	}

	rootsY() {
		return this.roots(this[1],this[3],this[5],this[7]);
	}

	rootsX() {
		return this.roots(this[0],this[2],this[4],this[6]);
	}
	
	getYatX(x){
		var x1 = this[0] - x, x2 = this[2] - x, x3 = this[4] - x, x4 = this[6] - x,
			x2_3 = x2 * 3, x1_3 = x1 *3, x3_3 = x3 * 3,
			d = (-x1 + x2_3 - x3_3 + x4), di = 1/d, i3 = 1/3,
			a = (x1_3 - 6 * x2 + x3_3) * di,
			b = (-x1_3 + x2_3) * di,
			c = x1 * di,
			p = (3 * b - a * a) * i3,
			p3 = p * i3,
			q = (2 * a * a * a - 9 * a * b + 27 * c) * (1/27),
			q2 = q * 0.5,
			discriminant = q2 * q2 + p3 * p3 * p3;

		// and some variables we're going to use later on:
		var u1, v1, root;

		//Three real roots can never happen if p1(0,0) and p4(1,1);

		// three real roots, but two of them are equal:
		if (discriminant < 0) {
			var mp3 = -p / 3,
				mp33 = mp3 * mp3 * mp3,
				r = sqrt(mp33),
				t = -q / (2 * r),
				cosphi = t < -1 ? -1 : t > 1 ? 1 : t,
				phi = acos(cosphi),
				crtr = cuberoot(r),
				t1 = 2 * crtr;
			root = t1 * cos((phi + 4 * PI) / 3) - a / 3;
		}else if (discriminant === 0) {
			u1 = q2 < 0 ? cuberoot(-q2) : -cuberoot(q2);
			root = -u1 - a * i3;
		}else{
			var sd = sqrt(discriminant);
			// one real root, two complex roots
			u1 = cuberoot(sd - q2);
			v1 = cuberoot(sd + q2);
			root = u1 - v1 - a * i3;	
		}

		return point(root, this[1], this[3], this[5], this[7]);
	}
	/**
		Given a Canvas 2D context object and scale value, strokes a cubic bezier curve.
	*/
	draw(ctx, s = 1){
		ctx.beginPath();
		ctx.moveTo(this[0]*s, this[1]*s);
		ctx.bezierCurveTo(
			this[2]*s, this[3]*s,
			this[4]*s, this[5]*s,
			this[6]*s, this[7]*s
			);
		ctx.stroke();
	}
}

function curvePoint(curve, t) {
    var point = {
        x: 0,
        y: 0
    };
    point.x = posOnCurve(t, curve[0], curve[2], curve[4]);
    point.y = posOnCurve(t, curve[1], curve[3], curve[5]);
    return point;
}

function posOnCurve(t, p1, p2, p3) {
    var ti = 1 - t;
    return ti * ti * p1 + 2 * ti * t * p2 + t * t * p3;
}

function splitCurve(bp, t) {
    var left = [];
    var right = [];

    function drawCurve(bp, t) {
        if (bp.length == 2) {
            left.push(bp[0], bp[1]);
            right.push(bp[0], bp[1]);
        } else {
            var new_bp = []; //bp.slice(0,-2);
            for (var i = 0; i < bp.length - 2; i += 2) {
                if (i == 0) {
                    left.push(bp[i], bp[i + 1]);
                }
                if (i == bp.length - 4) {
                    right.push(bp[i + 2], bp[i + 3]);
                }
                new_bp.push((1 - t) * bp[i] + t * bp[i + 2]);
                new_bp.push((1 - t) * bp[i + 1] + t * bp[i + 3]);
            }
            drawCurve(new_bp, t);
        }
    }

    drawCurve(bp, t);

    return {
        x: new QBezier(right),
        y: new QBezier(left)
    };
}

function curveIntersections(p1, p2, p3) {
    var intersections = {
        a: Infinity,
        b: Infinity
    };

    var a = p1 - 2 * p2 + p3;

    var b = 2 * (p2 - p1);

    var c = p1;

    if (b == 0) {} else if (Math.abs(a) < 0.00000000005) {
        intersections.a = (-c / b); //c / b;
    } else {

        intersections.a = ((-b - Math.sqrt((b * b) - 4 * a * c)) / (2 * a));
        intersections.b = ((-b + Math.sqrt((b * b) - 4 * a * c)) / (2 * a));
    }
    return intersections
}

class QBezier {
    constructor(x1, y1, x2, y2, x3, y3) {
        this.x1 = 0;
        this.x2 = 0;
        this.x3 = 0;
        this.y1 = 0;
        this.y2 = 0;
        this.y3 = 0;

        if (typeof(x1) == "number") {
            this.x1 = x1;
            this.x2 = x2;
            this.x3 = x3;
            this.y1 = y1;
            this.y2 = y2;
            this.y3 = y3;
            return;
        }

        if (x1 instanceof QBezier) {
            this.x1 = x1.x1;
            this.x2 = x1.x2;
            this.x3 = x1.x3;
            this.y1 = x1.y1;
            this.y2 = x1.y2;
            this.y3 = x1.y3;
            return;
        }

        if (x1 instanceof Array) {
            this.x1 = x1[0];
            this.y1 = x1[1];
            this.x2 = x1[2];
            this.y2 = x1[3];
            this.x3 = x1[4];
            this.y3 = x1[5];
            return;
        }
    }

    reverse() {
        return new QBezier(
            this.x3,
            this.y3,
            this.x2,
            this.y2,
            this.x1,
            this.y1
        )
    }

    point(t) {
        return new Point2D(
            posOnCurve(t, this.x1, this.x2, this.x3),
            posOnCurve(t, this.y1, this.y2, this.y3))

    }

    tangent(t) {
        var tan = {
            x: 0,
            y: 0
        };

        var px1 = this.x2 - this.x1;
        var py1 = this.y2 - this.y1;

        var px2 = this.x3 - this.x2;
        var py2 = this.y3 - this.y2;

        tan.x = (1 - t) * px1 + t * px2;
        tan.y = (1 - t) * py1 + t * py2;

        return tan;
    }

    toArray() {
        return [this.x1, this.y1, this.x2, this.y2, this.x3, this.y3];
    }

    split(t) {
        return splitCurve(this.toArray(), t);
    }

    rootsX() {
        return this.roots(
            this.x1,
            this.x2,
            this.x3
        )

    }

    roots(p1, p2, p3) {
        var curve = this.toArray();

        var c = p1 - (2 * p2) + p3;
        var b = 2 * (p2 - p1);
        var a = p1;
        var a2 = a * 2;
        var sqrt = Math.sqrt(b * b - (a * 4 * c));
        var t1 = (-b + sqrt) / a2;
        var t2 = (-b - sqrt) / a2;

        return [t1, t2];
    }

    rootsa() {
        var curve = this.toArray();

        var p1 = curve[1];
        var p2 = curve[3];
        var p3 = curve[5];
        var x1 = curve[0];
        var x2 = curve[2];
        var x3 = curve[4];

        var py1d = 2 * (p2 - p1);
        var py2d = 2 * (p3 - p2);
        var ad1 = -py1d + py2d;
        var bd1 = py1d;

        var px1d = 2 * (x2 - x1);
        var px2d = 2 * (x3 - x2);
        var ad2 = -px1d + px2d;
        var bd2 = px1d;

        var t1 = -bd1 / ad1;
        var t2 = -bd2 / ad2;

        return [t1, t2];
    }

    boundingBox() {
        var x1 = curve[0];
        var y1 = curve[1];
        var x2 = curve[2];
        var y2 = curve[3];
        var x3 = curve[4];
        var y3 = curve[5];
        var roots = getRootsClamped(curve);
        var min_x = Math.min(x1, x2, x3, roots.y[0] || Infinity, roots.x[0] || Infinity);
        var min_y = Math.min(y1, y2, y3, roots.y[1] || Infinity, roots.x[1] || Infinity);
        var max_x = Math.max(x1, x2, x3, roots.y[0] || -Infinity, roots.x[0] || -Infinity);
        var max_y = Math.max(y1, y2, y3, roots.y[1] || -Infinity, roots.x[1] || -Infinity);

        return {
            min: {
                x: min_x,
                y: min_y
            },
            max: {
                x: max_x,
                y: max_y
            }
        };
    }

    rotate(angle, offset) {
        angle = (angle / 180) * Math.PI;

        var new_curve = this.toArray();

        for (var i = 0; i < 6; i += 2) {
            var x = curve[i] - offset.x;
            var y = curve[i + 1] - offset.y;
            new_curve[i] = ((x * Math.cos(angle) - y * Math.sin(angle))) + offset.x;
            new_curve[i + 1] = ((x * Math.sin(angle) + y * Math.cos(angle))) + offset.y;
        }

        return new QBezier(new_curve);
    }

    intersects() {
        return {
            x: curveIntersections(this.x1, this.x2, this.x3),
            y: curveIntersections(this.y1, this.y2, this.y3)
        }
    }

    add(x, y) {
        if (typeof(x) == "number") {
            return new QBezier(
                this.x1 + x,
                this.y1 + y,
                this.x2 + x,
                this.y2 + y,
                this.x3 + x,
                this.y3 + y,
            )
        }
    }
}

class CSS_Bezier extends CBezier {
	static parse(l, rule, r) {

		let out = null;

		switch(l.tx){
			case "cubic":
				l.next().a("(");
				let v1 = parseFloat(l.tx);
				let v2 = parseFloat(l.next().a(",").tx);
				let v3 = parseFloat(l.next().a(",").tx);
				let v4 = parseFloat(l.next().a(",").tx);
				l.a(")");
				out = new CSS_Bezier(v1, v2, v3, v4);
				break;
			case "ease":
				l.next();
				out = new CSS_Bezier(0.25, 0.1, 0.25, 1);
				break;
			case "ease-in":
				l.next();
				out = new CSS_Bezier(0.42, 0, 1, 1);
				break;
			case "ease-out":
				l.next();
				out = new CSS_Bezier(0, 0, 0.58, 1);
				break;
			case "ease-in-out":
				l.next();
				out = new CSS_Bezier(0.42, 0, 0.58, 1);
				break;
		}

		return out;
	}

	toString(){
		 return `cubic-bezier(${this[2]},${this[3]},${this[4]},${this[5]})`;
	}
}

class Stop{
    constructor(color, percentage){
        this.color = color;
        this.percentage = percentage || null;
    }

    toString(){
        return `${this.color}${(this.percentage)?" "+this.percentage:""}`;
    }
}

class CSS_Gradient{

    static parse(l, rule, r) {
        let tx = l.tx,
            pky = l.pk.ty;
        if (l.ty == l.types.id) {
            switch(l.tx){
                case "linear-gradient":
                l.next().a("(");
                let dir,num,type ="deg";
                if(l.tx == "to"){

                }else if(l.ty == l.types.num){
                    num = parseFloat(l.ty);
                    type = l.next().tx;
                    l.next().a(',');
                }

                let stops = [];
                
                while(!l.END && l.ch != ")"){
                    let v = CSS_Color.parse(l, rule, r);
                    let len = null;

                    if(l.ch == ")") {
                        stops.push(new Stop(v, len));
                        break;
                    }
                    
                    if(l.ch != ","){
                        if(!(len = CSS_Length.parse(l, rule, r)))
                            len = CSS_Percentage.parse(l,rule,r);
                    }else
                        l.next();
                    

                    stops.push(new Stop(v, len));
                }
                l.a(")");
                let grad = new CSS_Gradient();
                grad.stops = stops;
                return grad;
            }
        }
        return null;
    }


    constructor(type = 0){
        this.type = type; //linear gradient
        this.direction = new CSS_Length(0, "deg");
        this.stops = [];
    }

    toString(){
        let str = [];
        switch(this.type){
            case 0:
            str.push("linear-gradient(");
            if(this.direction !== 0)
                str.push(this.direction.toString() + ",");
            break;
        }

        for(let i = 0; i < this.stops.length; i++)
            str.push(this.stops[i].toString()+((i<this.stops.length-1)?",":""));

        str.push(")");

        return str.join(" ");
    }
}

const $medh = (prefix) => ({
    parse: (l, r, a, n = 0) => (n = CSS_Length.parse(l, r, a), (prefix > 0) ? ((prefix > 1) ? (win) => win.innerHeight <= n : (win) => win.innerHeight >= n) : (win) => win.screen.height == n)
});


const $medw = (prefix) => ({
    parse: (l, r, a, n = 0) => 
        (n = CSS_Length.parse(l, r, a), (prefix > 0) ? ((prefix > 1) ? (win) => win.innerWidth >= n : (win) => win.innerWidth <= n) : (win) => win.screen.width == n)
});

function CSS_Media_handle(type, prefix) {
    switch (type) {
        case "h":
            return $medh(prefix);
        case "w":
            return $medw(prefix);
    }

    return {
        parse: function(a, b, c) {
            debugger;
        }
    };
}

function getValue(lex, attribute) {
    let v = lex.tx,
        mult = 1;

    if (v == "-")
        v = lex.n.tx, mult = -1;

    let n = parseFloat(v) * mult;

    lex.next();

    if (lex.ch !== ")" && lex.ch !== ",") {
        switch (lex.tx) {
            case "%":
                break;

            /* Rotational Values */
            case "grad":
                n *= Math.PI / 200;
                break;
            case "deg":
                n *= Math.PI / 180;
                break;
            case "turn":
                n *= Math.PI * 2;
                break;
            case "px":
                break;
            case "em":
                break;
        }
        lex.next();
    }
    return n;
}

function ParseString(string, transform) {
    let lex = null;
    lex = string;

    if(typeof(string) == "string")
        lex = whind$1(string);
    
    while (!lex.END) {
        let tx = lex.tx;
        lex.next();
        switch (tx) {
            case "matrix":

                let a = getValue(lex.a("(")),
                    b = getValue(lex.a(",")),
                    c = getValue(lex.a(",")),
                    d = getValue(lex.a(",")),
                    r = -Math.atan2(b, a),
                    sx1 = (a / Math.cos(r)) || 0,
                    sx2 = (b / -Math.sin(r)) || 0,
                    sy1 = (c / Math.sin(r)) || 0,
                    sy2 = (d / Math.cos(r)) || 0;
                
                if(sx2 !== 0)
                    transform.sx = (sx1 + sx2) * 0.5;
                else
                    transform.sx = sx1;

                if(sy1 !== 0)
                    transform.sy = (sy1 + sy2) * 0.5;
                else
                    transform.sy = sy2;

                transform.px = getValue(lex.a(","));
                transform.py = getValue(lex.a(","));
                transform.r = r;
                lex.a(")");
                break;
            case "matrix3d":
                break;
            case "translate":
                transform.px = getValue(lex.a("("), "left");
                lex.a(",");
                transform.py = getValue(lex, "left");
                lex.a(")");
                continue;
            case "translateX":
                transform.px = getValue(lex.a("("), "left");
                lex.a(")");
                continue;
            case "translateY":
                transform.py = getValue(lex.a("("), "left");
                lex.a(")");
                continue;
            case "scale":
                transform.sx = getValue(lex.a("("), "left");
                if(lex.ch ==","){
                    lex.a(",");
                    transform.sy = getValue(lex, "left");
                }
                else transform.sy = transform.sx;
                lex.a(")");
                continue;
            case "scaleX":
                transform.sx = getValue(lex.a("("), "left");
                lex.a(")");
                continue;
            case "scaleY":
                transform.sy = getValue(lex.a("("), "left");
                lex.a(")");
                continue;
            case "scaleZ":
                break;
            case "rotate":
                transform.r = getValue(lex.a("("));
                lex.a(")");
                continue;
            case "rotateX":
                break;
            case "rotateY":
                break;
            case "rotateZ":
                break;
            case "rotate3d":
                break;
            case "perspective":
                break;
        }
        lex.next();
    }
}
// A 2D transform composition of 2D position, 2D scale, and 1D rotation.

class CSS_Transform2D extends Float64Array {
    static ToString(pos = [0, 0], scl = [1, 1], rot = 0) {
        var px = 0,
            py = 0,
            sx = 1,
            sy = 1,
            r = 0, cos = 1, sin = 0;
        if (pos.length == 5) {
            px = pos[0];
            py = pos[1];
            sx = pos[2];
            sy = pos[3];
            r = pos[4];
        } else {
            px = pos[0];
            py = pos[1];
            sx = scl[0];
            sy = scl[1];
            r = rot;
        }
        
        if(r !== 0){
            cos = Math.cos(r);
            sin = Math.sin(r);
        }

        return `matrix(${cos * sx}, ${-sin * sx}, ${sy * sin}, ${sy * cos}, ${px}, ${py})`;
    }


    constructor(px, py, sx, sy, r) {
        super(5);
        this.sx = 1;
        this.sy = 1;
        if (px !== undefined) {
            if (px instanceof CSS_Transform2D) {
                this[0] = px[0];
                this[1] = px[1];
                this[2] = px[2];
                this[3] = px[3];
                this[4] = px[4];
            } else if (typeof(px) == "string") ParseString(px, this);
            else {
                this[0] = px;
                this[1] = py;
                this[2] = sx;
                this[3] = sy;
                this[4] = r;
            }
        }
    }
    get px() {
        return this[0];
    }
    set px(v) {
        this[0] = v;
    }
    get py() {
        return this[1];
    }
    set py(v) {
        this[1] = v;
    }
    get sx() {
        return this[2];
    }
    set sx(v) {
        this[2] = v;
    }
    get sy() {
        return this[3];
    }
    set sy(v) {
        this[3] = v;
    }
    get r() {
        return this[4];
    }
    set r(v) {
        this[4] = v;
    }

    set scale(s){
        this.sx = s;
        this.sy = s;
    }

    get scale(){
        return this.sx;
    }
    
    lerp(to, t) {
        let out = new CSS_Transform2D();
        for (let i = 0; i < 5; i++) out[i] = this[i] + (to[i] - this[i]) * t;
        return out;
    }
    toString() {
        return CSS_Transform2D.ToString(this);
    }

    copy(v) {
        let copy = new CSS_Transform2D(this);


        if (typeof(v) == "string")
            ParseString(v, copy);

        return copy;
    }

    /**
     * Sets the transform value of a canvas 2D context;
     */
    setCTX(ctx){       
        let cos = 1, sin = 0;
        if(this[4] != 0){
            cos = Math.cos(this[4]);
            sin = Math.sin(this[4]);
        }
        ctx.transform(cos * this[2], -sin * this[2], this[3] * sin, this[3] * cos, this[0], this[1]);
    }

    getLocalX(X){
        return (X - this.px) / this.sx;
    }

    getLocalY(Y){
        return (Y - this.py) / this.sy;
    }
}

/**
 * @brief Path Info
 * @details Path syntax information for reference
 * 
 * MoveTo: M, m
 * LineTo: L, l, H, h, V, v
 * Cubic Bézier Curve: C, c, S, s
 * Quadratic Bézier Curve: Q, q, T, t
 * Elliptical Arc Curve: A, a
 * ClosePath: Z, z
 * 
 * Capital symbols represent absolute positioning, lowercase is relative
 */
const PathSym = {
    M: 0,
    m: 1,
    L: 2,
    l: 3,
    h: 4,
    H: 5,
    V: 6,
    v: 7,
    C: 8,
    c: 9,
    S: 10,
    s: 11,
    Q: 12,
    q: 13,
    T: 14,
    t: 15,
    A: 16,
    a: 17,
    Z: 18,
    z: 19,
    pairs: 20
};

function getSignedNumber(lex) {
    let mult = 1,
        tx = lex.tx;
    if (tx == "-") {
        mult = -1;
        tx = lex.n.tx;
    }
    lex.next();
    return parseFloat(tx) * mult;
}

function getNumberPair(lex, array) {
    let x = getSignedNumber(lex);
    if (lex.ch == ',') lex.next();
    let y = getSignedNumber(lex);
    array.push(x, y);
}

function parseNumberPairs(lex, array) {
    while ((lex.ty == lex.types.num || lex.ch == "-") && !lex.END) {    	
    	array.push(PathSym.pairs);
        getNumberPair(lex, array);
    }
}
/**
 * @brief An array store of path data in numerical form
 */
class CSS_Path extends Array {
    static FromString(string, array) {
        let lex = whind(string);
        while (!lex.END) {
            let relative = false,
                x = 0,
                y = 0;
            switch (lex.ch) {
                //Move to
                case "m":
                    relative = true;
                case "M":
                    lex.next(); //
                    array.push((relative) ? PathSym.m : PathSym.M);
                    getNumberPair(lex, array);
                    parseNumberPairs(lex, array);
                    continue;
                    //Line to
                case "h":
                    relative = true;
                case "H":
                    lex.next();
                    x = getSignedNumber(lex);
                    array.push((relative) ? PathSym.h : PathSym.H, x);
                    continue;
                case "v":
                    relative = true;
                case "V":
                    lex.next();
                    y = getSignedNumber(lex);
                    array.push((relative) ? PathSym.v : PathSym.V, y);
                    continue;
                case "l":
                    relative = true;
                case "L":
                    lex.next();
                    array.push((relative) ? PathSym.l : PathSym.L);
                    getNumberPair(lex, array);
                    parseNumberPairs(lex, array);
                    continue;
                    //Cubic Curve
                case "c":
                    relative = true;
                case "C":
                    array.push((relative) ? PathSym.c : PathSym.C);
                    getNumberPair(lex, array);
                    getNumberPair(lex, array);
                    getNumberPair(lex, array);
                    parseNumberPairs(lex, array);
                    continue;
                case "s":
                    relative = true;
                case "S":
                    array.push((relative) ? PathSym.s : PathSym.S);
                    getNumberPair(lex, array);
                    getNumberPair(lex, array);
                    parseNumberPairs(lex, array);
                    continue;
                    //Quadratic Curve0
                case "q":
                    relative = true;
                case "Q":
                    array.push((relative) ? PathSym.q : PathSym.Q);
                    getNumberPair(lex, array);
                    getNumberPair(lex, array);
                    parseNumberPairs(lex, array);
                    continue;
                case "t":
                    relative = true;
                case "T":
                    array.push((relative) ? PathSym.t : PathSym.T);
                    getNumberPair(lex, array);
                    parseNumberPairs(lex, array);
                    continue;
                    //Elliptical Arc
                    //Close path:
                case "z":
                    relative = true;
                case "Z":
                    array.push((relative) ? PathSym.z : PathSym.Z);
            }
            lex.next();
        }
    }

    static ToString(array) {
    	let string = [], l = array.length, i = 0;
    	while(i < l){
    		switch(array[i++]){
    			case PathSym.M:
    				string.push("M", array[i++], array[i++]);
    				break;
			    case PathSym.m:
			    	string.push("m", array[i++], array[i++]);
			    	break;
			    case PathSym.L:
			    	string.push("L", array[i++], array[i++]);
			    	break;
			    case PathSym.l:
			    	string.push("l", array[i++], array[i++]);
			    	break;
			    case PathSym.h:
			    	string.push("h", array[i++]);
			    	break;
			    case PathSym.H:
			    	string.push("H", array[i++]);
			    	break;
			    case PathSym.V:
			    	string.push("V", array[i++]);
			    	break;
			    case PathSym.v:
			    	string.push("v", array[i++]);
			    	break;
			    case PathSym.C:
			    	string.push("C", array[i++], array[i++], array[i++], array[i++], array[i++], array[i++]);
			    	break;
			    case PathSym.c:
			    	string.push("c", array[i++], array[i++], array[i++], array[i++], array[i++], array[i++]);
			    	break;
			    case PathSym.S:
			    	string.push("S", array[i++], array[i++], array[i++], array[i++]);
			    	break;
			    case PathSym.s:
			    	string.push("s", array[i++], array[i++], array[i++], array[i++]);
			    	break;
			    case PathSym.Q:
			    	string.push("Q", array[i++], array[i++], array[i++], array[i++]);
			    	break;
			    case PathSym.q:
			    	string.push("q", array[i++], array[i++], array[i++], array[i++]);
			    	break;
			    case PathSym.T:
			    	string.push("T", array[i++], array[i++]);
			    	break;
			    case PathSym.t:
			    	string.push("t", array[i++], array[i++]);
			    	break;
			    case PathSym.Z:
			    	string.push("Z");
			    	break;
			    case PathSym.z:
			    	string.push("z");
			    	break;
			    case PathSym.pairs:
			    	string.push(array[i++], array[i++]);
			    	break;
			 	case PathSym.A:
			    case PathSym.a:
			    default:
			    	i++;
    		}
    	}

    	return string.join(" ");
    }

    
    constructor(data) {
        super();	

    	if(typeof(data) == "string"){
    		Path.FromString(data, this);
    	}else if(Array.isArray(data)){
    		for(let i = 0; i < data.length;i++){
    			this.push(parseFloat(data[i]));
    		}
    	}
    }

    toString(){
    	return Path.ToString(this);
    }

    lerp(to, t, array = new Path){
    	let l = Math.min(this.length, to.length);

    	for(let i = 0; i < l; i++)
    		array[i] = this[i] + (to[i] - this[i]) * t;

    	return array;
    }	
}

class CSS_FontName extends String {
	static parse(l, rule, r) {

		if(l.ty == l.types.str){
			let tx = l.tx;
            l.next();
			return new CSS_String(tx);
		}		

		if(l.ty == l.types.id){

			let pk = l.peek();

			while(pk.type == l.types.id && !pk.END){
				pk.next();
			}

			let str = pk.slice(l);
			
			l.sync();
			return new CSS_String(str);
		}

        return null;
    }
}

/**
 * CSS Type constructors
 * @alias module:wick~internals.css.types.
 * @enum {object}
 * https://www.w3.org/TR/CSS2/about.html#property-defs
 */
const types = {
	color: CSS_Color,
	length: CSS_Length,
	time: CSS_Length,
	flex: CSS_Length,
	angle: CSS_Length,
	frequency: CSS_Length,
	resolution: CSS_Length,
	percentage: CSS_Percentage,
	url: CSS_URL,
	uri: CSS_URL,
	number: CSS_Number,
	id: CSS_Id,
	string: CSS_String,
	shape: CSS_Shape,
	cubic_bezier: CSS_Bezier,
	integer: CSS_Number,
	gradient: CSS_Gradient,
	transform2D : CSS_Transform2D,
	path: CSS_Path,
	fontname: CSS_FontName,

	/* Media parsers */
	m_width: CSS_Media_handle("w", 0),
	m_min_width: CSS_Media_handle("w", 1),
	m_max_width: CSS_Media_handle("w", 2),
	m_height: CSS_Media_handle("h", 0),
	m_min_height: CSS_Media_handle("h", 1),
	m_max_height: CSS_Media_handle("h", 2),
	m_device_width: CSS_Media_handle("dw", 0),
	m_min_device_width: CSS_Media_handle("dw", 1),
	m_max_device_width: CSS_Media_handle("dw", 2),
	m_device_height: CSS_Media_handle("dh", 0),
	m_min_device_height: CSS_Media_handle("dh", 1),
	m_max_device_height: CSS_Media_handle("dh", 2)
};

/**
 * CSS Property Definitions https://www.w3.org/TR/css3-values/#value-defs
 * @alias module:wick~internals.css.property_definitions.
 * @enum {string}
 */
const property_definitions = {

	/* https://drafts.csswg.org/css-writing-modes-3/ */
		direction:"ltr|rtl",
		unicode_bidi:"normal|embed|isolate|bidi-override|isolate-override|plaintext",
		writing_mode:"horizontal-tb|vertical-rl|vertical-lr",
		text_orientation:"mixed|upright|sideways",
		glyph_orientation_vertical:`auto|0deg|90deg|"0"|"90"`,
		text_combine_upright:"none|all",

	/* https://www.w3.org/TR/css-position-3 */ 
		position: "static|relative|absolute|sticky|fixed",
		top: `<length>|<percentage>|auto`,
		left: `<length>|<percentage>|auto`,
		bottom: `<length>|<percentage>|auto`,
		right: `<length>|<percentage>|auto`,
		offset_before: `<length>|<percentage>|auto`,
		offset_after: `<length>|<percentage>|auto`,
		offset_start: `<length>|<percentage>|auto`,
		offset_end: `<length>|<percentage>|auto`,
		z_index:"auto|<integer>",

	/* https://www.w3.org/TR/css-display-3/ */
		display: `[ <display_outside> || <display_inside> ] | <display_listitem> | <display_internal> | <display_box> | <display_legacy>`,

	/* https://www.w3.org/TR/css-box-3 */
		margin: `[<length>|<percentage>|0|auto]{1,4}`,
		margin_top: `<length>|<percentage>|0|auto`,
		margin_right: `<length>|<percentage>|0|auto`,
		margin_bottom: `<length>|<percentage>|0|auto`,
		margin_left: `<length>|<percentage>|0|auto`,

		margin_trim:"none|in-flow|all",

		padding: `[<length>|<percentage>|0|auto]{1,4}`,
		padding_top: `<length>|<percentage>|0|auto`,
		padding_right: `<length>|<percentage>|0|auto`,
		padding_bottom: `<length>|<percentage>|0|auto`,
		padding_left: `<length>|<percentage>|0|auto`,

	/* https://www.w3.org/TR/CSS2/visuren.html */
		float: `left|right|none`,
		clear: `left|right|both|none`,

	/* https://drafts.csswg.org/css-sizing-3 todo:implement fit-content(%) function */
		box_sizing: `content-box | border-box`,
		width: `<length>|<percentage>|min-content|max-content|fit-content|auto`,
		height: `<length>|<percentage>|min-content|max-content|fit-content|auto`,
		min_width: `<length>|<percentage>|min-content|max-content|fit-content|auto`,
		max_width: `<length>|<percentage>|min-content|max-content|fit-content|auto|none`,
		min_height: `<length>|<percentage>|min-content|max-content|fit-content|auto`,
		max_height: `<length>|<percentage>|min-content|max-content|fit-content|auto|none`,

	/* https://www.w3.org/TR/2018/REC-css-color-3-20180619 */
		color: `<color>`,
		opacity: `<alphavalue>`,

	/* https://www.w3.org/TR/css-backgrounds-3/ */
		background_color: `<color>`,
		background_image: `<bg_image>#`,
		background_repeat: `<repeat_style>#`,
		background_attachment: `scroll|fixed|local`,
		background_position: `[<percentage>|<length>]{1,2}|[top|center|bottom]||[left|center|right]`,
		background_clip: `<box>#`,
		background_origin: `<box>#`,
		background_size: `<bg_size>#`,
		background: `[<bg_layer>#,]?<final_bg_layer>`,
		border_color: `<color>{1,4}`,
		border_top_color: `<color>`,
		border_right_color: `<color>`,
		border_bottom_color: `<color>`,
		border_left_color: `<color>`,

		border_top_width: `<line_width>`,
		border_right_width: `<line_width>`,
		border_bottom_width: `<line_width>`,
		border_left_width: `<line_width>`,
		border_width: `<line_width>{1,4}`,

		border_style: `<line_style>{1,4}`,
		border_top_style: `<line_style>`,
		border_right_style: `<line_style>`,
		border_bottom_style: `<line_style>`,
		border_left_style: `<line_style>`,

		border_top: `<line_width>||<line_style>||<color>`,
		border_right: `<line_width>||<line_style>||<color>`,
		border_bottom: `<line_width>||<line_style>||<color>`,
		border_left: `<line_width>||<line_style>||<color>`,

		border_radius: `<length_percentage>{1,4}[ / <length_percentage>{1,4}]?`,
		border_top_left_radius: `<length_percentage>{1,2}`,
		border_top_right_radius: `<length_percentage>{1,2}`,
		border_bottom_right_radius: `<length_percentage>{1,2}`,
		border_bottom_left_radius: `<length_percentage>{1,2}`,

		border: `<line_width>||<line_style>||<color>`,

		border_image: `<border_image_source>||<border_image_slice>[/<border_image_width>|/<border_image_width>?/<border_image_outset>]?||<border_image_repeat>`,
		border_image_source: `none|<image>`,
		border_image_slice: `[<number>|<percentage>]{1,4}&&fill?`,
		border_image_width: `[<length_percentage>|<number>|auto]{1,4}`,
		border_image_outset: `[<length>|<number>]{1,4}`,
		border_image_repeat: `[stretch|repeat|round|space]{1,2}`,
		box_shadow: `none|<shadow>#`,
		line_height: `normal|<percentage>|<length>|<number>`,
		overflow: 'visible|hidden|scroll|auto',

	/* https://www.w3.org/TR/css-fonts-4 */
		font_display: "auto|block|swap|fallback|optional",
		font_family: `[[<generic_family>|<family_name>],]*[<generic_family>|<family_name>]`,
		font_language_override:"normal|<string>",
		font: `[[<font_style>||<font_variant>||<font_weight>]?<font_size>[/<line_height>]?<font_family>]|caption|icon|menu|message-box|small-caption|status-bar`,
		font_max_size: `<absolute_size>|<relative_size>|<length>|<percentage>|infinity`,
		font_min_size: `<absolute_size>|<relative_size>|<length>|<percentage>`,
		font_optical_sizing: `auto|none`,
		font_pallette: `normal|light|dark|<identifier>`,
		font_size: `<absolute_size>|<relative_size>|<length>|<percentage>`,
		font_stretch:"<percentage>|normal|ultra-condensed|extra-condensed|condensed|semi-condensed|semi-expanded|expanded|extra-expanded|ultra-expanded",
		font_style: `normal|italic|oblique<angle>?`,
		font_synthesis:"none|[weight||style]",
		font_synthesis_small_caps:"auto|none",
		font_synthesis_style:"auto|none",
		font_synthesis_weight:"auto|none",
		font_variant_alternates:"normal|[stylistic(<feature-value-name>)||historical-forms||styleset(<feature-value-name>#)||character-variant(<feature-value-name>#)||swash(<feature-value-name>)||ornaments(<feature-value-name>)||annotation(<feature-value-name>)]",
		font_variant_emoji:"auto|text|emoji|unicode",
		font_variation_settings:" normal|[<string><number>]#",
		font_size_adjust: `<number>|none`,
		
		font_weight: `normal|bold|bolder|lighter|100|200|300|400|500|600|700|800|900`,

	/* https://www.w3.org/TR/css-fonts-3/ */
		font_kerning: ` auto | normal | none`,
		font_variant: `normal|none|[<common-lig-values>||<discretionary-lig-values>||<historical-lig-values>||<contextual-alt-values>||[small-caps|all-small-caps|petite-caps|all-petite-caps|unicase|titling-caps]||<numeric-figure-values>||<numeric-spacing-values>||<numeric-fraction-values>||ordinal||slashed-zero||<east-asian-variant-values>||<east-asian-width-values>||ruby||[sub|super]]`,
		font_variant_ligatures:`normal|none|[<common-lig-values>||<discretionary-lig-values>||<historical-lig-values>||<contextual-alt-values> ]`,
		font_variant_position:`normal|sub|super`,
		font_variant_caps:`normal|small-caps|all-small-caps|petite-caps|all-petite-caps|unicase|titling-caps`,
		font_variant_numeric: "normal | [ <numeric-figure-values> || <numeric-spacing-values> || <numeric-fraction-values> || ordinal || slashed-zero ]",
		font_variant_east_asian:" normal | [ <east-asian-variant-values> || <east-asian-width-values> || ruby ]",

	/* https://drafts.csswg.org/css-text-3 */
		hanging_punctuation : "none|[first||[force-end|allow-end]||last]",
		hyphens : "none|manual|auto",
		letter_spacing: `normal|<length>`,
		line_break : "auto|loose|normal|strict|anywhere",
		overflow_wrap : "normal|break-word|anywhere",
		tab_size : "<length>|<number>",
		text_align : "start|end|left|right|center|justify|match-parent|justify-all",
		text_align_all : "start|end|left|right|center|justify|match-parent",
		text_align_last : "auto|start|end|left|right|center|justify|match-parent",
		text_indent : "[[<length>|<percentage>]&&hanging?&&each-line?]",
		text_justify : "auto|none|inter-word|inter-character",
		text_transform : "none|[capitalize|uppercase|lowercase]||full-width||full-size-kana",
		white_space : "normal|pre|nowrap|pre-wrap|break-spaces|pre-line",
		word_break : " normal|keep-all|break-all|break-word",
		word_spacing : "normal|<length>",
		word_wrap : "  normal | break-word | anywhere",

	/* https://drafts.csswg.org/css-text-decor-3 */
		text_decoration: "<text-decoration-line>||<text-decoration-style>||<color>",
		text_decoration_color:"<color>",
		text_decoration_line:"none|[underline||overline||line-through||blink]",
		text_decoration_style:"solid|double|dotted|dashed|wavy",
		text_emphasis:"<text-emphasis-style>||<text-emphasis-color>",
		text_emphasis_color:"<color>",
		text_emphasis_position:"[over|under]&&[right|left]?",
		text_emphasis_style:"none|[[filled|open]||[dot|circle|double-circle|triangle|sesame]]|<string>",
		text_shadow:"none|[<color>?&&<length>{2,3}]#",
		text_underline_position:"auto|[under||[left|right]]",

	/* Flex Box https://www.w3.org/TR/css-flexbox-1/ */
		align_content: `flex-start | flex-end | center | space-between | space-around | stretch`,
		align_items: `flex-start | flex-end | center | baseline | stretch`,
		align_self: `auto | flex-start | flex-end | center | baseline | stretch`,
		flex:`none|[<flex-grow> <flex-shrink>?||<flex-basis>]`,
		flex_basis:`content|<width>`,
		flex_direction:`row | row-reverse | column | column-reverse`,
		flex_flow:`<flex-direction>||<flex-wrap>`,
		flex_grow:`<number>`,
		flex_shrink:`<number>`,
		flex_wrap:`nowrap|wrap|wrap-reverse`,
		justify_content :"flex-start | flex-end | center | space-between | space-around",
		order:`<integer>`,

	/* https://drafts.csswg.org/css-transitions-1/ */
		transition: `<single_transition>#`,
		transition_delay: `<time>#`,
		transition_duration: `<time>#`,
		transition_property: `none|<single_transition_property>#`,
		transition_timing_function: `<timing_function>#`,

	/* CSS3 Animation https://drafts.csswg.org/css-animations-1/ */
		animation: `<single_animation>#`,
		animation_name: `[none|<keyframes_name>]#`,
		animation_duration: `<time>#`,
		animation_timing_function: `<timing_function>#`,
		animation_iteration_count: `<single_animation_iteration_count>#`,
		animation_direction: `<single_animation_direction>#`,
		animation_play_state: `<single_animation_play_state>#`,
		animation_delayed: `<time>#`,
		animation_fill_mode: `<single_animation_fill_mode>#`,

	/* https://svgwg.org/svg2-draft/interact.html#PointerEventsProperty */
		pointer_events : `visiblePainted|visibleFill|visibleStroke|visible|painted|fill|stroke|all|none|auto`,

	/* https://drafts.csswg.org/css-ui-3 */
		caret_color :"auto|<color>",
		cursor:"[[<url> [<number><number>]?,]*[auto|default|none|context-menu|help|pointer|progress|wait|cell|crosshair|text|vertical-text|alias|copy|move|no-drop|not-allowed|grab|grabbing|e-resize|n-resize|ne-resize|nw-resize|s-resize|se-resize|sw-resize|w-resize|ew-resize|ns-resize|nesw-resize|nwse-resize|col-resize|row-resize|all-scroll|zoom-in|zoom-out]]",
		outline:"[<outline-color>||<outline-style>||<outline-width>]",
		outline_color:"<color>|invert",
		outline_offset:"<length>",
		outline_style:"auto|<border-style>",
		outline_width:"<line-width>",
		resize:"none|both|horizontal|vertical",
		text_overflow:"clip|ellipsis",

	/* https://drafts.csswg.org/css-content-3/ */
		bookmark_label:"<content-list>",
		bookmark_level:"none|<integer>",
		bookmark_state:"open|closed",
		content:"normal|none|[<content-replacement>|<content-list>][/<string>]?",
		quotes:"none|[<string><string>]+",
		string_set:"none|[<custom-ident><string>+]#",
	
	/*https://www.w3.org/TR/CSS22/tables.html*/
		caption_side:"top|bottom",
		table_layout:"auto|fixed",
		border_collapse:"collapse|separate",
		border_spacing:"<length><length>?",
		empty_cells:"show|hide",

	/* https://www.w3.org/TR/CSS2/page.html */
		page_break_before:"auto|always|avoid|left|right",
		page_break_after:"auto|always|avoid|left|right",
		page_break_inside:"auto|avoid|left|right",
		orphans:"<integer>",
		widows:"<integer>",

	/* https://drafts.csswg.org/css-lists-3 */
		counter_increment:"[<custom-ident> <integer>?]+ | none",
		counter_reset:"[<custom-ident> <integer>?]+|none",
		counter_set:"[<custom-ident> <integer>?]+|none",
		list_style:"<list-style-type>||<list-style-position>||<list-style-image>",
		list_style_image:"<url>|none",
		list_style_position:"inside|outside",
		list_style_type:"<counter-style>|<string>|none",
		marker_side:"list-item|list-container",


	vertical_align: `baseline|sub|super|top|text-top|middle|bottom|text-bottom|<percentage>|<length>`,

	/* Visual Effects */
	clip: '<shape>|auto',
	visibility: `visible|hidden|collapse`,
	content: `normal|none|[<string>|<uri>|<counter>|attr(<identifier>)|open-quote|close-quote|no-open-quote|no-close-quote]+`,
	quotas: `[<string><string>]+|none`,
	counter_reset: `[<identifier><integer>?]+|none`,
	counter_increment: `[<identifier><integer>?]+|none`,
};

/* Properties that are not directly accessible by CSS prop creator */

const virtual_property_definitions = {
    /* https://drafts.csswg.org/css-counter-styles-3 */
        /*system:`cyclic|numeric|alphabetic|symbolic|additive|[fixed<integer>?]|[extends<counter-style-name>]`,
        negative:`<symbol><symbol>?`,
        prefix:`<symbol>`,
        suffix:`<symbol>`,
        range:`[[<integer>|infinite]{2}]#|auto`,
        pad:`<integer>&&<symbol>`,
        fallback:`<counter-style-name>`
        symbols:`<symbol>+`,*/

        counter_style:`<numeric_counter_style>|<alphabetic_counter_style>|<symbolic_counter_style>|<japanese_counter_style>|<korean_counter_style>|<chinese_counter_style>|ethiopic-numeric`,
        numeric_counter_style:`decimal|decimal-leading-zero|arabic-indic|armenian|upper-armenian|lower-armenian|bengali|cambodian|khmer|cjk-decimal|devanagari|georgian|gujarati|gurmukhi|hebrew|kannada|lao|malayalam|mongolian|myanmar|oriya|persian|lower-roman|upper-roman|tamil|telugu|thai|tibetan`,
        symbolic_counter_style:`disc|circle|square|disclosure-open|disclosure-closed`,
        alphabetic_counter_style:`lower-alpha|lower-latin|upper-alpha|upper-latin|cjk-earthly-branch|cjk-heavenly-stem|lower-greek|hiragana|hiragana-iroha|katakana|katakana-iroha`,
        japanese_counter_style:`japanese-informal|japanese-formal`,
        korean_counter_style:`korean-hangul-formal|korean-hanja-informal|and korean-hanja-formal`,
        chinese_counter_style:`simp-chinese-informal|simp-chinese-formal|trad-chinese-informal|and trad-chinese-formal`,

	/* https://drafts.csswg.org/css-content-3/ */
		content_list:"[<string>|contents|<image>|<quote>|<target>|<leader()>]+",
		content_replacement:"<image>",

	/* https://drafts.csswg.org/css-values-4 */
		custom_ident:"<identifier>",
		position:"[[left|center|right]||[top|center|bottom]|[left|center|right|<length-percentage>][top|center|bottom|<length-percentage>]?|[[left|right]<length-percentage>]&&[[top|bottom]<length-percentage>]]",
	
	/* https://drafts.csswg.org/css-lists-3 */

	east_asian_variant_values:"[jis78|jis83|jis90|jis04|simplified|traditional]",

	alphavalue: '<number>',

	box: `border-box|padding-box|content-box`,

	/*Font-Size: www.w3.org/TR/CSS2/fonts.html#propdef-font-size */
	absolute_size: `xx-small|x-small|small|medium|large|x-large|xx-large`,
	relative_size: `larger|smaller`,

	/*https://www.w3.org/TR/css-backgrounds-3/*/

	bg_layer: `<bg_image>||<bg_position>[/<bg_size>]?||<repeat_style>||<attachment>||<box>||<box>`,
	final_bg_layer: `<background_color>||<bg_image>||<bg_position>[/<bg_size>]?||<repeat_style>||<attachment>||<box>||<box>`,
	bg_image: `<url>|<gradient>|none`,
	repeat_style: `repeat-x|repeat-y|[repeat|space|round|no-repeat]{1,2}`,
	background_attachment: `<attachment>#`,
	bg_size: `<length_percentage>|auto]{1,2}|cover|contain`,
	bg_position: `[[left|center|right|top|bottom|<length_percentage>]|[left|center|right|<length_percentage>][top|center|bottom|<length_percentage>]|[center|[left|right]<length_percentage>?]&&[center|[top|bottom]<length_percentage>?]]`,
	attachment: `scroll|fixed|local`,
	line_style: `none|hidden|dotted|dashed|solid|double|groove|ridge|inset|outset`,
	line_width: `thin|medium|thick|<length>`,
	shadow: `inset?&&<length>{2,4}&&<color>?`,

	/* Font https://www.w3.org/TR/css-fonts-4/#family-name-value */
	
	family_name: `<fontname>`,
	generic_family: `serif|sans-serif|cursive|fantasy|monospace`,
	
	/* Identifier https://drafts.csswg.org/css-values-4/ */

	identifier: `<id>`,
	custom_ident: `<id>`,

	/* https://drafts.csswg.org/css-timing-1/#typedef-timing-function */

	timing_function: `linear|<cubic_bezier_timing_function>|<step_timing_function>|<frames_timing_function>`,
	cubic_bezier_timing_function: `<cubic_bezier>`,
	step_timing_function: `step-start|step-end|'steps()'`,
	frames_timing_function: `'frames()'`,

	/* https://drafts.csswg.org/css-transitions-1/ */

	single_animation_fill_mode: `none|forwards|backwards|both`,
	single_animation_play_state: `running|paused`,
	single_animation_direction: `normal|reverse|alternate|alternate-reverse`,
	single_animation_iteration_count: `infinite|<number>`,
	single_transition_property: `all|<custom_ident>`,
	single_transition: `[none|<single_transition_property>]||<time>||<timing_function>||<time>`,

	/* CSS3 Animation https://drafts.csswg.org/css-animations-1/ */

	single_animation: `<time>||<timing_function>||<time>||<single_animation_iteration_count>||<single_animation_direction>||<single_animation_fill_mode>||<single_animation_play_state>||[none|<keyframes_name>]`,
	keyframes_name: `<string>`,

	/* CSS3 Stuff */
	length_percentage: `<length>|<percentage>`,
	frequency_percentage: `<frequency>|<percentage>`,
	angle_percentage: `<angle>|<percentage>`,
	time_percentage: `<time>|<percentage>`,
	number_percentage: `<number>|<percentage>`,

	/*CSS Clipping https://www.w3.org/TR/css-masking-1/#clipping */
	clip_path: `<clip_source>|[<basic_shape>||<geometry_box>]|none`,
	clip_source: `<url>`,
	shape_box: `<box>|margin-box`,
	geometry_box: `<shape_box>|fill-box|stroke-box|view-box`,
	basic_shape: `<CSS_Shape>`,
	ratio: `<integer>/<integer>`,

	/* https://www.w3.org/TR/css-fonts-3/*/
	common_lig_values        : `[ common-ligatures | no-common-ligatures ]`,
	discretionary_lig_values : `[ discretionary-ligatures | no-discretionary-ligatures ]`,
	historical_lig_values    : `[ historical-ligatures | no-historical-ligatures ]`,
	contextual_alt_values    : `[ contextual | no-contextual ]`,

	//Display
	display_outside  : `block | inline | run-in`,
	display_inside   : `flow | flow-root | table | flex | grid | ruby`,
	display_listitem : `<display_outside>? && [ flow | flow-root ]? && list-item`,
	display_internal : `table-row-group | table-header-group | table-footer-group | table-row | table-cell | table-column-group | table-column | table-caption | ruby-base | ruby-text | ruby-base-container | ruby-text-container`,
	display_box      : `contents | none`,
	display_legacy   : `inline-block | inline-table | inline-flex | inline-grid`,
};

const media_feature_definitions = {
	width: "<m_width>",
	min_width: "<m_max_width>",
	max_width: "<m_min_width>",
	height: "<m_height>",
	min_height: "<m_min_height>",
	max_height: "<m_max_height>",
	orientation: "portrait  | landscape",
	aspect_ratio: "<ratio>",
	min_aspect_ratio: "<ratio>",
	max_aspect_ratio: "<ratio>",
	resolution: "<length>",
	min_resolution: "<length>",
	max_resolution: "<length>",
	scan: "progressive|interlace",
	grid: "",
	monochrome: "",
	min_monochrome: "<integer>",
	max_monochrome: "<integer>",
	color: "",
	min_color: "<integer>",
	max_color: "<integer>",
	color_index: "",
	min_color_index: "<integer>",
	max_color_index: "<integer>",

};

/**
 * Used to _bind_ a rule to a CSS selector.
 * @param      {string}  selector        The raw selector string value
 * @param      {array}  selector_array  An array of selector group identifiers.
 * @memberof module:wick~internals.css
 * @alias CSSSelector
 */
class CSSSelector {

    constructor(value = "", value_array = []) {

        /**
         * The raw selector string value
         * @package
         */
        this.v = value;

        /**
         * Array of separated selector strings in reverse order.
         * @package
         */
        this.a = value_array;

        // CSS Rulesets the selector is member of .
        this.r = null;

        // CSS root the selector is a child of. 
        this.root = null;
    }

    get id() {
        return this.v.join("");
    }
    /**
     * Returns a string representation of the object.
     * @return     {string}  String representation of the object.
     */
    toString(off = 0) {
        let offset = ("    ").repeat(off);

        let str = `${offset}${this.v.join(", ")} {\n`;

        if (this.r)
            str += this.r.toString(off + 1);

        return str + `${offset}}\n`;
    }

    addProp(string) {
        let root = this.r.root;
        if (root) {
            let lex = whind$1(string);
            while (!lex.END)
                root.parseProperty(lex, this.r, property_definitions);
        }
    }

    removeRule(){
        if(this.r)
            this.r.decrementRef();

        this.r = null;
    }

    addRule(rule = null){
        
        this.removeRule();

        if(rule !== null)
            rule.incrementRef();

        this.r = rule;
    }

}

var step = 0;

function checkDefaults(lx) {
    const tx = lx.tx;
    /* https://drafts.csswg.org/css-cascade/#inherited-property */
    switch (lx.tx) {
        case "initial": //intentional
        case "inherit": //intentional
        case "unset": //intentional
        case "revert": //intentional
            if (!lx.pk.pk.END) // These values should be the only ones present. Failure otherwise.
                return 0; // Default value present among other values. Invalid
            return 1; // Default value present only. Valid
    }
    return 2; // Default value not present. Ignore
}

class JUX { /* Juxtaposition */

    constructor() {
        this.id = JUX.step++;
        this.r = [NaN, NaN];
        this.terms = [];
        this.prop = null;
        this.name = "";
        this.virtual = false;
        this.REQUIRE_COMMA = false;
    }
    mergeValues(existing_v, new_v) {
        if (existing_v)
            if (existing_v.v) {
                if (Array.isArray(existing_v.v))
                    existing_v.v.push(new_v.v);
                else {
                    existing_v.v = [existing_v.v, new_v.v];
                }
            } else
                existing_v.v = new_v.v;
    }

    seal() {

    }

    sp(value, rule) { /* Set Property */
        if (this.prop) {
            if (value)
                if (Array.isArray(value) && value.length === 1 && Array.isArray(value[0]))
                    rule[this.prop] = value[0];
                else
                    rule[this.prop] = value;
        }
    }

    isRepeating() {
        return !(isNaN(this.r[0]) && isNaN(this.r[1]));
    }

    parse(lx, rule, out_val, ROOT = true) {
            
        if (typeof(lx) == "string")
            lx = whind$1(lx);

        let r = out_val || { v: null },
            bool = false;

        if (ROOT) {
            switch (checkDefaults(lx)) {
                case 1:
                    this.sp(lx.tx, rule);
                    return true;
                case 0:
                    return false;
            }

            bool = this.innerParser(lx, rule, out_val, r, this.start, this.end);

            //if (!lx.END)
            //    return false;
            //else
                this.sp(r.v, rule);
        } else
            bool = this.innerParser(lx, rule, out_val, r, this.start, this.end);

        return bool;
    }

    checkForComma(lx) {
        if (this.REQUIRE_COMMA) {
            if (lx.ch == ",")
                lx.next();
            else return false;
        }
        return true;
    }

    innerParser(lx, rule, out_val, r, start, end) {

        let bool = false;

        repeat:
            for (let j = 0; j < end && !lx.END; j++) {
                let copy = lx.copy();
                let temp_r = { v: null };

                for (let i = 0, l = this.terms.length; i < l; i++) {

                    let term = this.terms[i];

                    if (!term.parse(copy, rule, temp_r, false)) {
                        if (!term.OPTIONAL) {
                            break repeat;
                        }
                    }
                }

                if (temp_r.v)
                    this.mergeValues(r, temp_r);

                lx.sync(copy);

                bool = true;

                if (!this.checkForComma(lx))
                    break;
            }

        if (bool)
            //console.log("JUX", s, bool)
            return bool;
    }

    get start() {
        return isNaN(this.r[0]) ? 1 : this.r[0];
    }
    set start(e) {}

    get end() {
        return isNaN(this.r[1]) ? 1 : this.r[1];
    }
    set end(e) {}

    get OPTIONAL() { return this.r[0] === 0 }
    set OPTIONAL(a) {}
}
JUX.step = 0;
class AND extends JUX {
    innerParser(lx, rule, out_val, r, start, end) {

        const
            PROTO = new Array(this.terms.length),
            l = this.terms.length;

        let bool = false;

        repeat:
            for (let j = 0; j < end && !lx.END; j++) {

                const
                    HIT = PROTO.fill(0),
                    copy = lx.copy(),
                    temp_r = { v: null };

                and:
                    while (true) {
                        let FAILED = false;



                        for (let i = 0; i < l; i++) {

                            if (HIT[i] === 2) continue;

                            let term = this.terms[i];

                            if (!term.parse(copy, rule, temp_r, false)) {
                                if (term.OPTIONAL)
                                    HIT[i] = 1;
                            } else {
                                HIT[i] = 2;
                                continue and;
                            }
                        }

                        if (HIT.reduce((a, v) => a * v, 1) === 0)
                            break repeat;

                        break
                    }



                lx.sync(copy);

                if (temp_r.v)
                    this.mergeValues(r, temp_r);

                bool = true;

                if (!this.checkForComma(lx))
                    break;
            }

        return bool;
    }
}

class OR extends JUX {
    innerParser(lx, rule, out_val, r, start, end) {

        const
            PROTO = new Array(this.terms.length),
            l = this.terms.length;

        let
            bool = false,
            NO_HIT = true;

        repeat:
            for (let j = 0; j < end && !lx.END; j++) {

                const HIT = PROTO.fill(0);
                let copy = lx.copy();
                let temp_r = { v: null };

                or:
                    while (true) {
                        let FAILED = false;
                        for (let i = 0; i < l; i++) {

                            if (HIT[i] === 2) continue;

                            let term = this.terms[i];

                            if (term.parse(copy, temp_r, r, false)) {
                                NO_HIT = false;
                                HIT[i] = 2;
                                continue or;
                            }
                        }

                        if (NO_HIT) break repeat;

                        break;
                    }

                lx.sync(copy);

                if (temp_r.v)
                    this.mergeValues(r, temp_r);

                bool = true;

                if (!this.checkForComma(lx))
                    break;
            }

        return bool;
    }
}

OR.step = 0;

class ONE_OF extends JUX {
    innerParser(lx, rule, out_val, r, start, end) {

        let BOOL = false;

        let j;
        for (j = 0; j < end && !lx.END; j++) {
            let bool = false;
            let copy = lx.copy();
            let temp_r = { v: null };

            for (let i = 0, l = this.terms.length; i < l; i++) {
                ////if (!this.terms[i]) console.log(this)
                if (this.terms[i].parse(copy, rule, temp_r, false)) {
                    bool = true;
                    break;
                }
            }

            if (!bool)
                break;

            lx.sync(copy);
            
            if (temp_r.v)
                this.mergeValues(r, temp_r);

            BOOL = true;

            if (!this.checkForComma(lx))
                break;
        }

        return BOOL;
    }
}

ONE_OF.step = 0;

class ValueTerm {

    constructor(value, getPropertyParser, definitions, productions) {

        if(value instanceof JUX)
            return value;
        

        this.value = null;

        const IS_VIRTUAL = { is: false };
        
        if(typeof(value) == "string")
            var u_value = value.replace(/\-/g,"_");

        if (!(this.value = types[u_value]))
            this.value = getPropertyParser(u_value, IS_VIRTUAL, definitions, productions);

        this.prop = "";

        if (!this.value)
            return new LiteralTerm(value);

        if(this.value instanceof JUX){
            if (IS_VIRTUAL.is)
                this.value.virtual = true;
            return this.value;
        }

    }

    seal(){}

    parse(l, rule, r, ROOT = true) {
        if (typeof(l) == "string")
            l = whind$1(l);

        if (ROOT) {

            switch(checkDefaults(l)){
                case 1:
                rule[this.prop] = l.tx;
                return true;
                case 0:
                return false;
            }
        }

        let rn = { v: null };

        let v = this.value.parse(l, rule, rn);

        if (rn.v) {
            if (r)
                if (r.v) {
                    if (Array.isArray(r.v)) {
                        if (Array.isArray(rn.v) && !this.virtual)
                            r.v = r.v.concat(rn.v);
                        else
                            r.v.push(rn.v);
                    } else {
                        if (Array.isArray(rn.v) && !this.virtual)
                            r.v = ([r.v]).concat(rn.v);
                        else
                            r.v = [r.v, rn.v];
                    }
                } else
                    r.v = (this.virtual) ? [rn.v] : rn.v;

            if (this.prop && !this.virtual)
                rule[this.prop] = rn.v;

            return true;

        } else if (v) {
            if (r)
                if (r.v) {
                    if (Array.isArray(r.v))
                        r.v.push(v);
                    else
                        r.v = [r.v, v];
                } else
                    r.v = v;

            if (this.prop && !this.virtual && ROOT)
                rule[this.prop] = v;

            return true;
        } else
            return false;
    }

    get OPTIONAL (){ return false }
    set OPTIONAL (a){}
}

class LiteralTerm {

    constructor(value, type) {
        
        if(type == whind$1.types.string)
            value = value.slice(1,-1);

        this.value = value;
        this.prop = null;
    }

    seal(){}

    parse(l, rule, r, root = true) {

        if (typeof(l) == "string")
            l = whind$1(l);

        if (root) {
            switch(checkDefaults(l)){
                case 1:
                rule[this.prop] = l.tx;
                return true;
                case 0:
                return false;
            }
        }

        let v = l.tx;
        if (v == this.value) {
            l.next();

            if (r)
                if (r.v) {
                    if (Array.isArray(r.v))
                        r.v.push(v);
                    else {
                        let t = r.v;
                        r.v = [t, v];
                    }
                } else
                    r.v = v;

            if (this.prop  && !this.virtual && root)
                rule[this.prop] = v;

            return true;
        }
        return false;
    }

    get OPTIONAL (){ return false }
    set OPTIONAL (a){}
}

class SymbolTerm extends LiteralTerm {
    parse(l, rule, r) {
        if (typeof(l) == "string")
            l = whind$1(l);

        if (l.tx == this.value) {
            l.next();
            return true;
        }

        return false;
    }
}

//import util from "util"
const standard_productions = {
    JUX,
    AND,
    OR,
    ONE_OF,
    LiteralTerm,
    ValueTerm,
    SymbolTerm
};
function getPropertyParser(property_name, IS_VIRTUAL = { is: false }, definitions = null, productions = standard_productions) {

    let prop = definitions[property_name];

    if (prop) {

        if (typeof(prop) == "string") {
            prop = definitions[property_name] = CreatePropertyParser(prop, property_name, definitions, productions);
        }
        prop.name = property_name;
        return prop;
    }

    if (!definitions.__virtual)
        definitions.__virtual = Object.assign({}, virtual_property_definitions);

    prop = definitions.__virtual[property_name];

    if (prop) {

        IS_VIRTUAL.is = true;

        if (typeof(prop) == "string") {
            prop = definitions.__virtual[property_name] = CreatePropertyParser(prop, "", definitions, productions);
            prop.virtual = true;
            prop.name = property_name;
        }

        return prop;
    }

    return null;
}


function CreatePropertyParser(notation, name, definitions, productions) {

    const l = whind$1(notation);
    const important = { is: false };

    let n = d$1(l, definitions, productions);
    
    n.seal();

    //if (n instanceof productions.JUX && n.terms.length == 1 && n.r[1] < 2)
    //    n = n.terms[0];

    n.prop = name;
    n.IMP = important.is;

    /*//******** DEV 
    console.log("")
    console.log("")
    console.log(util.inspect(n, { showHidden: false, depth: null })) 
    //********** END Dev*/

    return n;
}

function d$1(l, definitions, productions, super_term = false, oneof_group = false, or_group = false, and_group = false, important = null) {
    let term, nt, v;
    const { JUX: JUX$$1, AND: AND$$1, OR: OR$$1, ONE_OF: ONE_OF$$1, LiteralTerm: LiteralTerm$$1, ValueTerm: ValueTerm$$1, SymbolTerm: SymbolTerm$$1 } = productions;

    let GROUP_BREAK = false;

    while (!l.END) {

        switch (l.ch) {
            case "]":
                return term;
                break;
            case "[":

                v = d$1(l.next(), definitions, productions, true);
                l.assert("]");
                v = checkExtensions(l, v, productions);

                if (term) {
                    if (term instanceof JUX$$1 && term.isRepeating()) term = foldIntoProduction(productions, new JUX$$1, term);
                    term = foldIntoProduction(productions, term, v);
                } else
                    term = v;
                break;

            case "<":

                v = new ValueTerm$$1(l.next().tx, getPropertyParser, definitions, productions);
                l.next().assert(">");

                v = checkExtensions(l, v, productions);

                if (term) {
                    if (term instanceof JUX$$1 /*&& term.isRepeating()*/) term = foldIntoProduction(productions, new JUX$$1, term);
                    term = foldIntoProduction(productions, term, v);
                } else {
                    term = v;
                }
                break;

            case "&":

                if (l.pk.ch == "&") {

                    if (and_group)
                        return term;

                    nt = new AND$$1();

                    if (!term) throw new Error("missing term!");

                    nt.terms.push(term);

                    l.sync().next();

                    while (!l.END) {
                        nt.terms.push(d$1(l, definitions, productions, super_term, oneof_group, or_group, true, important));
                        if (l.ch !== "&" || l.pk.ch !== "&") break;
                        l.a("&").a("&");
                    }

                    return nt;
                }
                break;
            case "|":

                {
                    if (l.pk.ch == "|") {

                        if (or_group || and_group)
                            return term;

                        nt = new OR$$1();

                        nt.terms.push(term);

                        l.sync().next();

                        while (!l.END) {
                            nt.terms.push(d$1(l, definitions, productions, super_term, oneof_group, true, and_group, important));
                            if (l.ch !== "|" || l.pk.ch !== "|") break;
                            l.a("|").a("|");
                        }

                        return nt;

                    } else {

                        if (oneof_group || or_group || and_group)
                            return term;

                        nt = new ONE_OF$$1();

                        nt.terms.push(term);

                        l.next();

                        while (!l.END) {
                            nt.terms.push(d$1(l, definitions, productions, super_term, true, or_group, and_group, important));
                            if (l.ch !== "|") break;
                            l.a("|");
                        }

                        return nt;
                    }
                }
                break;
            default:

                v = (l.ty == l.types.symbol) ? new SymbolTerm$$1(l.tx) : new LiteralTerm$$1(l.tx, l.ty);
                l.next();
                v = checkExtensions(l, v, productions);

                if (term) {
                    if (term instanceof JUX$$1 /*&& (term.isRepeating() || term instanceof ONE_OF)*/) term = foldIntoProduction(productions, new JUX$$1, term);
                    term = foldIntoProduction(productions, term, v);
                } else {
                    term = v;
                }
        }
    }

    return term;
}

function checkExtensions(l, term, productions) {
    outer:
    while (true) {

        switch (l.ch) {
            case "!":
                /* https://www.w3.org/TR/CSS21/cascade.html#important-rules */
                term.IMPORTANT = true;
                l.next();
                continue outer;
            case "{":
                term = foldIntoProduction(productions, term);
                term.r[0] = parseInt(l.next().tx);
                if (l.next().ch == ",") {
                    l.next();
                    if (l.pk.ch == "}") {

                        term.r[1] = parseInt(l.tx);
                        l.next();
                    } else {
                        term.r[1] = Infinity;
                    }
                } else
                    term.r[1] = term.r[0];
                l.a("}");
                break;
            case "*":
                term = foldIntoProduction(productions, term);
                term.r[0] = 0;
                term.r[1] = Infinity;
                l.next();
                break;
            case "+":
                term = foldIntoProduction(productions, term);
                term.r[0] = 1;
                term.r[1] = Infinity;
                l.next();
                break;
            case "?":
                term = foldIntoProduction(productions, term);
                term.r[0] = 0;
                term.r[1] = 1;
                l.next();
                break;
            case "#":
                term = foldIntoProduction(productions, term);
                term.terms.push(new SymbolTerm(","));
                term.r[0] = 1;
                term.r[1] = Infinity;
                term.REQUIRE_COMMA = true;
                l.next();
                if (l.ch == "{") {
                    term.r[0] = parseInt(l.next().tx);
                    term.r[1] = parseInt(l.next().a(",").tx);
                    l.next().a("}");
                }
                break;
        }
        break;
    }
    return term;
}

function foldIntoProduction(productions, term, new_term = null) {
    if (term) {
        if (!(term instanceof productions.JUX)) {
            let nr = new productions.JUX();
            nr.terms.push(term);
            term = nr;
        }
        if (new_term) {
            term.seal();
            term.terms.push(new_term);
        }
        return term;
    }
    return new_term;
}

/**
 * Checks to make sure token is an Identifier.
 * @param      {Lexer} - A Lexical tokenizing object supporting methods found in {@link Lexer}.
 * @alias module:wick~internals.css.elementIsIdentifier
 */
function _eID_(lexer) {
    if (lexer.ty != lexer.types.id) lexer.throw("Expecting Identifier");
}

/**
 * The empty CSSRule instance
 * @alias module:wick~internals.css.empty_rule
 */
const er = Object.freeze(new CSSRule());

class _selectorPart_ {
    constructor() {
        this.e = "";
        this.ss = [];
        this.c = "";
    }
}
class _mediaSelectorPart_ {
    constructor() {
        this.id = "";
        this.props = {};
        this.c = "";
    }
}

class CSSRuleBody {
    
    constructor() {

        // 
        this.media_selector = null;
        
        // All selectors indexed by their value
        this._selectors_ = {};

        //All selectors in order of appearance
        this._sel_a_ = [];

        //
        this.rules = []; 
    }

    _applyProperties_(lexer, rule) {
        while (!lexer.END && lexer.tx !== "}") this.parseProperty(lexer, rule, property_definitions);
        lexer.next();
    }

    /**
     * Gets the last rule matching the selector
     * @param      {string}  string  The string
     * @return     {CSSRule}  The combined set of rules that match the selector.
     */
    getRule(string, r) {
        let selector = this._selectors_[string];
        if (selector) return selector.r;
        return r;
    }


    /**
     * Hook method for hijacking the property parsing function. Return true if default property parsing should not take place
     * @param      {Lexer}   value_lexer    The value lexer
     * @param      {<type>}   property_name  The property name
     * @param      {<type>}   rule           The rule
     * @return     {boolean}  The property hook.
     */
    _getPropertyHook_(value_lexer, property_name, rule) {
        return false;
    }

    /**
     * Used to match selectors to elements
     * @param      {ele}   ele       The ele
     * @param      {string}   criteria  The criteria
     * @return     {boolean}  { description_of_the_return_value }
     * @private
     */
    matchCriteria(ele, criteria) {
        if (criteria.e && ele.tagName !== criteria.e.toUpperCase()) return false;
        outer: for (let i = 0, l = criteria.ss.length; i < l; i++) {
            let ss = criteria.ss[i];
            switch (ss.t) {
                case "attribute":
                    let lex = whind$1(ss.v);
                    if (lex.ch == "[" && lex.pk.ty == lex.types.id) {
                        let id = lex.sync().tx;
                        let attrib = ele.getAttribute(id);
                        if (!attrib) return;
                        if (lex.next().ch == "=") {
                            let value = lex.next().tx;
                            if (attrib !== value) return false;
                        }
                    }
                    break;
                case "pseudo":
                    debugger;
                    break;
                case "class":
                    let class_list = ele.classList;
                    for (let j = 0, jl = class_list.length; j < jl; j++) {
                        if (class_list[j] == ss.v) continue outer;
                    }
                    return false;
                case "id":
                    if (ele.id !== ss.v) return false;
            }
        }
        return true;
    }

    matchMedia(win = window) {

        if (this.media_selector) {
            for (let i = 0; i < this.media_selector.length; i++) {
                let m = this.media_selector[i];
                let props = m.props;
                for (let a in props) {
                    let prop = props[a];
                    if (!prop(win))
                        return false;
                }
            }
        }

        return true;
    }

    
    /* 
        Retrieves the set of rules from all matching selectors for an element.
            element HTMLElement - An DOM element that should be matched to applicable rules. 
    */
    getApplicableRules(element, rule = new CSSRule(), win = window) {

        if (!this.matchMedia(win)) return;

        let gen = this.getApplicableSelectors(element),
            sel = null;

        while (sel = gen.next().value) rule.merge(sel.r);
    }

    * getApplicableSelectors(element) {
        for (let j = 0, jl = this._sel_a_.length; j < jl; j++) {
            let ancestor = element;
            let selector = this._sel_a_[j];
            let sn = selector.a;
            let criteria = null;
            outer: for (let x = 0; x < sn.length; x++) {

                let sa = sn[x];

                inner: for (let i = 0, l = sa.length; i < l; i++) {
                    criteria = sa[i];
                    switch (criteria.c) {
                        case "child":
                            if (!(ancestor = ancestor.parentElement) || !this.matchCriteria(ancestor, criteria)) continue outer;
                            break;
                        case "preceded":
                            while ((ancestor = ancestor.previousElementSibling))
                                if (this.matchCriteria(ancestor, criteria)) continue inner;
                            continue outer;
                        case "immediately preceded":
                            if (!(ancestor = ancestor.previousElementSibling) || !this.matchCriteria(ancestor, criteria)) continue outer;
                            break;
                        case "descendant":
                            while ((ancestor = ancestor.parentElement))
                                if (this.matchCriteria(ancestor, criteria)) continue inner;
                            continue outer;
                        default:
                            if (!this.matchCriteria(ancestor, criteria)) continue outer;
                    }
                }
                yield selector;
            }
        }
    }

    /**
     * Parses properties
     * @param      {Lexer}  lexer        The lexer
     * @param      {<type>}  rule         The rule
     * @param      {<type>}  definitions  The definitions
     */
    parseProperty(lexer, rule, definitions) {
        const name = lexer.tx.replace(/\-/g, "_");

        //Catch any comments
        if (lexer.ch == "/") {
            lexer.comment(true);
            let bool = this.parseProperty(lexer, rule, definitions);
            return 
        }
        lexer.next().a(":");
        //allow for short circuit < | > | =
        const p = lexer.pk;
        while ((p.ch !== "}" && p.ch !== ";") && !p.END) {
            //look for end of property;
            p.next();
        }
        const out_lex = lexer.copy();
        lexer.sync();
        out_lex.fence(p);
        if (!this._getPropertyHook_(out_lex, name, rule)) {
            try {
                const IS_VIRTUAL = {
                    is: false
                };
                const parser = getPropertyParser(name, IS_VIRTUAL, definitions);
                if (parser && !IS_VIRTUAL.is) {
                    if (!rule.props) rule.props = {};
                    parser.parse(out_lex, rule.props);
                } else
                    //Need to know what properties have not been defined
                    console.warn(`Unable to get parser for css property ${name}`);
            } catch (e) {
                console.log(e);
            }
        }
        if (lexer.ch == ";") lexer.next();
    }

    /** 
    Parses a selector up to a token '{', creating or accessing necessary rules as it progresses. 

    Reference: https://www.w3.org/TR/selectors-3/ 
    https://www.w3.org/TR/css3-mediaqueries/
    https://www.w3.org/TR/selectors-3/

    @param {Lexer} - A Lexical tokenizing object supporting methods found in {@link Lexer}.

    @protected

    */
    parseSelector(lexer) {
        let rule = this,
            id = "",
            selector_array = [],
            selectors_array = [];
        let start = lexer.pos;
        let selectors = [];
        let sel = new _selectorPart_(),
            RETURN = false;
        while (!lexer.END) {
            if (!sel) sel = new _selectorPart_();
            switch (lexer.tx) {
                case "{":
                    RETURN = true;
                case ",":
                    selector_array.unshift(sel);
                    selectors_array.push(selector_array);
                    selector_array = [];
                    selectors.push(lexer.s(start).trim().slice(0));
                    sel = new _selectorPart_();
                    if (RETURN) return new CSSSelector(selectors, selectors_array, this);
                    lexer.next();
                    start = lexer.pos;
                    break;
                case "[":
                    let p = lexer.pk;
                    while (!p.END && p.next().tx !== "]") {};
                    p.a("]");
                    if (p.END) throw new _Error_("Unexpected end of input.");
                    sel.ss.push({
                        t: "attribute",
                        v: p.s(lexer)
                    });
                    lexer.sync();
                    break;
                case ":":
                    sel.ss.push({
                        t: "pseudo",
                        v: lexer.next().tx
                    });
                    _eID_(lexer);
                    lexer.next();
                    break;
                case ".":
                    sel.ss.push({
                        t: "class",
                        v: lexer.next().tx
                    });
                    _eID_(lexer);
                    lexer.next();
                    break;
                case "#":
                    sel.ss.push({
                        t: "id",
                        v: lexer.next().tx
                    });
                    _eID_(lexer);
                    lexer.next();
                    break;
                case "*":
                    lexer.next();
                    break;
                case ">":
                    sel.c = "child";
                    selector_array.unshift(sel);
                    sel = null;
                    lexer.next();
                    break;
                case "~":
                    sel.c = "preceded";
                    selector_array.unshift(sel);
                    sel = null;
                    lexer.next();
                    break;
                case "+":
                    sel.c = "immediately preceded";
                    selector_array.unshift(sel);
                    sel = null;
                    lexer.next();
                    break;
                default:
                    if (sel.e) {
                        sel.c = "descendant";
                        selector_array.unshift(sel);
                        sel = null;
                    } else {
                        sel.e = lexer.tx;

                        _eID_(lexer);
                        lexer.next();
                    }
                    break;
            }
        }

        selector_array.unshift(sel);
        selectors_array.push(selector_array);
        selectors.push(lexer.s(start).trim().slice(0));
        return new CSSSelector(selectors, selectors_array, this);
    }

    /**
     * Parses CSS string
     * @param      {Lexer} - A Lexical tokenizing object supporting methods found in {@link Lexer}
     * @param      {(Array|CSSRuleBody|Object|_mediaSelectorPart_)}  root    The root
     * @return     {Promise}  A promise which will resolve to a CSSRuleBody
     * @private
     */
    parse(lexer, root, res = null, rej = null) {

        if (root && !this.par) root.push(this);

        return new Promise((res, rej) => {
            
            let selectors = [], l = 0;
            
            while (!lexer.END) {
                switch (lexer.ch) {
                    case "@":
                        lexer.next();
                        switch (lexer.tx) {
                            case "media": //Ignored at this iteration /* https://drafts.csswg.org/mediaqueries/ */
                                //create media query selectors
                                let _med_ = [],
                                    sel = null;
                                while (!lexer.END && lexer.next().ch !== "{") {
                                    if (!sel) sel = new _mediaSelectorPart_();
                                    if (lexer.ch == ",") _med_.push(sel), sel = null;
                                    else if (lexer.ch == "(") {
                                        let start = lexer.next().off;
                                        while (!lexer.END && lexer.ch !== ")") lexer.next();
                                        let out_lex = lexer.copy();
                                        out_lex.off = start;
                                        out_lex.tl = 0;
                                        out_lex.next().fence(lexer);
                                        this.parseProperty(out_lex, sel, media_feature_definitions);
                                        if (lexer.pk.tx.toLowerCase() == "and") lexer.sync();
                                    } else {
                                        let id = lexer.tx.toLowerCase(),
                                            condition = "";
                                        if (id === "only" || id === "not")
                                            (condition = id, id = lexer.next().tx);
                                        sel.c = condition;
                                        sel.id = id;
                                        if (lexer.pk.tx.toLowerCase() == "and") lexer.sync();
                                    }
                                }
                                //debugger
                                lexer.a("{");
                                if (sel)
                                    _med_.push(sel);

                                if (_med_.length == 0)
                                    this.parse(lexer, null); // discard results
                                else {
                                    let media_root = new this.constructor();
                                    media_root.media_selector = _med_;
                                    res(media_root.parse(lexer, root).then(b => {
                                        let body = new this.constructor();
                                        return body.parse(lexer, root);
                                    }));
                                }
                                continue;
                            case "import":
                                /* https://drafts.csswg.org/css-cascade/#at-ruledef-import */
                                let type;
                                if (type = types.url.parse(lexer.next())) {
                                    lexer.a(";");
                                    /**
                                     * The {@link CSS_URL} incorporates a fetch mechanism that returns a Promise instance.
                                     * We use that promise to hook into the existing promise returned by CSSRoot#parse,
                                     * executing a new parse sequence on the fetched string data using the existing CSSRoot instance,
                                     * and then resume the current parse sequence.
                                     * @todo Conform to CSS spec and only parse if @import is at the head of the CSS string.
                                     */
                                    return type.fetchText().then((str) =>
                                        //Successfully fetched content, proceed to parse in the current root.
                                        //let import_lexer = ;
                                        res(this.parse(whind$1(str), this).then((r) => this.parse(lexer, r)))
                                        //parse returns Promise. 
                                        // return;
                                    ).catch((e) => res(this.parse(lexer)));
                                } else {
                                    //Failed to fetch resource, attempt to find the end to of the import clause.
                                    while (!lexer.END && lexer.next().tx !== ";") {}
                                    lexer.next();
                                }
                        }
                        break;
                    case "/":
                        lexer.comment(true);
                        break;
                    case "}":
                        lexer.next();
                        return res(this);
                    case "{":
                        //Check to see if a rule body for the selector exists already.
                        let MERGED = false;
                        let rule = new CSSRule(this);
                        this._applyProperties_(lexer.next(), rule);
                        for (let i = -1, sel = null; sel = selectors[++i];)
                            if (sel.r) {sel.r.merge(rule); MERGED = true;}
                            else sel.addRule(rule);

                        if(!MERGED){
                            this.rules.push(rule);
                        }
                            
                        selectors.length = l = 0;
                        continue;
                }

                let selector = this.parseSelector(lexer, this);

                if (selector) {
                    selector.root = this;
                    if (!this._selectors_[selector.id]) {
                        l = selectors.push(selector);
                        this._selectors_[selector.id] = selector;
                        this._sel_a_.push(selector);
                    } else l = selectors.push(this._selectors_[selector.id]);
                }
            }

            return res(this);
        });

    }

    isSame(inCSSRuleBody) {
        if (inCSSRuleBody instanceof CSSRuleBody) {
            if (this.media_selector) {
                if (inCSSRuleBody.media_selector) {
                    //TODO compare media selectors;
                }
            } else if (!inCSSRuleBody.media_selector)
                return true;
        }
        return false;
    }

    merge(inCSSRuleBody) {
        this.parse(whind$1(inCSSRuleBody + ""));
    }

    /**
     * Gets the media.
     * @return     {Object}  The media.
     * @public
     */
    getMedia(win = window) {
        let start = this;
        this._media_.forEach((m) => {
            if (m._med_) {
                let accept = true;
                for (let i = 0, l = m._med_.length; i < l; i++) {
                    let ms = m._med_[i];
                    if (ms.props) {
                        for (let n in ms.props) {
                            if (!ms.props[n](win)) accept = false;
                        }
                    }
                    //if(not)
                    //    accept = !accept;
                    if (accept)
                        (m._next_ = start, start = m);
                }
            }
        });
        return start;
    }

    updated() {
        this.par.updated();
    }

    toString(off = 0) {
        let str = "";
        for (let i = 0; i < this._sel_a_.length; i++) {
            str += this._sel_a_[i].toString(off);
        }
        return str;
    }

    createSelector(selector_value) {
        let selector = this.parseSelector(whind$1(selector_value));

        if (selector)
            if (!this._selectors_[selector.id]) {
                this._selectors_[selector.id] = selector;
                this._sel_a_.push(selector);
                const rule = new CSSRule(this);
                selector.addRule(rule);
                this.rules.push(rule);
            } else
                selector = this._selectors_[selector.id];

        return selector;
    }
}

LinkedList.mixinTree(CSSRuleBody);

class Segment {
    constructor(parent) {
        this.parent = null;

        this.css_val = "";

        this.val = document.createElement("span");
        this.val.classList.add("prop_value");

        this.list = document.createElement("div");
        this.list.classList.add("prop_list");
        //this.list.style.display = "none"

        this.ext = document.createElement("button");
        this.ext.classList.add("prop_extender");
        this.ext.style.display = "none";
        this.ext.setAttribute("action","ext");

        this.menu_icon = document.createElement("span");
        this.menu_icon.classList.add("prop_list_icon");
        //this.menu_icon.innerHTML = "+"
        this.menu_icon.style.display = "none";
        this.menu_icon.setAttribute("superset", false);
        this.menu_icon.appendChild(this.list);

        this.element = document.createElement("span");
        this.element.classList.add("prop_segment");

        this.element.appendChild(this.menu_icon);
        this.element.appendChild(this.val);
        this.element.appendChild(this.ext);

        this.value_list = [];
        this.subs = [];
        this.old_subs = [];
        this.sib = null;
        this.value_set;
        this.HAS_VALUE = false;
        this.DEMOTED = false;

        this.element.addEventListener("mouseover", e => {
            //this.setList();
        });
    }

    destroy() {
        this.parent = null;
        this.element = null;
        this.val = null;
        this.list = null;
        this.ext = null;
        this.menu_icon = null;
        this.subs.forEach(e => e.destroy());
        this.subs = null;
    }

    reset() {
        this.list.innerHTML = "";
        this.val.innerHTML = "";
        //this.subs.forEach(e => e.destroy);
        this.subs = [];
        this.setElement = null;
        this.changeEvent = null;
    }

    clearSegments(){
        if(this.subs.length > 0){
            this.val.innerHTML = "";
            for(let i = 0; i < this.subs.length; i++){
                let sub = this.subs[i];
                sub.destroy();
            }   
            this.subs.length = 0;
        }
    }

    replaceSub(old_sub, new_sub) {
        for (let i = 0; i < this.subs.length; i++) {
            if (this.subs[i] == old_sub) {
                this.sub[i] = new_sub;
                this.val.replaceChild(old_sub.element, new_sub.element);
                return;
            }
        }
    }

    mount(element) {
        element.appendChild(this.element);
    }


    addSub(seg) {
        this.menu_icon.setAttribute("superset", true);
        seg.parent = this;
        this.subs.push(seg);
        this.val.appendChild(seg.element);
    }

    removeSub(seg) {
        if (seg.parent == this) {
            for (let i = 0; i < this.subs.length; i++) {
                if (this.subs[i] == seg) {
                    this.val.removeChild(seg.element);
                    seg.parent = null;
                    break;
                }
            }
        }
        return seg;
    }

    setList() {
        //if(this.DEMOTED) debugger
        if (this.prod && this.list.innerHTML == "") {
            if (this.DEMOTED || !this.prod.buildList(this.list, this))
                this.menu_icon.style.display = "none";
            else
                this.menu_icon.style.display = "inline-block";
        }
    }
    change(e) {
        if (this.changeEvent)
            this.changeEvent(this.setElement, this, e);
    }

    setValueHandler(element, change_event_function) {
        this.val.innerHTML = "";
        this.val.appendChild(element);

        if (change_event_function) {
            this.setElement = element;
            this.changeEvent = change_event_function;
            this.setElement.onchange = this.change.bind(this);
        }

        this.HAS_VALUE = true;
        //this.menu_icon.style.display = "none";
        this.setList();
    }

    set value(v) {
        this.val.innerHTML = v;
        this.css_val = v;
        this.HAS_VALUE = true;
        this.setList();
    }

    get value_count() {
        if (this.subs.length > 0)
            return this.subs.length
        return (this.HAS_VALUE) ? 1 : 0;
    }

    promote() {

    }

    demote() {
        let seg = new Segment;
        seg.prod = this.prod;
        seg.css_val = this.css_val;

        if (this.change_event_function) {
            seg.changeEvent = this.changeEvent;
            seg.setElement = this.setElement;
            seg.setElement.onchange = seg.change.bind(seg);
        }

        let subs = this.subs;

        if (subs.length > 0) {

            for (let i = 0; i < this.subs.length; i++) 
                seg.addSub(this.subs[i]);
            
        } else {


            let children = this.val.childNodes;

            if (children.length > 0) {
                for (let i = 0, l = children.length; i < l; i++) {
                    seg.val.appendChild(children[0]);
                }
            } else {
                seg.val.innerHTML = this.val.innerHTML;
            }
        }


        this.menu_icon.innerHTML = "";
        this.menu_icon.style.display = "none";
        this.menu_icon.setAttribute("superset", false);
        this.list.innerHTML = "";

        this.reset();

        this.addSub(seg);
        seg.setList();
        
        this.DEMOTED = true;
    }

    addRepeat(seg) {
        if (!this.DEMOTED)
            //Turn self into own sub seg
            this.demote();
        this.addSub(seg);
        seg.setList();
    }

    repeat(prod = this.prod) {
        
        if (this.value_count <= this.end && this.prod.end > 1) {
            this.ext.style.display = "inline-block";

            let root_x = 0;
            let width = 0;
            let diff_width = 0;

            const move = (e) => {

                let diff = e.clientX - root_x;
                let min_diff = diff + diff_width;   

                let EXTENDABLE = this.value_count < this.end;
                let RETRACTABLE = this.value_count > 1;

                if(EXTENDABLE && RETRACTABLE)
                    this.ext.setAttribute("action","both");
                else if(EXTENDABLE)
                    this.ext.setAttribute("action","ext");
                else
                    this.ext.setAttribute("action","ret");

                if (diff > 15 && EXTENDABLE) {
                    let bb = this.element;

                    if (!this.DEMOTED) {
                        //Turn self into own sub seg
                        this.demote();
                    }

                    if (this.old_subs.length > 1) {
                        this.addSub(this.old_subs.pop());
                    } else {
                        prod.default(this, true);
                    }

                    let w = this.element.clientWidth;
                    diff_width = w - width;
                    width = w;
                    root_x += diff_width;

                    return;
                }

                let last_sub = this.subs[this.subs.length - 1];

                if (diff < -5 - last_sub.width && RETRACTABLE) {
                    const sub = this.subs[this.subs.length - 1];
                    this.old_subs.push(sub);
                    this.removeSub(sub);
                    this.subs.length = this.subs.length - 1;

                    let w = this.element.clientWidth;
                    diff_width = w - width;
                    width = w;

                    root_x += diff_width;
                }
            };

            const up = (e) => {
                window.removeEventListener("pointermove", move);
                window.removeEventListener("pointerup", up);
            };

            this.ext.onpointerdown = e => {
                width = this.element.clientWidth;
                root_x = e.clientX;
                window.addEventListener("pointermove", move);
                window.addEventListener("pointerup", up);
            };


            /*
            this.ext.onclick = e => {
                if (this.subs.length == 0)
                    //Turn self into own sub seg
                    this.demote()

                prod.default(this, true);

                if (this.value_count >= this.end)
                    this.ext.style.display = "none";
            }
            */
        } else {
            this.ext.style.display = "none";
        }
        this.setList();
        this.update();
    }

    get width() {
        return this.element.clientWidth;
    }

    update() {
        if (this.parent)
            this.parent.update(this);
        else {
            let val = this.getValue();
        }
    }

    getValue() {
        let val = "";

        if (this.subs.length > 0)
            for (let i = 0; i < this.subs.length; i++)
                val += " " + this.subs[i].getValue();
        else
            val = this.css_val;
        return val;
    }

    toString() {
        return this.getValue();
    }
}

class ValueTerm$1 extends ValueTerm {

    default (seg, APPEND = false, value = null) {
        if (!APPEND) {
            let element = this.value.valueHandler(value, seg);

            if (value) {
                seg.css_val = value.toString();
            }
            seg.setValueHandler(element, (ele, seg, event) => {
                seg.css_val = element.css_value;
                seg.update();
            });
        } else {
            let sub = new Segment();
            let element = this.value.valueHandler(value, sub);
            if (value)
                sub.css_val = value.toString();

            sub.setValueHandler(element, (ele, seg, event) => {
                seg.css_val = element.css_value;
                seg.update();
            });
            //sub.prod = list;
            seg.addSub(sub);
        }
    }

    buildInput(rep = 1, value) {
        let seg = new Segment();
        this.default(seg, false, value);
        return seg;
    }

    parseInput(l, seg, APPEND = false) {
        let val = this.value.parse(l);

        if (val) {
            this.default(seg, APPEND, val);
            return true;
        }

        return val;
    }

    list(ele, slot) {
        let element = document.createElement("div");
        element.classList.add("option");
        element.innerHTML = this.value.label_name || this.value.name;
        ele.appendChild(element);

        element.addEventListener("click", e => {

            slot.innerHTML = this.value;
            if (slot) {
                let element = this.value.valueHandler();
                element.addEventListener("change", e => {

                    let value = element.value;
                    slot.css_val = value;
                    slot.update();
                });
                slot.setValueHandler(element);
            } else {
                let sub = new Segment();
                sub.setValueHandler(this.value);
                seg.addSub(sub);
            }
        });

        return 1;
    }

    setSegment(segment) {
        segment.element.innerHTML = this.value.name;
    }
}

class BlankTerm extends LiteralTerm {

    default (seg, APPEND = false) {

        if (!APPEND) {
            seg.value = "  ";
        } else {
            let sub = new Segment();
            sub.value = "";
            seg.addSub(sub);
        }
    }

    list(ele, slot) {
        let element = document.createElement("div");
        element.innerHTML = this.value;
        element.classList.add("option");
        //        ele.appendChild(element) 

        return 1;
    }

    parseInput(seg, APPEND = false) {
        this.default(seg, APPEND);
        return false;
    }
}

class LiteralTerm$1 extends LiteralTerm {

    default (seg, APPEND = false) {
        if (!APPEND) {
            seg.value = this.value;
        } else {
            let sub = new Segment();
            sub.value = this.value;
            seg.addSub(sub);
        }
    }

    list(ele, slot) {
        let element = document.createElement("div");
        element.innerHTML = this.value;
        element.classList.add("option");
        ele.appendChild(element);
        element.addEventListener("click", e => {
            slot.value = this.value + "";
            slot.update();
        });

        return 1;
    }

    parseInput(l, seg, APPEND = false) {
        if (typeof(l) == "string")
            l = whind(l);

        if (l.tx == this.value) {
            l.next();
            this.default(seg, APPEND);
            return true;
        }

        return false;
    }
}

class SymbolTerm$1 extends LiteralTerm$1 {
    list() { return 0 }

    parseInput(l, seg, r) {
        if (typeof(l) == "string")
            l = whind(l);

        if (l.tx == this.value) {
            l.next();
            let sub = new Segment();
            sub.value = this.value + "";
            seg.addSub(sub);
            return true;
        }

        return false;
    }
}

/**
 * wick internals.
 * @class      JUX (name)
 */
class JUX$1 extends JUX {
    //Adds an entry in options list. 


    createSegment() {
        let segment = new Segment();
        segment.start = this.start;
        segment.end = this.end;
        segment.prod = this;
        return segment
    }

    insertBlank(seg){
        let blank = new BlankTerm;
        blank.parseInput(seg);
    }

    buildList(list, slot) {

        if (!slot) {
            let element = document.createElement("div");
            element.classList.add("prop_slot");
            slot = element;
        }

        if (!list) {
            list = document.createElement("div");
            list.classList.add("prop_slot");
            slot.appendChild(list);
        }
        let count = 0;
        //Build List
        for (let i = 0, l = this.terms.length; i < l; i++) {
            count += this.terms[i].list(list, slot);
        }

        return count > 1;
    }

    seal() {}

    parseInput(lx, segment, list) {

        if (typeof(lx) == "string")
            lx = whind$1(lx);

        return this.pi(lx, segment, list);
    }

    default (segment, EXTENDED = true) {
        let seg = this.createSegment();

        segment.addSub(seg);

        for (let i = 0, l = this.terms.length; i < l; i++) {
            this.terms[i].default(seg, l > 1);
        }
        seg.setList();

        if (!EXTENDED) seg.repeat();
    }

    pi(lx, ele, lister = this, start = this.start, end = this.end) {
        
        let segment = this.createSegment();

        let bool = false,
            j = 0,
            last_segment = null,
            first;

        repeat:
            for (let j = 0; j < end && !lx.END; j++) {
                const REPEAT = j > 0;

                let copy = lx.copy();

                let seg = (REPEAT) ? new Segment : segment;

                seg.prod = this;

                for (let i = 0, l = this.terms.length; i < l; i++) {

                    let term = this.terms[i];

                    if (!term.parseInput(copy, seg, l > 1)) {
                        if (!term.OPTIONAL) {
                            break repeat;
                        }
                    }
                }

                lx.sync(copy);

                bool = true;

                if (!this.checkForComma(lx))
                    break;

                if (REPEAT)
                    segment.addRepeat(seg);
            }

            this.capParse(segment, ele, bool);
            
            return bool;
    }

    capParse(segment, ele, bool){
        if (bool) {
            segment.repeat();
            if (ele)
                ele.addSub(segment);
            this.last_segment = segment;
        }else {
            segment.destroy();
            if(this.OPTIONAL){
                if(ele){
                    let segment = this.createSegment();
                    let blank = new BlankTerm();
                    blank.parseInput(segment);
                    segment.prod = this;
                    
                    segment.repeat();
                    ele.addSub(segment);
                }
            }
        }
    }

    buildInput(repeat = 1, lex) {

        this.last_segment = null;
        let seg = new Segment;
        seg.start = this.start;
        seg.end = this.end;
        seg.prod = this;
        this.parseInput(lex, seg, this);
        return this.last_segment;
    }

    list(){
        
    }
}

class AND$1 extends JUX$1 {

    default (segment, EXTENDED = false) {
        //let seg = this.createSegment();
        //segment.addSub(seg);
        for (let i = 0, l = this.terms.length; i < l; i++) {
            this.terms[i].default(segment, i > 1);
        }
        //seg.repeat();
    }

    list(ele, slot) {

        let name = (this.name) ? this.name.replace("\_\g", " ") : this.terms.reduce((r, t) => r += " | " + t.name, "");
        let element = document.createElement("div");
        element.classList.add("option");
        element.innerHTML = name;
        ele.appendChild(element);

        element.addEventListener("click", e => {
            
            slot.innerHTML = this.value;
            if (slot) {
                slot.clearSegments();
                this.default(slot);
                slot.update();
            } else {
                let sub = new Segment();
                sub.setValueHandler(this.value);
                seg.addSub(sub);
            }
        });

        return 1;
    }

    pi(lx, ele, lister = this, start = 1, end = 1) {

        outer: for (let j = 0; j < end && !lx.END; j++) {
            for (let i = 0, l = this.terms.length; i < l; i++)
                if (!this.terms[i].parseInput(lx, ele)) return (start === 0) ? true : false
        }

        segment.repeat();

        return true;
    }
}
Object.assign(AND$1.prototype, AND.prototype);

class OR$1 extends JUX$1 {

    default (segment, EXTENDED = false) {
        //let seg = this.createSegment();
        //segment.addSub(seg);
        for (let i = 0, l = this.terms.length; i < l; i++) {
            this.terms[i].default(segment, l > 1);
        }
        //seg.repeat();
    }

    buildList(list, slot) {
        return false;
    }

    list(ele, slot) {

        let name = this.terms.reduce((r, t) => r += " | " + t.name, "");
        let element = document.createElement("div");
        element.classList.add("option");
        element.innerHTML = name;
        ele.appendChild(element);

        element.addEventListener("click", e => {
            
            slot.innerHTML = this.value;
            if (slot) {
                slot.clearSegments();
                this.default(slot);
                slot.update();
            } else {
                let sub = new Segment();
                sub.setValueHandler(this.value);
                seg.addSub(sub);
            }
        });

        return 1;
    }

    pi(lx, ele, lister = this, start = this.start, end = this.end) {
        
        let segment = ele; //this.createSegment()

        let bool = false;

        let j = 0;

        let OVERALL_BOOL = false;

        for (let j = 0; j < end && !lx.END; j++) {
            const REPEAT = j > 0;

            let seg = (REPEAT) ? new Segment : segment;


            bool = false;

            this.count = (this.count) ? this.count:this.count = 0;
            
            outer:
            //User "factorial" expression to isolate used results in a continous match. 
            while(true){
                for (let i = 0, l = this.terms.length; i < l; i++) {
                    //if(this.terms[i].count == this.count) continue

                    if (this.terms[i].parseInput(lx, seg, true)) {
                        this.terms[i].count = this.count;
                        OVERALL_BOOL = true;
                        bool = true;
                        continue outer;
                    }
                }
                break;
            }

            {
                //Go through unmatched and make placeholders.
            }

            {
                //Sort everything based on parse 
            }

            if (!bool && j < start) {
                bool = false;
            } else if (start === 0)
                bool = true;
                if (REPEAT)
            segment.addRepeat(seg);
        }

        if (OVERALL_BOOL) {
            segment.repeat();
            //if (ele)
            //    ele.addSub(segment);
            this.last_segment = segment;
        }


        return (!bool && start === 0) ? true : bool;
    }
}

Object.assign(OR$1.prototype, OR.prototype);

class ONE_OF$1 extends JUX$1 {

    default (segment, EXTENDED = false) {
        let seg = this.createSegment();
        this.terms[0].default(seg);
        segment.addSub(seg);
        seg.setList();
        if (!EXTENDED) seg.repeat();
    }

    list(ele, slot) {
        let name = (this.name) ? this.name.replace(/_/g, " ") : this.terms.reduce((r, t) => r += " | " + t.name, "");
        let element = document.createElement("div");
        element.classList.add("option");
        element.innerHTML = name;
        ele.appendChild(element);

        element.addEventListener("click", e => {
            //debugger
            slot.innerHTML = this.value;
            if (slot) {
                slot.clearSegments();
                this.default(slot);
                slot.update();
            } else {
                let sub = new Segment();
                sub.setValueHandler(this.value);
                seg.addSub(sub);
            }
        });

        return 1;
    }

    pi(lx, ele, lister = this, start = this.start, end = this.end) {
        //List
        let segment = this.createSegment();

        //Add new
        let bool = false;

        let j = 0;

        //Parse Input
        for (; j < end && !lx.END; j++) {
            const REPEAT = j > 0;

            let seg = segment;
            
            if(REPEAT){
                seg = new Segment;
                seg.prod = this;
            }

            bool = false;

            for (let i = 0, l = this.terms.length; i < l; i++) {
                bool = this.terms[i].parseInput(lx, seg);
                if (bool) break;
            }

            if (!bool) {
                if (j < start) {
                    bool = false;
                    break;
                }
            }
            if (REPEAT)
                segment.addRepeat(seg);

        }

        this.capParse(segment, ele, bool);

        return  bool;
    }
}

Object.assign(ONE_OF$1.prototype, ONE_OF.prototype);

var ui_productions = /*#__PURE__*/Object.freeze({
    JUX: JUX$1,
    AND: AND$1,
    OR: OR$1,
    ONE_OF: ONE_OF$1,
    LiteralTerm: LiteralTerm$1,
    ValueTerm: ValueTerm$1,
    SymbolTerm: SymbolTerm$1
});

function dragstart(e){
    event.dataTransfer.setData('text/plain',null);
    UISelectorPart.dragee = this;
}

function dragover(e){
    e.preventDefault();
}

class UISelectorPart{

    constructor(name, index){
        this.txt = name;
        this.index = index;
        this.element = document.createElement("span");
        this.element.classList.add("selector");
        this.element.innerHTML = this.txt;
        this.element.setAttribute("draggable", true);
        this.parent = null;
        this.element.addEventListener("dragstart",dragstart.bind(this));
    }

    mount(element, parent){
        this.parent = parent;
        if (element instanceof HTMLElement)
            element.appendChild(this.element);
    }

    unmount(){
        this.parent = null;
        if (this.element.parentElement)
            this.element.parentElement.removeChild(this.element);
    }

    compare(other_part){
        return other_part.txt === this.txt
    }

    toString(){
        return this.txt;
    }

}


function drop(e){
    if(UISelectorPart.dragee){
        const part = UISelectorPart.dragee;
        const parent = part.parent;

        loop:
        while(parent != this){

            //Ignore if part is already present in the selector area
            for(let i = 0; i < this.parts.length; i++)
                if(this.parts[i].compare(part)) break loop;

            part.unmount();
            let d = parent.remove(part);
            this.add(part, ...d);
            part.mount(this.element, this);
            break;
        }
    }
    UISelectorPart.dragee = null;
    e.preventDefault();
    e.stopPropagation();
    e.stopImmediatePropagation();
    return false;
}

class UISelector {
    constructor(selector) {
        this.selector = selector;
        this.parts = [];
        
        selector.v.forEach((e, i) => {
            this.parts.push(new UISelectorPart(e, i));
        });
        
        this.text = selector.v.join();
    }

    update() {
        this.parent.update();
    }

    mount(parent) {
        this.element = parent.selector_space;
        this.element.ondrop = drop.bind(this);
        this.element.ondragover = dragover;
        
        this.parent = parent;

        this.parts.forEach(e=>e.mount(this.element, this));
    }

    unmount() {
        if (this.element.parentElement)
            this.element.parentElement.removeChild(this.element);
    }

    remove(part){
        let index = part.index;
        this.parts.splice(index,1);
        this.parts.forEach((e,i)=>e.index = i);
        const a = this.selector.a.splice(index,1)[0];
        const v = this.selector.v.splice(index,1)[0];
        this.update();
        return [a,v]
    }

    add(part, a, v){
        this.parts.push(part);
        this.selector.a.push(a);
        this.selector.v.push(v);
        this.parts.forEach((e,i)=>e.index = i);
        this.update();
    }

    rebuild(selector){
        this.parts.forEach(e=>e.unmount(false));
        this.parts.length = 0;
        selector.v.forEach((e,i) => {
            this.parts.push(new UISelectorPart(e, i));
        });
        this.mount(this.parent);

    }
}

function createCache(cacher){
    let cache = null;
    const destroy = cacher.prototype.destroy;
    const init = cacher.prototype.init;

    cacher.prototype.destroy = function(...args){

        if(destroy)
            destroy.call(this, ...args);

        this.next_cached = cache;
        cache = this;
    };

    return function(...args){
            let r;
        if(cache){
            r = cache;
            cache = cache.next_cached;
            r.next_cached = null;
            init.call(r,...args);
        }else{
            r = new cacher(...args);
            r.next_cached = null;
            r.CACHED = true;
        }
        return r;
    };
}

const props = Object.assign({}, property_definitions);

var dragee = null;

function dragstart$1(e){
    event.dataTransfer.setData('text/plain',null);
    UIProp.dragee = this;
}

class UIProp {
    constructor(type,  parent) {
        // Predefine all members of this object.
        this.hash = 0;
        this.type = "";
        this.parent = null;
        this._value = null;
        this.setupElement(type);
        this.init(type, parent);
    }

    init(type,  parent){
        this.type = type;
        this.parent = parent;
    }

    destroy(){
        this.hash = 0;
        this.type = "";
        this.parent = null;
        this._value = null;
        this.type = null;
        this.parent = null;
        this.unmount();
    }

    build(type, value){
        this.element.innerHTML ="";
        this.element.appendChild(this.label);
        let pp = getPropertyParser(type, undefined, props, ui_productions);
        this._value = pp.buildInput(1, whind$1(value));
        this._value.parent = this;
        this._value.mount(this.element);
    }

    update(value) {
        this.parent.update(this.type, value.toString());
    }

    mount(element) {
        if (element instanceof HTMLElement)
            element.appendChild(this.element);
    }

    unmount() {
        if (this.element.parentElement)
            this.element.parentElement.removeChild(this.element);
    }

    setupElement(type) {
        this.element = document.createElement("div");
        this.element.setAttribute("draggable", "true");
        this.element.classList.add("prop");
        this.element.addEventListener("dragstart", dragstart$1.bind(this));
        this.label = document.createElement("span");
        this.label.classList.add("prop_label");
        this.label.innerHTML = `${type.replace(/[\-\_]/g, " ")}`;
    }

    get value(){
        return this._value.toString();
    }
}

UIProp = createCache(UIProp);

var UIProp$1 = UIProp;

const props$1 = Object.assign({}, property_definitions);
class UIRuleSet {
    constructor(rule_body, parent) {

        this.parent = parent;
        this.hash = 0;
        this.rules = [];
        this.selectors = null;

        this.element = document.createElement("div");
        this.element.classList.add("rule");
        this.selector_space = document.createElement("div");
        this.selector_space.classList.add("rule_selectors");
        this.rule_space = document.createElement("div");
        this.rule_space.classList.add("rule_body");

        this.element.addEventListener("dragover", dragover$1);
        this.element.addEventListener("drop", (e)=>{
            
            let prop = UIProp$1.dragee;
            let parent = prop.parent;
            let value = prop.value;
            let type = prop.type;

            if(parent === this)
                return;

            this.addProp(type, value);
            parent.removeProp(type);

            //move the dragee's data into this ruleset
        });

        this.element.appendChild(this.selector_space);
        this.element.appendChild(this.rule_space);

        this.build(rule_body);
        this.mount(this.parent.element);

        this.ver = rule_body;
    }

    addData(){

    }

    updateSelectors(obj){
        if(obj.parts.length < 1){
            //remove selector from the rule set.
        }
    }

    addSelector(selector){

        //Add to list of selectors and update UI
        if(!this.selectors){

            this.selectors = new UISelector(selector);

            this.selectors.mount(this);
        }else{
            this.selectors.rebuild(selector);
        }
    }

    mount(element) {
        if (element instanceof HTMLElement)
            element.appendChild(this.element);
    }

    unmount() {
        if (this.element.parentElement)
            this.element.parentElement.removeChild(this.element);
    }

    build(rule_body = this.rule_body) {


        this.rule_body = rule_body;

        let i = -1;

        for (let a in rule_body.props) {
            let rule;
            
            //Reuse Existing Rule Bodies
            if(++i < this.rules.length){
                rule = this.rules[i];
            }else{
                rule = new UIProp$1(a,  this);
                this.rules.push(rule);
            }
            rule.build(a, rule_body.toString(0, a));
            rule.mount(this.rule_space);
        }
    }

    rebuild(rule_body){
        if(true || this.ver !== rule_body.ver){
            this.rule_space.innerHTML = "";
            this.rules.length = 0;
            this.build(rule_body);
            this.ver = this.rule_body.ver;
        }
    }

    update(type, value) {

        if(type && value){

            console.log(type, value);

            let lexer = whind$1(value);
            
            const IS_VIRTUAL = {
                is: false
            };
            
            const parser = getPropertyParser(type, IS_VIRTUAL, property_definitions);
            const rule = this.rule_body;
            if (parser && !IS_VIRTUAL.is) {
                if (!rule.props) rule.props = {};
                parser.parse(lexer, rule.props);
            }
        }

        this.parent.update(this);
    }

    addProp(type, value){
        this.update(type, value);
        //Increment the version of the rule_body
        this.rule_body.ver++;
       
        this.rebuild(this.rule_body);
    }

    removeProp(type){
        const rule = this.rule_body;
        if(rule.props[type]){
            delete rule.props[type];


            //Increment the version of the rule_body
            this.rule_body.ver++;

            this.parent.update();
            this.rebuild(this.rule_body);
        }
    }

    generateHash() {}
}

function dragover$1(e){
    e.preventDefault();
}

class UIMaster {
    constructor(css) {
        css.addObserver(this);
        this.css = css;
        this.rule_sets = [];
        this.selectors = [];
        this.element = document.createElement("div");
        this.element.classList.add("cfw_css");
        this.update_mod = 0;


        this.rule_map = new Map();
    }

    // Builds out the UI elements from collection of rule bodies and associated selector groups. 
    // css - A CandleFW_CSS object. 
    // meta - internal 
    build(css = this.css) {
        if(this.update_mod++%3 !== 0) return;

        //Extract rule bodies and set as keys for the rule_map. 
        //Any existing mapped body that does not have a matching rule should be removed. 
        
        const rule_sets = css.children;

        for(let i= 0; i < rule_sets.length; i++){
            let rule_set = rule_sets[i];

            for(let i = 0; i < rule_set.rules.length; i++){

                let rule = rule_set.rules[i];

                if(!this.rule_map.get(rule))
                    this.rule_map.set(rule, new UIRuleSet(rule, this));
                else {
                    this.rule_map.get(rule).rebuild(rule);
                }
            }

        
            const selector_array = rule_set._sel_a_;

            for(let i = 0; i < selector_array.length; i++){
                let selector = selector_array[i];
                let rule_ref = selector.r;

                let rule_ui = this.rule_map.get(rule_ref);

                rule_ui.addSelector(selector);
            }
        }


        this.css = css;

        let children = css.children;

        this.rule_sets = [];
        this.selectors = [];
    }

    updatedCSS(css) {
        if(this.UPDATE_MATCHED) return void (this.UPDATE_MATCHED = false);      
        //this.element.innerHTML = "";
        this.build(css);
        //this.render();
    }

    render() {
        for (let i = 0; i < this.rule_sets.length; i++)
            this.rule_sets.render(this.element);
    }

    mount(element) {
        if (element instanceof HTMLElement)
            element.appendChild(this.element);
    }

    unmount() {
        if (this.element.parentElement)
            this.element.parentElement.removeChild(this.element);
    }

    update(){
        this.UPDATE_MATCHED = true;
    	this.css.updated();
    }
}

/**
 * Container for all rules found in a CSS string or strings.
 *
 * @memberof module:wick~internals.css
 * @alias CSSRootNode
 */
class CSSRootNode {
    constructor() {
        this.promise = null;
        /**
         * Media query selector
         */
        this.pending_build = 0;
        this.resolves = [];
        this.res = null;
        this.observers = [];
        
        this.addChild(new CSSRuleBody());
    }

    _resolveReady_(res, rej) {
        if (this.pending_build > 0) this.resolves.push(res);
        res(this);
    }

    _setREADY_() {
        if (this.pending_build < 1) {
            for (let i = 0, l = this.resolves; i < l; i++) this.resolves[i](this);
            this.resolves.length = 0;
            this.res = null;
        }
    }

    READY() {
        if (!this.res) this.res = this._resolveReady_.bind(this);
        return new Promise(this.res);
    }
    /**
     * Creates a new instance of the object with same properties as the original.
     * @return     {CSSRootNode}  Copy of this object.
     * @public
     */
    clone() {
        let rn = new this.constructor();
        rn._selectors_ = this._selectors_;
        rn._sel_a_ = this._sel_a_;
        rn._media_ = this._media_;
        return rn;
    }

    * getApplicableSelectors(element, win = window) {

        for (let node = this.fch; node; node = this.getNextChild(node)) {

            if(node.matchMedia(win)){
                let gen = node.getApplicableSelectors(element, win);
                let v = null;
                while ((v = gen.next().value))
                    yield v;
            }
        }
    }

    /**
     * Retrieves the set of rules from all matching selectors for an element.
     * @param      {HTMLElement}  element - An element to retrieve CSS rules.
     * @public
     */
    getApplicableRules(element, rule = new CSSRule(), win = window) {
        for (let node = this.fch; node; node = this.getNextChild(node))
            node.getApplicableRules(element, rule, win);
        return rule;
    }

    /**
     * Gets the last rule matching the selector
     * @param      {string}  string  The string
     * @return     {CSSRule}  The combined set of rules that match the selector.
     */
    getRule(string) {
        let r = null;
        for (let node = this.fch; node; node = this.getNextChild(node))
            r = node.getRule(string, r);
        return r;
    }

    toString(off = 0) {
        let str = "";
        for (let node = this.fch; node; node = this.getNextChild(node))
            str += node.toString(off);
        return str;
    }

    addObserver(observer) {
        this.observers.push(observer);
    }

    removeObserver(observer) {
        for (let i = 0; i < this.observers.length; i++)
            if (this.observers[i] == observer) return this.observers.splice(i, 1);
    }

    updated() {
        if (this.observers.length > 0)
            for (let i = 0; i < this.observers.length; i++) this.observers[i].updatedCSS(this);
    }

    parse(lex, root) {
        if (typeof(lex) == "string")
            lex = whind$1(lex);

        if (lex.sl > 0) {

            if (!root && root !== null) {
                root = this;
                this.pending_build++;
            }

            return this.fch.parse(lex, this).then(e => {
                this._setREADY_();
                this.updated();
                return this;
            });
        }
    }

    merge(inCSSRootNode){
        if(inCSSRootNode instanceof CSSRootNode){
            
            let children = inCSSRootNode.children;
            outer:
            for(let i = 0; i < children.length; i++){
                //determine if this child matches any existing selectors
                let child = children[i];
                
                for(let i = 0; i < this.children.length; i++){
                    let own_child = this.children[i];

                    if(own_child.isSame(child)){
                        own_child.merge(child);
                        continue outer;
                    }
                }

                this.children.push(child);
            }
        }
    }
}

/**
 * CSSRootNode implements all of ll
 * @extends ll
 * @memberof  module:wick~internals.html.CSSRootNode
 * @private
 */
LinkedList.mixinTree(CSSRootNode);
/*
 * Expecting ID error check.
 */
const _err_ = "Expecting Identifier";

/**
 * Builds a CSS object graph that stores `selectors` and `rules` pulled from a CSS string. 
 * @function
 * @param {string} css_string - A string containing CSS data.
 * @param {string} css_string - An existing CSSRootNode to merge with new `selectors` and `rules`.
 * @return {Promise} A `Promise` that will return a new or existing CSSRootNode.
 * @memberof module:wick.core
 * @alias css
 */
const CSSParser = (css_string, root = null) => (root = (!root || !(root instanceof CSSRootNode)) ? new CSSRootNode() : root, root.parse(whind$1(css_string)));

CSSParser.types = types;

const removeFromArray = (array, ...elems) => {
    const results = [];
    outer:
        for (let j = 0; j < elems.length; j++) {
            const ele = elems[i];
            for (let i = 0; i < array.length; i++) {
                if (array[i] === ele) {
                    array.splice(i, 1);
                    results.push(true);
                    continue outer;
                }
            }
            results.push(false);
        }

    return results;
};

// Mode Flag
const KEEP = 0;
const IMPORT = 1;
const EXPORT = 2;
const PUT = 4;

/**
 * Gateway for data flow. Represents a single "channel" of data flow. 
 * 
 * By using different modes, one can control how data enters and exits the scope context.
 * -`keep`: 
 *  This mode is the default and treats any data on the channel as coming from the model. The model itself is not changed, and any data flow from outside the scope context is ignored.
 * -`put`:
 *  This mode will update the model to reflect updates on the channel. This will also cause any bindings to update to reflect the change on the model.
 * -`import`:
 *  This mode will allow data from outside the scope context to enter the context as if it came from the model. The model itself is unchanged unless put is specified for the same property.
 *  -`export`:
 *  This mode will propagate data flow to the parent scope context, allowing other scopes to listen on the data flow of the originating scope context.
 *  
 *  if `import` is active, then `keep` is implicitly inactive and the model no longer has any bearing on the value of the bindings.
 */
class Tap {

    constructor(scope, prop, modes = 0) {
        this.scope = scope;
        this.prop = prop;
        this.modes = modes; // 0 implies keep
        this.ios = [];

        if (modes & IMPORT && scope.parent)
            scope.parent.getTap(prop).ios.push(this);

    }

    destroy() {

        for (let i = 0, l = this.ios.length; i < l; i++)
            this.ios[i].destroy();

        this.ios = null;
        this.scope = null;
        this.prop = null;
        this.modes = null;
    }

    load(data) {
        this.downS(data);

        //Make sure export occures as soon as data is ready. 
        const value = data[this.prop];

        if ((typeof(value) !== "undefined") && (this.modes & EXPORT))
            this.scope.up(this, data[this.prop]);
    }

    down(value, meta) {
        for (let i = 0, l = this.ios.length; i < l; i++) {
            this.ios[i].down(value, meta);
        }
    }

    downS(model, IMPORTED = false) {
        const value = model[this.prop];

        if (typeof(value) !== "undefined") {

            if (IMPORTED) {
                if (!(this.modes & IMPORT))
                    return;

                if ((this.modes & PUT) && typeof(value) !== "function") {
                    if (this.scope.model.set)
                        this.scope.model.set({
                            [this.prop]: value
                        });
                    else
                        this.scope.model[this.prop] = value;
                }

            }

            for (let i = 0, l = this.ios.length; i < l; i++) {
                if (this.ios[i] instanceof Tap) {
                    this.ios[i].downS(model, true);
                } else
                    this.ios[i].down(value);
            }
        }
    }

    up(value, meta) {

        if (!(this.modes & (EXPORT | PUT)))
            this.down(value, meta);
        
        if ((this.modes & PUT) && typeof(value) !== "undefined") {
            if (this.scope.model.set)
                this.scope.model.set({
                    [this.prop]: value
                });
            else
                this.scope.model[this.prop] = value;
        }

        if (this.modes & EXPORT)
            this.scope.up(this, value, meta);
    }

    addIO(io) {
        if (io.parent === this)
            return;

        if (io.parent)
            io.parent.removeIO(io);

        this.ios.push(io);

        io.parent = this;
    }

    removeIO(io) {
        if (removeFromArray(this.ios, io)[0])
            io.parent = null;
    }
}

class UpdateTap extends Tap {
    downS(model) {
        for (let i = 0, l = this.ios.length; i < l; i++)
            this.ios[i].down(model);
    }
    up() {}
}

// This serves as a NOOP for io methods that expect a Tap with addIO and RemoveIO operations
const noop = () => {};
const NOOPTap = { addIO: noop, removeIO: noop, up: noop };

class Scope extends View {

    /**
     *   In the Wick dynamic template system, Scopes serve as the primary access to Model data. They, along with {@link ScopeContainer}s, are the only types of objects the directly _bind_ to a Model. When a Model is updated, the Scope will transmit the updated data to their descendants, which are comprised of {@link Tap}s and {@link ScopeContainer}s.
     *   A Scope will also _bind_ to an HTML element. It has no methodes to update the element, but it's descendants, primarily instances of the {@link IO} class, can update attributes and values of then element and its sub-elements.
     *   @param {Scope} parent - The parent {@link Scope}, used internally to build a hierarchy of Scopes.
     *   @param {Object} data - An object containing HTMLELement attribute values and any other values produced by the template parser.
     *   @param {Presets} presets - An instance of the {@link Presets} object.
     *   @param {HTMLElement} element - The HTMLElement the Scope will _bind_ to.
     *   @memberof module:wick~internals.scope
     *   @alias Scope
     *   @extends ScopeBase
     */
    constructor(parent, presets, element, ast) {
        if(!presets)
            debugger;
        super();

        this.ast = null;

        ast.setScope(this);
        
        this.parent = parent;
        this.ele = element;
        this.presets = presets;
        this.model = null;
        this.statics = null;

        this.taps = {};
        this.children = [];
        this.scopes = [];
        this.badges = {};
        this.ios = [];
        this.containers = [];
        this.hooks = [];
        this.update_tap = null;

        this._model_name_ = "";
        this._schema_name_ = "";

        this.DESTROYED = false;
        this.LOADED = false;

        this.addToParent();
    }

    destroy() {

        this.DESTROYED = true;
        this.LOADED = false;

        this.update({ destroyed: true });

        if (this.parent && this.parent.removeScope)
            this.parent.removeScope(this);

        this.children.forEach((c) => c.destroy());
        this.children.length = 0;
        this.data = null;

        if (this.ele && this.ele.parentElement)
            this.ele.parentElement.removeChild(this.ele);

        this.ele = null;

        while (this.scopes[0])
            this.scopes[0].destroy();

        super.destroy();

    }

    getBadges(par) {
        for (let a in this.badges) {
            if (!par.badges[a])
                par.badges[a] = this.badges[a];
        }
    }

    addToParent() {
        if (this.parent)
            this.parent.scopes.push(this);
    }

    addTemplate(template) {
        template.parent = this;
        this.containers.push(template);
    }

    addScope(scope) {
        if (scope.parent == this)
            return;
        scope.parent = this;
        this.scopes.push(scope);
    }

    removeScope(scope) {
        if (scope.parent !== this)
            return;

        for (let i = 0; i < this.scopes.length; i++)
            if (this.scopes[i] == scope)
                return (this.scopes.splice(i, 1), scope.parent = null);
    }

    getTap(name) {
        let tap = this.taps[name];

        if (!tap) {
            if (name == "update")
                this.update_tap = new UpdateTap(this, name);
            else
                tap = this.taps[name] = new Tap(this, name);
        }
        return tap;
    }

    /**
     * Return an array of Tap objects that
     * match the input array.
     */

    linkTaps(tap_list) {
        let out_taps = [];
        for (let i = 0, l = tap_list.length; i < l; i++) {
            let tap = tap_list[i];
            let name = tap.name;
            if (this.taps[name])
                out_taps.push(this.taps[name]);
            else {
                let bool = name == "update";
                let t = bool ? new UpdateTap(this, name, tap.modes) : new Tap(this, name, tap.modes);

                if (bool)
                    this.update_tap = t;

                this.taps[name] = t;
                out_taps.push(this.taps[name]);
            }
        }

        return out_taps;
    }

    /**
        Makes the scope a view of the given Model. If no model passed, then the scope will bind to another model depending on its `scheme` or `model` attributes. 
    */
    load(model) {
        let
            m = null,
            s = null;

        if (this._model_name_ && this.presets.models)
            m = this.presets.models[this._model_name_];
        if (this._schema_name_ && this.presets.schemas)
            s = this.presets.schemas[this._schema_name_];

        if (m)
            model = m;
        else if (s) {
            model = new s();
        } else if (!model)
            model = new Model(model);

        let LOADED = this.LOADED;

        this.LOADED = true;

        for (let i = 0, l = this.scopes.length; i < l; i++) {
            this.scopes[i].load(model);
            this.scopes[i].getBadges(this);

            //Lifecycle message
            this.scopes[i].update({mounted:true}); 
        }

        if (model.addView)
            model.addView(this);

        this.model = model;

        for (let name in this.taps)
            this.taps[name].load(this.model, false);

        if (!LOADED)
            this.update({ created: true });
    }

    down(data, changed_values) {
        this.update(data, changed_values, true);
    }

    up(tap, data, meta) {
        if (this.parent)
            this.parent.upImport(tap.prop, data, meta, this);
    }

    upImport(prop_name, data, meta) {
        if (this.taps[prop_name])
            this.taps[prop_name].up(data, meta);
    }

    update(data, changed_values, IMPORTED = false) {

        if (this.update_tap)
            this.update_tap.downS(data, IMPORTED);

        if (changed_values) {

            for (let name in changed_values)
                if (this.taps[name])
                    this.taps[name].downS(data, IMPORTED);
        } else
            for (let name in this.taps)
                this.taps[name].downS(data, IMPORTED);

        //        for (let i = 0, l = this.scopes.length; i < l; i++)
        //            this.scopes[i].down(data, changed_values);

        for (let i = 0, l = this.containers.length; i < l; i++)
            this.containers[i].down(data, changed_values);
    }

    transitionIn(transition) {

        if (this.taps.trs_in)
            this.taps.trs_in.downS(transition);

        for (let i = 0, l = this.scopes.length; i < l; i++)
            this.scopes[i].transitionIn(transition);

        for (let i = 0, l = this.containers.length; i < l; i++)
            this.containers[i].transitionIn(transition);
    }

    transitionOut(transition) {
        if (this.taps.trs_out)
            this.taps.trs_out.downS(transition);

        for (let i = 0, l = this.scopes.length; i < l; i++)
            this.scopes[i].transitionOut(transition);


        for (let i = 0, l = this.containers.length; i < l; i++)
            this.containers[i].transitionOut(transition);
    }

    bubbleLink(child) {
        if (child)
            for (let a in child.badges)
                this.badges[a] = child.badges[a];
        if (this.parent)
            this.parent.bubbleLink(this);
    }
}

Scope.prototype.removeIO = Tap.prototype.removeIO;
Scope.prototype.addIO = Tap.prototype.addIO;

class IOBase {

    constructor(parent) {

        this.parent = null;

        parent.addIO(this);
    }

    destroy() {

        this.parent.removeIO(this);

        this.parent = null;
    }

    down() {}
    up(value, meta) { this.parent.up(value, meta); }
}

/**
 *   The IO is the last link in the Scope chain. It is responsible for putting date into the DOM through the element it binds to. Alternativly, in derived versions of `IO`, it is responsible for retriving values from user inputs from input elements and events.
 *   @param {Scope} tap - The tap {@link Scope}, used internally to build a hierarchy of Scopes.
 *   @param {Object} data - An object containing HTMLELement attribute values and any other values produced by the template parser.
 *   @param {Presets} presets - An instance of the {@link Presets} object.
 *   @param {HTMLElement} element - The HTMLElement that the IO will _bind_ to.
 *   @memberof module:wick.core.scope
 *   @alias IO
 *   @extends IOBase
 */
class IO extends IOBase {

    constructor(scope, errors, tap, element = null, default_val) {

        super(tap);
        //Appending the value to a text node prevents abuse from insertion of malicious DOM markup. 
        this.ele = element;
        this.argument = null;

        if (default_val) this.down(default_val);
    }

    destroy() {
        this.ele = null;
        super.destroy();
    }

    down(value) {
        this.ele.data = value;
    }
}

/**
    This IO object will update the attribute value of the watched element, using the "prop" property to select the attribute to update.
*/
class AttribIO extends IOBase {
    constructor(scope, errors, tap, attr, element, default_val) {
        super(tap);

        this.attrib = attr;
        this.ele = element;

        if (default_val) this.down(default_val);
    }

    destroy() {
        this.ele = null;
        this.attrib = null;
        super.destroy();
    }

    /**
        Puts data into the watched element's attribute. The default action is to simply update the attribute with data._value_.  
    */
    down(value) {
        this.ele.setAttribute(this.attrib, value);
    }

    set data(v){
        this.down();
    }

    get data(){

    }
}

// Toogles the display state of the element based on the "truthyness" of the passed value
class BooleanIO extends IOBase {
    constructor(scope, errors, tap, element, default_val) {
        super(tap);

        this.par = element.parentElement;

        this.ele = element;

        this.state = false;

        this.place_holder = null;

        if (typeof(default_val) !== "undefined") this.down(default_val);

        if (this.state == false)
            this.ele.style.display = "none";

    }

    destroy() {
        this.ele = null;
        this.attrib = null;
        super.destroy();
    }

    down(value) {


        if (!this.par && this.ele.parentElement)
            this.par = this.ele.parentElement;

        if (value && !this.state) {
            this.ele.style.display = "";

            if (this.place_holder)
                this.par.replaceChild(this.ele, this.place_holder);

            this.place_holder = null;

            this.state = true;
        } else if (!value && this.state) {
            this.place_holder = document.createTextNode("");
            this.par.replaceChild(this.place_holder, this.ele);
            this.state = false;
        }
    }
}


class InputIO extends IOBase {

    constructor(scope, errors, tap, element, message_key) {

        super(tap);

        this.ele = element;

        const up_tap = message_key ? scope.getTap(message_key) : tap;

        this.event = (e) => { up_tap.up(e.target.value, { event: e }); };

        this.ele.addEventListener("input", this.event);
    }

    destroy() {
        this.ele.removeEventListener("input", this.event);
        this.ele = null;
        this.event = null;
        this.attrib = null;
    }

    down(value) {
        this.ele.value = value;
    }
}

class BindIO extends IOBase {

    constructor(scope, errors, tap) {
        super(tap);
        this._value_ = null;
        this.child = null;
    }

    destroy() {
        this._value_ = null;
        if (this.child) this.child.destroy();
        this.child = null;
        super.destroy();
    }

    /**
        Puts data into the watched element's attribute. The default action is to simply update the attribute with data._value_.  
    */
    down(value) {
        this._value_ = value;
        this.child.down();
    }
}



class TemplateString extends IOBase {

    constructor(scope, errors, taps, element, binds) {
       
        super(scope);
        this._SCHD_ = 0;
        this.binds = [];
        this.ele = element;
        this._setBindings_(scope, errors, taps, binds);
    }

    destroy() {
        for (var i = 0; i < this.binds.length; i++)
            this.binds[i].destroy();
        this._SCHD_ = 0;
        this.binds = null;
        this.ele = null;
        super.destroy();
    }

    _setBindings_(scope, errors, taps, binds) {
        for (var i = 0; i < binds.length; i++) {
            let bind = binds[i];

            switch (bind.type) {
                case 0: //DYNAMICbindingID
                    let new_bind = new BindIO(scope, errors, scope.getTap(bind.tap_name), bind);
                    this.binds.push(new_bind);
                    new_bind.child = this;
                    //this.binds.push(msg._bind_(scope, errors, taps, this));
                    break;
                case 1: //RAW_VALUEbindingID
                    this.binds.push(bind);
                    break;
                case 2: //TEMPLATEbindingID
                    if (bind.bindings.length < 1) // Just a variable less expression.
                        this.binds.push({ _value_: msg.func() });
                    else
                        this.binds.push(bind._bind_(scope, errors, taps, this));
                    break;
            }
        }
        this.down();
    }

    get data() {}
    set data(v) { spark.queueUpdate(this); }

    down() { spark.queueUpdate(this); }

    scheduledUpdate() {
        let str = [];

        for (let i = 0; i < this.binds.length; i++)
            str.push(this.binds[i]._value_);

        this.ele.data = str.join('');   
    }
}

class AttribTemplate extends TemplateString {

    constructor(scope, errors, taps, attr, element, binds) {
        super(scope, errors, taps, element, binds);
        this.attrib = attr;
    }

    destroy() {
        this.attrib = null;
        super.destroy();
    }

    scheduledUpdate() {

        let str = [];

        for (let i = 0; i < this.binds.length; i++)
            str.push(this.binds[i]._value_);

        this.ele.setAttribute(this.attrib, str.join(''));
    }
}

function replaceString(e){
    return e[1].toUpperCase();
}

function toCamel(string){
    let str = string.replace(/(?:[-_])([a-z])/g, replaceString);
    return str;
}
class CSSRawValue {

    constructor(name, prop = null) {
        this._name_ = toCamel(name);
        this._value_ = "";

        if (Array.isArray(prop))
            this._value_ = prop.join(" ");
        else
            this._value_ = prop.toString();
    }

    get UPDATED() { return false; }
    set UPDATED(v) {}
}

class CSSRuleTemplateString {
    constructor(scope, errors, taps, binds, name) {
        this.binds = [];
        this._setBindings_(scope, errors, taps, binds);
        this.ios = [];
        this._value_ = "";
        this._name_ = toCamel(name);
    }

    destroy() {
        for (let i = 0, l = this.binds.length; i < l; i++)
            this.binds[i].destroy();
        this.binds = null;
        for (let i = 0; i < this.ios.length; i++)
            this.ios[i].destroy();
        this.ios = null;
        this._value_ = null;
        this._name_ = null;
    }

    _setBindings_(scope, errors, taps, binds) {
        for (var i = 0; i < binds.length; i++) {
            let bind = binds[i];

            switch (bind.type) {
                case 0: //DYNAMICbindingID
                    let new_bind = new BindIO(scope, errors, scope.getTap(bind.tap_name), bind);
                    this.binds.push(new_bind);
                    new_bind.child = this;
                    //this.binds.push(msg._bind_(scope, errors, taps, this));
                    break;
                case 1: //RAW_VALUEbindingID
                    this.binds.push(bind);
                    break;
                case 2: //TEMPLATEbindingID
                    if (bind.bindings.length < 1) // Just a variable less expression.
                        this.binds.push({ _value_: msg.func() });
                    else
                        this.binds.push(bind._bind_(scope, errors, taps, this));
                    break;
            }
        }
        this.down();
    }

    get data() {}
    set data(v) { spark.queueUpdate(this); }

    down() { spark.queueUpdate(this); }

    scheduledUpdate() {

        let str = [];

        for (let i = 0; i < this.binds.length; i++)
            str.push(this.binds[i]._value_);
        this._value_ = str.join(' ');
        for (let i = 0, l = this.ios.length; i < l; i++)
            this.ios[i]._updateRule_();
    }

    addIO(io) { this.ios.push(io); }
    removeIO(io) {
        for (let i = 0; i < this.ios.length; i++) {
            let own_io = this.ios[i];
            if (own_io == io) return void this.ios.splice(i, 1);
        }
    }
}


class StyleIO extends IOBase {
    constructor(scope, errors, taps, element, props = []) {

        super(scope);

        this.ele = element;

        this.props = [];

        this._initializeProps_(scope, errors, taps, props);

        this.scheduledUpdate();
    }

    destroy() {
        this._template_text_ = null;
        this._rules_text_ = null;
        this.ele = null;
        this.props = null;
        super.destroy();
    }

    _setRule_(rule){
        let props = rule.props;

        this.props.length = 0;

        for (let name in props) {
            let prop = props[name];

            let wick_prop = (prop._wick_type_ > 0) ? prop.bind(this.parent, [], {}, this) : new CSSRawValue(name, prop);

            this.props.push(wick_prop);

            spark.queueUpdate(this);
        }
    }

    _initializeProps_(scope, errors, taps, props) {

        for (let i = 0, l = props.length; i < l; i++) {
            let prop = props[i];
            if (prop._wick_type_ == 1) {
                this.props.push(props[i]._bind_(scope, errors, taps, this));
            } else
                this.props.push(prop);
        }
    }

    _updateRule_() { spark.queueUpdate(this); }

    get data() {}
    set data(data) { spark.queueUpdate(this); }

    scheduledUpdate() {
        for (let i = 0; i < this.props.length; i++) {
            let prop = this.props[i];
            this.ele.style[prop._name_] = prop._value_;
        }
    }
}

/******************** Expressions **********************/

class ExpressionIO extends TemplateString {

    constructor(scope, errors, taps, element, binds, func) {
        super(scope, errors, taps, element, binds);
        this._expr_function_ = func;
        this._value_ = null;
        this._filter_expression_ = null;
        this._bl_ = this.binds.length;
    }

    destroy() {
        this._bl_ = null;
        this._filter_expression_ = null;
        this._value_ = null;
        this._expr_function_ = null;
        super.destroy();
    }

    set _IS_A_FILTER_(v) {
        if (v == true) {
            var model_arg_index = -1;
            var index_arg_index = -1;

            for (let i = 0, l = this._bl_; i < l; i++) {
                let bind = this.binds[i];
                if (bind.parent.prop == "model" || bind.parent.prop == "m") {
                    model_arg_index = i;
                }

                if (bind.parent.prop == "index" || bind.parent.prop == "i") {
                    index_arg_index = i;
                }
            }

            this._filter_expression_ = (scope, index) => {
                const args = [];

                for (let i = 0, l = this._bl_; i < l; i++) {
                    if (i == model_arg_index) { args.push(scope.model); continue; }
                    if (i == index_arg_index) { args.push(index); continue; }
                    args.push(this.binds[i]._value_);
                }

                return this._expr_function_.apply(null, args);
            };
        }
    }

    get _IS_A_FILTER_() { return typeof(this._filter_expression_) == "function"; }

    scheduledUpdate() {
        if (this._IS_A_FILTER_) {
            this.ele.update();
        } else {

            const args = [];

            for (let i = 0; i < this.binds.length; i++) {
                if (this.binds[i]._value_ === null) return;
                args.push(this.binds[i]._value_);
            }

            this._value_ = this._expr_function_.apply(null, args);
            this.ele.data = this._value_;
        }
    }
}

class AttribExpressionIO extends ExpressionIO {
    
    constructor(scope, errors, taps, element, binds, func, attrib) {
        super(scope, errors, taps, element, binds, func);
        this.attrib = attrib;
    }

    destroy(){
        this.attrib = "";
        super.destroy();
    }

    scheduledUpdate() {
        const args = [];

        for (let i = 0; i < this.binds.length; i++) {
            if (this.binds[i]._value_ === null) return;
            args.push(this.binds[i]._value_);
        }

        this._value_ = this._expr_function_.apply(null, args);
        this.ele.setAttribute(this.attrib, this._value_);
    }
}

class BooleanExpressionIO extends ExpressionIO {
    constructor(scope, errors, taps, element, binds, func) {
        super(scope, errors, taps, element, binds, func);
        Object.assign(this, new this.constr(scope, errors, NOOPTap, element));
    }

    destroy(){
        BooleanIO.prototype.destroy.apply(this);
        super.destroy();
    }

    scheduledUpdate() {
        const args = [];
        for (let i = 0; i < this.binds.length; i++)
            args.push(this.binds[i]._value_);
        this.boolDown(this._expr_function_.apply(null, args));
    }
}
BooleanExpressionIO.prototype.constr = BooleanIO.prototype.constructor;
BooleanExpressionIO.prototype.boolDown = BooleanIO.prototype.down;

class InputExpressionIO extends ExpressionIO {
    scheduledUpdate() {
        if (this._IS_A_FILTER_) {
            this.ele.update();
        } else {
            const args = [];
            for (let i = 0; i < this.binds.length; i++)
                args.push(this.binds[i]._value_);

            this._value_ = this._expr_function_.apply(null, args);
            this.ele.value = this._value_;
        }
    }
}

class EventIO {
    constructor(scope, errors, taps, element, event, event_bind, argument) {

        let Attrib_Watch = (typeof element[event] == "undefined");

        this.parent = scope;
        scope.ios.push(this);

        this.ele = element;
        this.event_bind = new IOBase(scope.getTap(event_bind.tap_name));
        this.event = event.replace("on", "");

        this.prevent_defaults = true;
        if (this.event == "dragstart") this.prevent_defaults = false;
        this.argument = null;
        this.data = null;

        if (argument) {
            switch (argument.type) {
                case 0: //DYNAMICbindingID
                    this.argument = argument._bind_(scope, errors, taps, this);
                    break;
                case 1: //RAW_VALUEbindingID
                    this.data = argument.val;
                    break;
                case 2: //TEMPLATEbindingID
                    if (argument.bindings.length < 1) // Just a variable less expression.
                        this.data = argument.func();
                    else
                        this.argument = argument._bind_(scope, errors, taps, this);
                    break;
            }
        }


        if (Attrib_Watch) {
            this.event_handle = new MutationObserver((ml) => {
                ml.forEach((m) => {
                    if (m.type == "attributes") {
                        if (m.attributeName == event) {
                            this.handleAttribUpdate(m);
                        }
                    }
                });
            });
            this.event_handle.observe(this.ele, { attributes: true });
        } else {
            this.event_handle = (e) => this.handleEvent(e);
            this.ele.addEventListener(this.event, this.event_handle);
        }
    }

    /**
     * Removes all references to other objects.
     * Calls destroy on any child objects.
     */
    destroy() {
        if (this.argument)
            this.argument.destroy();
        this.event_handle = null;
        this.event_bind.destroy();
        this.argument = null;
        this.ele.removeEventListener(this.event, this.event_handle);
        this.ele = null;
        this.event = null;
        this.parent.removeIO(this);
        this.parent = null;
        this.data = null;
    }

    handleEvent(e) {
        this.event_bind.up(this.data, { event: e });

        if (this.prevent_defaults /*|| prevent === true*/) {
            e.preventDefault();
            e.stopPropagation();
            e.stopImmediatePropagation();
            return false;
        }
    }

    handleAttribUpdate(e) {
        this.event_bind.up(e.target.getAttribute(e.attributeName), { mutation: e });
    }
}

const
    CSS_Length$1 = CSSParser.types.length,
    CSS_Percentage$1 = CSSParser.types.percentage,
    CSS_Color$1 = CSSParser.types.color,
    CSS_Transform2D$1 = CSSParser.types.transform2D,
    CSS_Path$1 = CSSParser.types.path,
    CSS_Bezier$1 = CSSParser.types.cubic_bezier,

    Animation = (function anim() {

        var USE_TRANSFORM = false;

        const
            CSS_STYLE = 0,
            JS_OBJECT = 1,
            SVG = 3;

        function setType(obj) {
            if (obj instanceof HTMLElement) {
                if (obj.tagName == "SVG")
                    return SVG;
                return CSS_STYLE;
            }
            return JS_OBJECT;
        }

        const Linear = { getYatX: x => x, toString: () => "linear" };


        // Class to linearly interpolate number.
        class lerpNumber extends Number { lerp(to, t, from = 0) { return this + (to - this) * t; } copy(val) { return new lerpNumber(val); } }
        class lerpNonNumeric { constructor(v) { this.v = v; } lerp(to, t) { return to.v } copy(val) { return new lerpNonNumeric(val) } }


        // Store animation data for a single property on a single object. Hosts methods that can create CSS based interpolation and regular JS property animations. 
        class AnimProp {

            constructor(keys, obj, prop_name, type) {

                this.duration = 0;
                this.end = false;
                this.keys = [];
                this.current_val = null;

                const
                    IS_ARRAY = Array.isArray(keys),
                    k0 = IS_ARRAY ? keys[0] : keys,
                    k0_val = typeof(k0.value) !== "undefined" ? k0.value : k0.v;

                if (prop_name == "transform")
                    this.type = CSS_Transform2D$1;
                else {
                    this.type = this.getType(k0_val);
                }

                this.getValue(obj, prop_name, type, k0_val);

                let p = this.current_val;

                if (IS_ARRAY)
                    keys.forEach(k => p = this.addKey(k, p));
                else
                    this.addKey(keys, p);
            }

            destroy() {
                this.keys = null;
                this.type = null;
                this.current_val = null;
            }

            getValue(obj, prop_name, type, k0_val) {

                if (type == CSS_STYLE) {
                    let name = prop_name.replace(/[A-Z]/g, (match) => "-" + match.toLowerCase());
                    let cs = window.getComputedStyle(obj);

                    //Try to get computed value. If it does not exist, then get value from the style attribtute.
                    let value = cs.getPropertyValue(name);
                    
                    if(!value)
                        value = obj.style[prop_name];
                

                    if (this.type == CSS_Percentage$1) {
                        if (obj.parentElement) {
                            let pcs = window.getComputedStyle(obj.parentElement);
                            let pvalue = pcs.getPropertyValue(name);
                            let ratio = parseFloat(value) / parseFloat(pvalue);
                            value = (ratio * 100);
                        }
                    }
                    this.current_val = (new this.type(value));

                } else {
                    this.current_val = new this.type(obj[prop_name]);
                }
            }

            getType(value) {

                switch (typeof(value)) {
                    case "number":
                        return lerpNumber;
                        break
                    case "string":
                        if (CSS_Length$1._verify_(value))
                            return CSS_Length$1;
                        if (CSS_Percentage$1._verify_(value))
                            return CSS_Percentage$1;
                        if (CSS_Color$1._verify_(value))
                            return CSS_Color$1;
                        //intentional
                    case "object":
                        return lerpNonNumeric;
                }
            }

            addKey(key, prev) {
                let
                    l = this.keys.length,
                    pkey = this.keys[l - 1],
                    v = (key.value !== undefined) ? key.value : key.v,
                    own_key = {
                        val: (prev) ? prev.copy(v) : new this.type(v) || 0,
                        dur: key.duration || key.dur || 0,
                        del: key.delay || key.del || 0,
                        ease: key.easing || key.e || ((pkey) ? pkey.ease : Linear),
                        len: 0
                    };

                own_key.len = own_key.dur + own_key.del;

                this.keys.push(own_key);

                this.duration += own_key.len;

                return own_key.val;
            }

            getValueAtTime(time = 0) {
                let val_start = this.current_val,
                    val_end = this.current_val,
                    key, val_out = val_start;


                for (let i = 0; i < this.keys.length; i++) {
                    key = this.keys[i];
                    val_end = key.val;
                    if (time < key.len) {
                        break;
                    } else
                        time -= key.len;
                    val_start = key.val;
                }


                if (key) {
                    if (time < key.len) {
                        if (time < key.del) {
                            val_out = val_start;
                        } else {
                            let x = (time - key.del) / key.dur;
                            let s = key.ease.getYatX(x);
                            val_out = val_start.lerp(val_end, s, val_start);
                        }
                    } else {
                        val_out = val_end;
                    }
                }

                return val_out;
            }

            run(obj, prop_name, time, type) {
                const val_out = this.getValueAtTime(time);
                this.setProp(obj, prop_name, val_out, type);
                return time < this.duration;
            }

            setProp(obj, prop_name, value, type) {
                if (type == CSS_STYLE) {
                    obj.style[prop_name] = value;
                } else
                    obj[prop_name] = value;
            }

            unsetProp(obj, prop_name) {
                this.setProp(obj, prop_name, "", CSS_STYLE);
            }

            toCSSString(time = 0, prop_name = "") {
                const value = this.getValueAtTime(time);
                return `${prop_name}:${value.toString()}`;
            }
        }

        // Stores animation data for a group of properties. Defines delay and repeat.
        class AnimSequence {
            constructor(obj, props) {
                this.duration = 0;
                this.time = 0;
                this.obj = null;
                this.type = setType(obj);
                this.DESTROYED = false;
                this.FINISHED = false;
                this.CSS_ANIMATING = false;
                this.events = {};
                this.SHUTTLE = false;
                this.REPEAT = 0;
                this.SCALE = 1;

                switch (this.type) {
                    case CSS_STYLE:
                        this.obj = obj;
                        break;
                    case SVG:
                    case JS_OBJECT:
                        this.obj = obj;
                        break;
                }

                this.props = {};

                this.setProps(props);
            }

            destroy() {
                for (let name in this.props)
                    if (this.props[name])
                        this.props[name].destroy();
                this.DESTROYED = true;
                this.duration = 0;
                this.obj = null;
                this.props = null;
                this.time = 0;
            }

            // Removes AnimProps based on object of keys that should be removed from this sequence.
            removeProps(props) {
                if (props instanceof AnimSequence)
                    props = props.props;

                for (let name in props) {
                    if (this.props[name])
                        this.props[name] = null;
                }
            }


            unsetProps(props) {
                for (let name in this.props)
                    this.props[name].unsetProp(this.obj, name);
            }

            setProps(props) {
                for (let name in this.props)
                    this.props[name].destroy();

                this.props = {};

                for (let name in props)
                    this.configureProp(name, props[name]);
            }

            configureProp(name, keys) {
                let prop;
                if (prop = this.props[name]) {
                    this.duration = Math.max(prop.duration || prop.dur, this.duration);
                } else {
                    prop = new AnimProp(keys, this.obj, name, this.type);
                    this.props[name] = prop;
                    this.duration = Math.max(prop.duration || prop.dur, this.duration);
                }
            }

            run(i) {

                for (let n in this.props) {
                    let prop = this.props[n];
                    if (prop)
                        prop.run(this.obj, n, i, this.type);
                }

                if (i >= this.duration || i <= 0)
                    return false;

                return true;
            }

            scheduledUpdate(a, t) {

                this.time += t * this.SCALE;
                if (this.run(this.time)){
                    spark.queueUpdate(this);
                }
                else if(this.REPEAT){
                    let scale = this.SCALE;
                    
                    this.REPEAT--;

                    if(this.SHUTTLE)
                        scale = -scale;
                    
                    let from = (scale > 0) ? 0 : this.duration;
                         
                    this.play(scale, from);
                }else
                    this.issueEvent("stopped");

            }

            //TODO: use repeat to continually play back numation 
            repeat(count = 1){
                this.REPEAT = Math.max(0,parseFloat(count));
                return this;
            } 
             //TODO: allow scale to control playback speed and direction
            play(scale = 1, from = 0) {
                this.SCALE = scale;
                this.time = from;
                spark.queueUpdate(this);
                this.issueEvent("started");
                return this;
            }

            set(i=0){
                if(i >= 0)
                    this.run(i*this.duration);
                else
                    this.run(this.duration - i*this.duration);
            }


            shuttle(SHUTTLE = true){
                this.SHUTTLE = !!SHUTTLE;
                return this;
            }

            addEventListener(event, listener) {
                if (typeof(listener) === "function") {
                    if (!this.events[event])
                        this.events[event] = [];
                    this.events[event].push(listener);
                }
            }

            removeEventListener(event, listener) {
                if (typeof(listener) === "function") {
                    let events = this.events[event];
                    if (events) {
                        for (let i = 0; i < events.length; i++)
                            if (events[i] === listener)
                                return e(vents.splice(i, 1), true);
                    }
                }
                return false;
            }

            issueEvent(event) {
                let events = this.events[event];

                if (events)
                    events.forEach(e => e(this));
            }

            toCSSString(keyfram_id) {

                const easing = "linear";

                const strings = [`.${keyfram_id}{animation:${keyfram_id} ${this.duration}ms ${Animation.ease_out.toString()}}`, `@keyframes ${keyfram_id}{`];

                // TODO: Use some function to determine the number of steps that should be taken
                // This should reflect the different keyframe variations that can occure between
                // properties.
                // For now, just us an arbitrary number

                const len = 2;
                const len_m_1 = len - 1;
                for (let i = 0; i < len; i++) {

                    strings.push(`${Math.round((i/len_m_1)*100)}%{`);

                    for (let name in this.props)
                        strings.push(this.props[name].toCSSString((i / len_m_1) * this.duration, name.replace(/([A-Z])/g, (match, p1) => "-" + match.toLowerCase())) + ";");

                    strings.push("}");
                }

                strings.push("}");

                return strings.join("\n");
            }

            beginCSSAnimation() {
                if (!this.CSS_ANIMATING) {

                    const anim_class = "class" + ((Math.random() * 10000) | 0);
                    this.CSS_ANIMATING = anim_class;

                    this.obj.classList.add(anim_class);
                    let style = document.createElement("style");
                    style.innerHTML = this.toCSSString(anim_class);
                    document.head.appendChild(style);
                    this.style = style;

                    setTimeout(this.endCSSAnimation.bind(this), this.duration);
                }
            }

            endCSSAnimation() {
                if (this.CSS_ANIMATING) {
                    this.obj.classList.remove(this.CSS_ANIMATING);
                    this.CSS_ANIMATING = "";
                    this.style.parentElement.removeChild(this.style);
                    this.style = null;
                }
            }
        }

        class AnimGroup {

            constructor() {
                this.seq = [];
                this.time = 0;
                this.duration = 0;
                this.SHUTTLE = false;
                this.REPEAT = 0;
                this.SCALE = 1;
            }

            destroy() {
                this.seq.forEach(seq => seq.destroy());
                this.seq = null;
            }

            add(seq) {
                this.seq.push(seq);
                this.duration = Math.max(this.duration, seq.duration);
            }

            run(t) {
                for (let i = 0, l = this.seq.length; i < l; i++) {
                    let seq = this.seq[i];
                    seq.run(t);
                }

                if (t >= this.duration)
                    return false;

                return true;
            }

            scheduledUpdate(a, t) {
                this.time += t * this.SCALE;
                if (this.run(this.time))
                    spark.queueUpdate(this);
                else if(repeat){
                    let scale = this.scale;
                    
                    repeat--;

                    if(this.SHUTTLE)
                        scale = -scale;
                    
                    let from = (scale > 0) ? 0 : this.duration;
                         
                    this.play(scale, from);
                }
            }

            shuttle(SHUTTLE = true){
                this.SHUTTLE = !!SHUTTLE;
                return this;
            }

            stop(){
                return this;
            }

            set(i=0){
                if(i >= 0)
                    this.run(i*this.duration);
                else
                    this.run(this.duration - i*this.duration);
            }

            //TODO: allow scale to control playback speed and direction
            play(scale = 1, from = 0) {
                this.SCALE = scale;
                this.time = from;
                spark.queueUpdate(this);
                return this;
            }
            //TODO: use repeat to continually play back numation 
            repeat(count = 0){
                this.REPEAT = Math.max(0,parseInt(count));
                return this;
            }    
        }

        const GlowFunction = function(...args) {

            if (args.length > 1) {

                let group = new AnimGroup();

                for (let i = 0; i < args.length; i++) {
                    let data = args[i];

                    let obj = data.obj;
                    let props = {};

                    Object.keys(data).forEach(k => { if (!(({ obj: true, match: true, delay:true })[k])) props[k] = data[k]; });

                    group.add(new AnimSequence(obj, props));
                }

                return group;

            } else {
                let data = args[0];

                let obj = data.obj;
                let props = {};

                Object.keys(data).forEach(k => { if (!(({ obj: true, match: true, delay:true })[k])) props[k] = data[k]; });

                let seq = new AnimSequence(obj, props);

                return seq;
            }
        };

        Object.assign(GlowFunction, {

            createSequence: GlowFunction,

            createGroup: function(...rest) {
                let group = new AnimGroup;
                rest.forEach(seq => group.add(seq));
                return group;
            },

            set USE_TRANSFORM(v) { USE_TRANSFORM = !!v; },
            get USE_TRANSFORM() { return USE_TRANSFORM; },

            linear: Linear,
            ease: new CSS_Bezier$1(0.25, 0.1, 0.25, 1),
            ease_in: new CSS_Bezier$1(0.42, 0, 1, 1),
            ease_out: new CSS_Bezier$1(0.2, 0.8, 0.3, 0.99),
            ease_in_out: new CSS_Bezier$1(0.42, 0, 0.58, 1),
            overshoot: new CSS_Bezier$1(0.2, 1.5, 0.2, 0.8),
            custom: (x1, y1, x2, y2) => new CSS_Bezier$1(x1, y1, x2, y2)
        });

        return GlowFunction;
    })();

const CSS_Transform2D$2 = CSSParser.types.transform2D;

function setToWithTransform(box_a, box_b, seq){
    const start_width_as_percentage = box_a.width / box_b.width;
    const start_height_as_percentage = box_a.height / box_b.height;
    const pos_x_diff = -(box_b.x - box_a.x);
    const pos_y_diff = -(box_b.y - box_a.y);

    let ATransform = new CSS_Transform2D$2(pos_x_diff, pos_y_diff, start_width_as_percentage, start_height_as_percentage, 0);
    let BTransform = new CSS_Transform2D$2(0, 0, 1, 1, 0);

    seq.props.transform.keys[0].val = ATransform;
    seq.props.transform.keys[1].val = BTransform;
}

function setTo(to, seq, duration, easing, from){

    const cs = window.getComputedStyle(to, null);
    const rect = to.getBoundingClientRect();
    const from_rect = from.getBoundingClientRect();

    let to_width = cs.getPropertyValue("width");
    let to_height = cs.getPropertyValue("height");
    let margin_left = parseFloat(cs.getPropertyValue("margin-left"));
    let to_bgc = cs.getPropertyValue("background-color");
    let to_c = cs.getPropertyValue("color");
    const pos = cs.getPropertyValue("position");

    /* USING TRANSFORM */

    //Use width and height a per

    if(false){
        setToWithTransform(from_rect, rect, seq);
        //left.keys[0].val = new left.type(start_left, "px");
        //left.keys[1].val = new left.type(final_left,"px");
        seq.props.transform.keys[1].dur = duration;
        seq.props.transform.keys[1].len = duration;
        seq.props.transform.keys[1].ease = easing;
        seq.props.transform.duration = duration;
    }else{
        ////////////////////// LEFT ////////////////////// 

        const left = seq.props.left;
        let start_left = 0, final_left = 0, abs_diff = 0;

        abs_diff = (left.keys[0].val - rect.left);

        if(pos== "relative"){
            //get existing offset 
            const left = parseFloat(cs.getPropertyValue("left")) || 0;

            start_left = abs_diff +left;
            final_left = left;
        }else{
            start_left = to.offsetLeft + abs_diff;
            final_left = to.offsetLeft;
        }

        left.keys[0].val = new left.type(start_left, "px");
        left.keys[1].val = new left.type(final_left,"px");
        left.keys[1].dur = duration;
        left.keys[1].len = duration;
        left.keys[1].ease = easing;
        left.duration = duration;

        ////////////////////// TOP ////////////////////// 
        const top = seq.props.top;
        let start_top = 0, final_top = 0;

        abs_diff = (top.keys[0].val - rect.top);

        if(pos== "relative"){
             const top = parseFloat(cs.getPropertyValue("top")) || 0;
            start_top = abs_diff + top;
            final_top = top;
        }else{
            start_top = to.offsetTop + abs_diff;
            final_top = to.offsetTop;
        }

        top.keys[0].val = new top.type(start_top, "px");
        top.keys[1].val = new top.type(final_top,"px");
        top.keys[1].dur = duration;
        top.keys[1].len = duration;
        top.keys[1].ease = easing;
        top.duration = duration;

        ////////////////////// WIDTH ////////////////////// 

        seq.props.width.keys[0].val = new seq.props.width.type(to_width);
        seq.props.width.keys[0].dur = duration;
        seq.props.width.keys[0].len = duration;
        seq.props.width.keys[0].ease = easing;
        seq.props.width.duration = duration;

        ////////////////////// HEIGHT ////////////////////// 

        seq.props.height.keys[0].val = new seq.props.height.type(to_height);
        seq.props.height.keys[0].dur = duration;
        seq.props.height.keys[0].len = duration; 
        seq.props.height.keys[0].ease = easing; 
        seq.props.height.duration = duration;

    }
        to.style.transformOrigin = "top left";

    ////////////////////// BG COLOR ////////////////////// 

    seq.props.backgroundColor.keys[0].val = new seq.props.backgroundColor.type(to_bgc);
    seq.props.backgroundColor.keys[0].dur = duration; 
    seq.props.backgroundColor.keys[0].len = duration; 
    seq.props.backgroundColor.keys[0].ease = easing; 
    seq.props.backgroundColor.duration = duration;

    ////////////////////// COLOR ////////////////////// 

    seq.props.color.keys[0].val = new seq.props.color.type(to_c);
    seq.props.color.keys[0].dur = duration; 
    seq.props.color.keys[0].len = duration; 
    seq.props.color.keys[0].ease = easing; 
    seq.props.color.duration = duration;

    seq.obj = to;



    seq.addEventListener("stopped", ()=>{
        seq.unsetProps();
    });
}

/**
    Transform one element from another back to itself
    @alias module:wick~internals.TransformTo
*/
function TransformTo(element_from, element_to, duration = 500, easing = Animation.linear, HIDE_OTHER = false) {
    let rect = element_from.getBoundingClientRect();
    let cs = window.getComputedStyle(element_from, null);
    let margin_left = parseFloat(cs.getPropertyValue("margin"));

    let seq = Animation.createSequence({
        obj: element_from,
        // /transform: [{value:"translate(0,0)"},{value:"translate(0,0)"}],
        width: { value: "0px"},
        height: { value: "0px"},
        backgroundColor: { value: "rgb(1,1,1)"},
        color: { value: "rgb(1,1,1)"},
        left: [{value:rect.left+"px"},{ value: "0px"}],
        top: [{value:rect.top+"px"},{ value: "0px"}]
    });

    if (!element_to) {

        let a = (seq) => (element_to, duration = 500, easing = Animation.linear,  HIDE_OTHER = false) => {
            setTo(element_to, seq, duration, easing, element_from);
            seq.duration = duration;
        console.log(seq.toCSSString("MumboJumbo"));
            return seq;
        };

        return a(seq);
    }

    setTo(element_to, duration, easing, element_from);
    seq.duration = duration;
    return seq;
}

const Transitioneer = (function() {

    let obj_map = new Map();
    let ActiveTransition = null;

    function $in(...data) {

        let
            seq = null,
            length = data.length,
            delay = 0;

        if (typeof(data[length - 1]) == "number")
            delay = data[length - 1], length--;

        for (let i = 0; i < length; i++) {
            let anim_data = data[i];

            if (typeof(anim_data) == "object") {

                if (anim_data.match && this.TT[anim_data.match]) {
                    let
                        duration = anim_data.duration,
                        easing = anim_data.easing;
                    seq = this.TT[anim_data.match](anim_data.obj, duration, easing);
                } else
                    seq = Animation.createSequence(anim_data);

                //Parse the object and convert into animation props. 
                if (seq) {
                    this.in_seq.push(seq);
                    this.in_duration = Math.max(this.in_duration, seq.duration);
                    if (this.OVERRIDE) {

                        if (obj_map.get(seq.obj)) {
                            let other_seq = obj_map.get(seq.obj);
                            other_seq.removeProps(seq);
                        }

                        obj_map.set(seq.obj, seq);
                    }
                }
            }
        }

        this.in_duration = Math.max(this.in_duration, parseInt(delay));

        return this.in;
    }


    function $out(...data) {
        //Every time an animating component is added to the Animation stack delay and duration need to be calculated.
        //The highest in_delay value will determine how much time is afforded before the animations for the in portion are started.
        let
            seq = null,
            length = data.length,
            delay = 0,
            in_delay = 0;

        if (typeof(data[length - 1]) == "number") {
            if (typeof(data[length - 2]) == "number") {
                in_delay = data[length - 2];
                delay = data[length - 1];
                length -= 2;
            } else
                delay = data[length - 1], length--;
        }

        for (let i = 0; i < length; i++) {
            let anim_data = data[i];

            if (typeof(anim_data) == "object") {

                if (anim_data.match) {
                    this.TT[anim_data.match] = TransformTo(anim_data.obj);
                } else {
                    let seq = Animation.createSequence(anim_data);
                    if (seq) {
                        this.out_seq.push(seq);
                        this.out_duration = Math.max(this.out_duration, seq.duration);
                        if (this.OVERRIDE) {

                            if (obj_map.get(seq.obj)) {
                                let other_seq = obj_map.get(seq.obj);
                                other_seq.removeProps(seq);
                            }

                            obj_map.set(seq.obj, seq);
                        }
                    }

                    this.in_delay = Math.max(this.in_delay, parseInt(delay));
                }
            }
        }
    }



    class Transition {
        constructor(override = true) {
            this.in_duration = 0;
            this.out_duration = 0;
            this.PLAY = true;

            this.reverse = false;

            this.time = 0;

            // If set to zero transitions for out and in will happen simultaneously.
            this.in_delay = 0;

            this.in_seq = [];
            this.out_seq = [];

            this.TT = {};
            //Final transition time is given by max(start_len+in_delay, end_len);\
            ActiveTransition = this;

            this.out = $out.bind(this);
            this.in = $in.bind(this);

            Object.defineProperty(this.out, "out_duration", {
                get: () => this.out_duration
            });

            this.OVERRIDE = override;
        }

        destroy() {
            let removeProps = function(seq) {

                if (!seq.DESTROYED) {
                    if (obj_map.get(seq.obj) == seq)
                        obj_map.delete(seq.obj);
                }

                seq.destroy();
            };
            this.in_seq.forEach(removeProps);
            this.out_seq.forEach(removeProps);
            this.in_seq.length = 0;
            this.out_seq.length = 0;
            this.res = null;
            this.out = null;
            this.in = null;
        }

        get duration() {
            return Math.max(this.in_duration + this.in_delay, this.out_duration);
        }


        start(time = 0, speed = 1, reverse = false) {

            for (let i = 0; i < this.in_seq.length; i++) {
                // let seq = this.in_seq[i];
                // seq.beginCSSAnimation()
            }

            this.time = time;
            this.speed = Math.abs(speed);
            this.reverse = reverse;

            if (this.reverse)
                this.speed = -this.speed;

            return new Promise((res, rej) => {
                if (this.duration > 0)
                    this.scheduledUpdate(0, 0);
                if (this.duration < 1)
                    return res();
                this.res = res;
            });
        }

        play(t) {


            this.PLAY = true;
            let time = this.duration * t;
            this.step(time);
            return time;
        }

        stop() {
            this.PLAY = false;
            //There may be a need to kill any existing CSS based animations
        }

        step(t) {

            for (let i = 0; i < this.out_seq.length; i++) {
                let seq = this.out_seq[i];
                if (!seq.run(t) && !seq.FINISHED) {
                    seq.issueEvent("stopped");
                    seq.FINISHED = true;
                }
            }

            t = Math.max(t - this.in_delay, 0);

            for (let i = 0; i < this.in_seq.length; i++) {
                let seq = this.in_seq[i];
                if (!seq.run(t) && !seq.FINISHED) {
                    seq.issueEvent("stopped");
                    seq.FINISHED = true;
                }
            }

        }

        scheduledUpdate(step, time) {
            if (!this.PLAY) return;

            this.time += time * this.speed;

            this.step(this.time);


            if (this.res && this.time >= this.in_delay) {
                this.res();
                this.res = null;
            }

            if (this.reverse) {
                if (this.time > 0)
                    return spark.queueUpdate(this);
            } else {
                if (this.time < this.duration)
                    return spark.queueUpdate(this);
            }

            if (this.res)
                this.res();

            this.destroy();
        }
    }

    return { createTransition: (OVERRIDE) => new Transition(OVERRIDE) };
})();

Object.assign(Animation, {
	createTransition:(...args) => Transitioneer.createTransition(...args),
	transformTo:(...args) => TransformTo(...args)
});

const Globals = new Set([
    "window",
    "document",
    "JSON",
    "HTMLElement",
]);

//Function.apply(Function, [binding.arg_key || binding.tap_name, "event", "model", "emit", "presets", "static", "src", binding.val]);
class ScriptIO extends IOBase {
    constructor(scope, errors, tap, binding, node, statics) {

        let presets = scope.presets;
        let ids = binding.ids;
        let func, HAVE_CLOSURE = false;

        const names = [binding.arg_key || binding.tap_name, "emit"];
        const props = [null, null];


        //TODO, do this before building of script, when the script is first compiled. 
        for(var i = 0; i < ids.length; i++){
            let id = ids[i];
            if(!window[id]){

                if(id == "wick"){
                    props.push(wick);
                    names.push(id);
                }

                if(id == "glow"){
                    props.push(Animation);
                    names.push(id);
                }

                if(id == "whind"){
                    props.push(whind$1);
                    names.push(id);
                }

                if(presets.custom[id]){
                    props.push(presets.custom[id]);
                    names.push(id);
                }
                //createTapReceiver 
            }
        }

        try {
            if (binding._func_) {
                func = binding._func_;
                if(binding.HAVE_CLOSURE)
                    HAVE_CLOSURE = true;
            } else {
                func = Function.apply(Function, names.concat([binding.val]));
                binding._func_ = func;
            }
        } catch (e) {
            errors.push(e);
            console.error(`Script error encountered in ${statics.url || "virtual file"}:${node.line+1}:${node.char}`);
            console.warn(binding.val);
            console.error(e);
            func = () => {};
        }

        super(tap);

        this.function = binding.val;
        this.HAVE_CLOSURE = HAVE_CLOSURE;

        if(this.HAVE_CLOSURE)
            this._func_ = func;
        else
            this._func_ = func.bind(scope);
        
        this.scope = scope;

        let func_bound = this.emit.bind(this);
        func_bound.onTick = this.onTick.bind(this);

        this.props = props;
        this.props[1] = new Proxy(func_bound, { set: (obj, name, value) => { obj(name, value); } });
        this.meta = null;
        this.url = statics.url;

        this.offset = node.offset;
        this.char = node.char;
        this.line = node.line;
    }

    /**
     * Removes all references to other objects.
     * Calls destroy on any child objects.
     */
    destroy() {
        this._func_ = null;
        this.scope = null;
        this._bound_emit_function_ = null;
        this._meta = null;

    }

    down(value, meta = { event: null }) {
        this.meta = meta;
        const src = this.scope;
        try {
            this.props[0] = value;

            if(this.HAVE_CLOSURE)
                this._func_.apply(this, this.props);
            else
                this._func_.apply(this, this.props);
        } catch (e) {
            console.error(`Script error encountered in ${this.url || "virtual file"}:${this.line+1}:${this.char}`);
            console.warn(this.function);
            console.error(e);
        }
    }

    emit(name, value) {
        if (
            typeof(name) !== "undefined" &&
            typeof(value) !== "undefined"
        ) {
            this.scope.upImport(name, value, this.meta);
        }
    }
    // Same as emit, except the message is generated on the next global tick. Usefule for actions which required incremental updates to the ui.
    // Value
    onTick(name){
        spark.queueUpdate({
            _SCHD_:0, // Meta value for spark;
            scheduledUpdate:(s,d)=>this.emit(name, {step:s,diff:d})
        });
    }
}

function replaceEscapedHTML(string) {
    let out_string = string.toString();

    /*  https://en.wikipedia.org/wiki/Character_encodings_in_HTML
        &amp;   → & (ampersand, U+0026)
        &lt;    → < (less-than sign, U+003C)
        &gt;    → > (greater-than sign, U+003E)
        &quot;  → " (quotation mark, U+0022)
        &apos;  → ' (apostrophe, U+0027)
    */
    
    out_string = out_string.split(/(\&\#*[a-zA-Z0-1]+;)/g).map(replaceEncoding).join("");
    
    return out_string;
}

const EncodingMap = new Map([
    ["&amp;", "&"],
    ["&lt;", "<"],
    ["&gt;", ">"],
    ["&quot;", '"'],
    ["&apos;", "'"],
    ["&nbsp;", "    "]
]);

function replaceEncoding(str) {
    let rep = EncodingMap.get(str);
    if (str[0] == "&" && str.slice(-1) == ";") {
        if (rep)
            return rep;
        else {
            if (str[2] == "x")
                return String.fromCharCode(parseInt(str.slice(2, -1), 16));
            else
                return String.fromCharCode(parseInt(str.slice(2, -1)));
        }
    }
    return str;
}

const DYNAMICbindingID = 0;
const RAW_VALUEbindingID = 1;
const TEMPLATEbindingID = 2;
const EVENTbindingID = 3;

const ATTRIB = 1;
const STYLE = 2;
const HTML$1 = 3;
const TEXT$1 = 4;
const INPUT = 5;
const SCRIPT = 6;
const EVENT = 7;
const BOOL = 8;

/**
 * Binding builder for expressions
 *
 * @class      ExpressionBinding (name)
 */
class EventBinding {
    constructor(prop) {
        this.arg = null;
        this.event = prop;
    }

    _bind_(scope, errors, taps, element, eventname) {
        return new EventIO(scope, errors, taps, element, eventname, this.event, this.arg);
    }

    get bindings() {
        if (this.argument) {
            if (this.argument.type == TEMPLATEbindingID)
                return [...this.argument.bindings, this.event];
            else
                return [this.argument, this.event];
        }
        return [this.event];
    }
    set bindings(v) {}

    get type() {
        return TEMPLATEbindingID;
    }
    set type(v) {}

    set argument(binding) {
        this.arg = binding;
    }
}

/**
 * Binding builder for expressions
 *
 * @class      ExpressionBinding (name)
 */
class ExpressionBinding {
    constructor(binds, func) {
        this.bindings = binds;
        this.func = func;
        this.arg = null;
        this.attrib = "";
    }

    _bind_(scope, errors, taps, element) {
        switch (this.method) {
            case BOOL:
                return new BooleanExpressionIO(scope, errors, taps, element, this.bindings, this.func);
            case INPUT:
                return new InputExpressionIO(scope, errors, taps, element, this.bindings, this.func);
            case ATTRIB:
                return new AttribExpressionIO(scope, errors, taps, element, this.bindings, this.func, this.attrib);
            default:
                return new ExpressionIO(scope, errors, taps, element, this.bindings, this.func);
        }
    }

    get type() {
        return TEMPLATEbindingID;
    }
    set type(v) {}
}


class DynamicBinding {

    constructor() {
        this.tap_name = "";
        this.tap_id = 0;
        this.val = "";
        this._func_ = null;
        this.method = 0;
        this.argKey = null;
        this.argVal = null;
        this.attrib = "";
    }

    _bind_(scope, errors, taps, element, attr = "", node = null, statics = null) {

        let tap = scope.getTap(this.tap_name); //taps[this.tap_id];
        switch (this.method) {
            case INPUT:
                return new InputIO(scope, errors, tap, element, this.argKey);
            case BOOL:
                return new BooleanIO(scope, errors, tap, element, this.argVal);
            case ATTRIB:
                return new AttribIO(scope, errors, tap, attr, element, this.argVal);
            case SCRIPT:
                return new ScriptIO(scope, errors, tap, this, node, statics);
            default:
                return new IO(scope, errors, tap, element, this.argVal);
        }
    }

    get type() {
        return DYNAMICbindingID;
    }
    set type(v) {}

    toString() { return `((${this.tap_name}))`; }

    set argument(binding) {
        if (binding instanceof DynamicBinding) {
            this.argKey = binding.tap_name;
            this.argVal = binding.val;
        } else if (binding instanceof RawValueBinding) {
            this.argVal = binding.val;
        }
    }
}

class RawValueBinding {
    constructor(val) {
        this.val = replaceEscapedHTML(val);
        this.method = 0;
    }

    _bind_(scope, errors, taps, element, prop = "") {
        try {

            switch (this.method) {
                case TEXT$1:
                    element.data = this.val;
                    break;
                case ATTRIB:
                    {
                        if (prop == "class") {
                            element.classList.add.apply(element.classList, this.val.split(" "));
                        } else
                            element.setAttribute(prop, this.val);
                    }
            }
        } catch (e) {
            console.error(`Unable to process the value ${this.val}`);
            console.error(e);
        }
    }
    get _value_() { return this.val; }
    set _value_(v) {}
    get type() { return RAW_VALUEbindingID; }
    set type(v) {}
    toString() { return this.val; }
}

/* Templating Syntax */
const barrier_a_start = "(";
const barrier_a_end = ")";
const barrier_b_start = "|";
const barrier_b_end = "|";

const e$2 = (tk, env, output, lex, prv_lex) => {            /*USED for ASI*/            if (env.ASI && lex.tx !== ")" && !lex.END) {                let ENCOUNTERED_NL = (lex.tx == "}" || lex.END);                while (!ENCOUNTERED_NL && !prv_lex.END && prv_lex.off < lex.off) {                    prv_lex.next();                    if (prv_lex.ty == prv_lex.types.nl)                        ENCOUNTERED_NL = true;                }            if (ENCOUNTERED_NL)                return ";";            }            if(lex.END)            return ";";            return null;        }, nf = ()=>-1, S$0=function (sym,env,lex,state) {return sym},
start$0=function (sym,env,lex,state) {return sym[0]},
statement_list$0=function (sym,env,lex,state) {return [sym[0]]},
statement_list$1=function (sym,env,lex,state) {return (sym[0].push(sym[1]), sym[0]);},
empty_statement$0=function (sym,env,lex,state) {this.type = "empty";},
iteration_statement$0=function (sym,env,lex,state) {return (new env.functions.for_stmt(sym[2], sym[4], sym[6], sym[8]))},
iteration_statement$1=function (sym,env,lex,state) {return (new env.functions.for_stmt(null, sym[4], sym[6], sym[8]))},
iteration_statement$2=function (sym,env,lex,state) {return (new env.functions.for_stmt(sym[2], null, sym[6], sym[8]))},
iteration_statement$3=function (sym,env,lex,state) {return (new env.functions.for_stmt(sym[2], sym[4], null, sym[8]))},
iteration_statement$4=function (sym,env,lex,state) {return (new env.functions.for_stmt(null, null, sym[4], sym[6]))},
iteration_statement$5=function (sym,env,lex,state) {return (new env.functions.for_stmt(sym[2], null, null, sym[8]))},
iteration_statement$6=function (sym,env,lex,state) {return (new env.functions.for_stmt(null, null, null, sym[5]))},
iteration_statement$7=function (sym,env,lex,state) {return (new env.functions.for_stmt(sym[3], sym[5], sym[7], sym[9]))},
iteration_statement$8=function (sym,env,lex,state) {return (new env.functions.for_stmt(sym[3], sym[5], null, sym[9]))},
iteration_statement$9=function (sym,env,lex,state) {return (new env.functions.for_stmt(sym[3], null, sym[7], sym[9]))},
iteration_statement$10=function (sym,env,lex,state) {return (new env.functions.for_stmt(sym[3], null , null, sym[9]))},
iteration_statement$11=function (sym,env,lex,state) {return (new env.functions.for_stmt(sym[2], sym[3], null, sym[6]))},
iteration_statement$12=function (sym,env,lex,state) {return (new env.functions.for_stmt(sym[2], null, sym[5], sym[6]))},
iteration_statement$13=function (sym,env,lex,state) {return (new env.functions.for_stmt(sym[2], null, null, sym[5]))},
iteration_statement$14=function (sym,env,lex,state) {return (new env.functions.for_in_stmt(sym[2], sym[4], sym[6]))},
iteration_statement$15=function (sym,env,lex,state) {return (new env.functions.for_in_stmt(sym[3], sym[5], sym[7]))},
iteration_statement$16=function (sym,env,lex,state) {return (new env.functions.for_of_stmt(sym[2], sym[4], sym[6]))},
iteration_statement$17=function (sym,env,lex,state) {return (new env.functions.for_of_stmt(sym[3], sym[5], sym[7], true))},
iteration_statement$18=function (sym,env,lex,state) {return (new env.functions.for_of_stmt(sym[4], sym[6], sym[8], true))},
continue_statement$0=function (sym,env,lex,state) {return (new env.functions.continue_stmt(sym[1]))},
break_statement$0=function (sym,env,lex,state) {return (new env.functions.break_stmt(sym[1]))},
return_statement$0=function (sym,env,lex,state) {return (new env.functions.return_stmt([]))},
case_block$0=function (sym,env,lex,state) {return []},
case_block$1=function (sym,env,lex,state) {return sym[1].concat(sym[2].concat(sym[3]))},
case_block$2=function (sym,env,lex,state) {return sym[1].concat(sym[2])},
case_block$3=function (sym,env,lex,state) {return sym[1]},
case_clauses$0=function (sym,env,lex,state) {return sym[0].concat(sym[1])},
case_clause$0=function (sym,env,lex,state) {return (new env.functions.case_stmt(sym[1], sym[3]))},
case_clause$1=function (sym,env,lex,state) {return (new env.functions.case_stmt(sym[1]))},
default_clause$0=function (sym,env,lex,state) {return (new env.functions.default_case_stmt(sym[2]))},
default_clause$1=function (sym,env,lex,state) {return (new env.functions.default_case_stmt())},
try_statement$0=function (sym,env,lex,state) {return (new env.functions.try_stmt(sym[1],sym[2]))},
try_statement$1=function (sym,env,lex,state) {return (new env.functions.try_stmt(sym[1],null ,sym[2]))},
try_statement$2=function (sym,env,lex,state) {return (new env.functions.try_stmt(sym[1], sym[2], sym[3]))},
variable_declaration_list$0=function (sym,env,lex,state) {return sym[0].push(sym[2])},
let_or_const$0=function (sym,env,lex,state) {return "let"},
let_or_const$1=function (sym,env,lex,state) {return "const"},
function_declaration$0=function (sym,env,lex,state) {return new env.functions.funct_decl(null, sym[2], sym[5])},
function_declaration$1=function (sym,env,lex,state) {return new env.functions.funct_decl(sym[1], sym[3], sym[6])},
formal_parameters$0=function (sym,env,lex,state) {return (sym[0].push(sym[2]), sym[0])},
arrow_function$0=function (sym,env,lex,state) {return new env.functions.funct_decl(null, sym[0], sym[2])},
class_tail$0=function (sym,env,lex,state) {return new env.functions.class_tail(sym)},
class_tail$1=function (sym,env,lex,state) {return new env.functions.class_tail([null, ... sym[0]])},
class_tail$2=function (sym,env,lex,state) {return new env.functions.class_tail([sym[0], null, null])},
class_tail$3=function (sym,env,lex,state) {return null},
class_element_list$0=function (sym,env,lex,state) {return (sym[0].push(sym[1]))},
class_element$0=function (sym,env,lex,state) {return (sym[1].static = true, sym[1])},
expression$0=function (sym,env,lex,state) {return Array.isArray(sym[0]) ? (sym[0].push(sym[2]) , sym[0]) : [sym[0], sym[2]];},
arguments$0=function (sym,env,lex,state) {return [];},
argument_list$0=function (sym,env,lex,state) {return (sym[0].push(new env.functions.spread_expr(env, sym.slice(2,4))), env[0])},
property_definition$0=function (sym,env,lex,state) {this.id = sym[0];},
colon_assignment$0=function (sym,env,lex,state) {this.id = sym[0]; this.expr = sym[1];},
array_literal$0=function (sym,env,lex,state) {return [ ]},
element_list$0=function (sym,env,lex,state) {return [sym[1]]},
element_list$1=function (sym,env,lex,state) {return (sym[0].push(sym[2]),sym[0])},
cover_parenthesized_expression_and_arrow_parameter_list$0=function (sym,env,lex,state) {return null;},
cover_parenthesized_expression_and_arrow_parameter_list$1=function (sym,env,lex,state) {return new env.functions.spread_expr(env, sym.slice(1,3))},
cover_parenthesized_expression_and_arrow_parameter_list$2=function (sym,env,lex,state) {return Array.isArray(sym[0]) ? (sym[1].push(new env.functions.spread_expr(env, sym.slice(3,5))) , sym[1]) : [sym[0], new env.functions.spread_expr(env, sym.slice(3,5))];},
symbols = ["{",
"}",
"(",
")",
"[",
"]",
".",
"...",
";",
",",
"<",
">",
"<=",
">=",
"==",
"!=",
"===",
"!==",
"+",
"-",
"*",
"%",
"/",
"**",
"++",
"--",
"<<",
">>",
">>>",
"&",
"|",
"^",
"!",
"~",
"&&",
"||",
"?",
":",
"+=",
"-=",
"*=",
"%=",
"/=",
"**=",
"<<=",
">>=",
">>>=",
"&=",
"|=",
"^=",
"=>",
"####"],
goto = [(v,r = gt0[v]) => (r >= 0 ? r : -1),
nf,
nf,
nf,
(v,r = gt1[v]) => (r >= 0 ? r : -1),
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
(v,r = gt2[v]) => (r >= 0 ? r : -1),
nf,
nf,
nf,
nf,
(v,r = gt3[v]) => (r >= 0 ? r : -1),
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
(v,r = gt4[v]) => (r >= 0 ? r : -1),
(v,r = gt5[v]) => (r >= 0 ? r : -1),
(v,r = gt6[v]) => (r >= 0 ? r : -1),
(v,r = gt7[v]) => (r >= 0 ? r : -1),
(v,r = gt8[v]) => (r >= 0 ? r : -1),
(v,r = gt9[v]) => (r >= 0 ? r : -1),
(v,r = gt10[v]) => (r >= 0 ? r : -1),
nf,
(v,r = gt11[v]) => (r >= 0 ? r : -1),
(v,r = gt12[v]) => (r >= 0 ? r : -1),
nf,
(v,r = gt13[v]) => (r >= 0 ? r : -1),
(v,r = gt14[v]) => (r >= 0 ? r : -1),
(v,r = gt15[v]) => (r >= 0 ? r : -1),
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
(v,r = gt16[v]) => (r >= 0 ? r : -1),
(v,r = gt17[v]) => (r >= 0 ? r : -1),
(v,r = gt18[v]) => (r >= 0 ? r : -1),
nf,
nf,
nf,
(v,r = gt19[v]) => (r >= 0 ? r : -1),
nf,
nf,
(v,r = gt20[v]) => (r >= 0 ? r : -1),
(v,r = gt21[v]) => (r >= 0 ? r : -1),
nf,
nf,
nf,
nf,
(v,r = gt22[v]) => (r >= 0 ? r : -1),
nf,
nf,
nf,
(v,r = gt23[v]) => (r >= 0 ? r : -1),
(v,r = gt24[v]) => (r >= 0 ? r : -1),
(v,r = gt25[v]) => (r >= 0 ? r : -1),
nf,
(v,r = gt26[v]) => (r >= 0 ? r : -1),
(v,r = gt27[v]) => (r >= 0 ? r : -1),
nf,
nf,
nf,
nf,
(v,r = gt28[v]) => (r >= 0 ? r : -1),
nf,
(v,r = gt29[v]) => (r >= 0 ? r : -1),
(v,r = gt30[v]) => (r >= 0 ? r : -1),
nf,
nf,
nf,
(v,r = gt1[v]) => (r >= 0 ? r : -1),
nf,
(v,r = gt31[v]) => (r >= 0 ? r : -1),
(v,r = gt32[v]) => (r >= 0 ? r : -1),
(v,r = gt33[v]) => (r >= 0 ? r : -1),
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
(v,r = gt34[v]) => (r >= 0 ? r : -1),
(v,r = gt35[v]) => (r >= 0 ? r : -1),
(v,r = gt36[v]) => (r >= 0 ? r : -1),
(v,r = gt37[v]) => (r >= 0 ? r : -1),
(v,r = gt38[v]) => (r >= 0 ? r : -1),
(v,r = gt39[v]) => (r >= 0 ? r : -1),
(v,r = gt40[v]) => (r >= 0 ? r : -1),
(v,r = gt41[v]) => (r >= 0 ? r : -1),
(v,r = gt42[v]) => (r >= 0 ? r : -1),
(v,r = gt43[v]) => (r >= 0 ? r : -1),
(v,r = gt44[v]) => (r >= 0 ? r : -1),
(v,r = gt45[v]) => (r >= 0 ? r : -1),
(v,r = gt46[v]) => (r >= 0 ? r : -1),
(v,r = gt47[v]) => (r >= 0 ? r : -1),
(v,r = gt48[v]) => (r >= 0 ? r : -1),
(v,r = gt49[v]) => (r >= 0 ? r : -1),
(v,r = gt50[v]) => (r >= 0 ? r : -1),
(v,r = gt51[v]) => (r >= 0 ? r : -1),
(v,r = gt52[v]) => (r >= 0 ? r : -1),
(v,r = gt53[v]) => (r >= 0 ? r : -1),
(v,r = gt54[v]) => (r >= 0 ? r : -1),
(v,r = gt55[v]) => (r >= 0 ? r : -1),
(v,r = gt56[v]) => (r >= 0 ? r : -1),
(v,r = gt57[v]) => (r >= 0 ? r : -1),
(v,r = gt58[v]) => (r >= 0 ? r : -1),
nf,
nf,
nf,
nf,
nf,
nf,
(v,r = gt59[v]) => (r >= 0 ? r : -1),
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
(v,r = gt60[v]) => (r >= 0 ? r : -1),
nf,
(v,r = gt61[v]) => (r >= 0 ? r : -1),
(v,r = gt62[v]) => (r >= 0 ? r : -1),
(v,r = gt63[v]) => (r >= 0 ? r : -1),
(v,r = gt64[v]) => (r >= 0 ? r : -1),
nf,
nf,
(v,r = gt65[v]) => (r >= 0 ? r : -1),
nf,
nf,
nf,
(v,r = gt66[v]) => (r >= 0 ? r : -1),
(v,r = gt67[v]) => (r >= 0 ? r : -1),
nf,
nf,
nf,
nf,
(v,r = gt68[v]) => (r >= 0 ? r : -1),
nf,
nf,
(v,r = gt69[v]) => (r >= 0 ? r : -1),
(v,r = gt70[v]) => (r >= 0 ? r : -1),
(v,r = gt71[v]) => (r >= 0 ? r : -1),
nf,
nf,
(v,r = gt72[v]) => (r >= 0 ? r : -1),
nf,
(v,r = gt73[v]) => (r >= 0 ? r : -1),
nf,
nf,
(v,r = gt74[v]) => (r >= 0 ? r : -1),
(v,r = gt75[v]) => (r >= 0 ? r : -1),
nf,
nf,
nf,
(v,r = gt76[v]) => (r >= 0 ? r : -1),
(v,r = gt77[v]) => (r >= 0 ? r : -1),
(v,r = gt78[v]) => (r >= 0 ? r : -1),
nf,
(v,r = gt79[v]) => (r >= 0 ? r : -1),
(v,r = gt80[v]) => (r >= 0 ? r : -1),
nf,
(v,r = gt81[v]) => (r >= 0 ? r : -1),
nf,
nf,
nf,
nf,
nf,
nf,
nf,
(v,r = gt82[v]) => (r >= 0 ? r : -1),
nf,
(v,r = gt83[v]) => (r >= 0 ? r : -1),
nf,
(v,r = gt84[v]) => (r >= 0 ? r : -1),
nf,
nf,
(v,r = gt85[v]) => (r >= 0 ? r : -1),
(v,r = gt86[v]) => (r >= 0 ? r : -1),
(v,r = gt87[v]) => (r >= 0 ? r : -1),
nf,
nf,
nf,
(v,r = gt88[v]) => (r >= 0 ? r : -1),
(v,r = gt89[v]) => (r >= 0 ? r : -1),
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
(v,r = gt90[v]) => (r >= 0 ? r : -1),
nf,
(v,r = gt91[v]) => (r >= 0 ? r : -1),
(v,r = gt92[v]) => (r >= 0 ? r : -1),
nf,
nf,
nf,
nf,
nf,
(v,r = gt93[v]) => (r >= 0 ? r : -1),
(v,r = gt94[v]) => (r >= 0 ? r : -1),
(v,r = gt95[v]) => (r >= 0 ? r : -1),
nf,
nf,
nf,
nf,
nf,
(v,r = gt96[v]) => (r >= 0 ? r : -1),
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
(v,r = gt97[v]) => (r >= 0 ? r : -1),
nf,
nf,
(v,r = gt31[v]) => (r >= 0 ? r : -1),
nf,
nf,
nf,
nf,
nf,
nf,
(v,r = gt98[v]) => (r >= 0 ? r : -1),
nf,
nf,
nf,
nf,
(v,r = gt99[v]) => (r >= 0 ? r : -1),
nf,
(v,r = gt100[v]) => (r >= 0 ? r : -1),
nf,
nf,
nf,
nf,
(v,r = gt101[v]) => (r >= 0 ? r : -1),
nf,
nf,
nf,
(v,r = gt102[v]) => (r >= 0 ? r : -1),
nf,
(v,r = gt103[v]) => (r >= 0 ? r : -1),
nf,
nf,
(v,r = gt104[v]) => (r >= 0 ? r : -1),
nf,
nf,
nf,
(v,r = gt105[v]) => (r >= 0 ? r : -1),
nf,
nf,
nf,
nf,
(v,r = gt106[v]) => (r >= 0 ? r : -1),
(v,r = gt107[v]) => (r >= 0 ? r : -1),
(v,r = gt108[v]) => (r >= 0 ? r : -1),
(v,r = gt3[v]) => (r >= 0 ? r : -1),
nf,
(v,r = gt109[v]) => (r >= 0 ? r : -1),
(v,r = gt110[v]) => (r >= 0 ? r : -1),
nf,
nf,
nf,
nf,
nf,
nf,
(v,r = gt111[v]) => (r >= 0 ? r : -1),
nf,
nf,
(v,r = gt112[v]) => (r >= 0 ? r : -1),
nf,
(v,r = gt113[v]) => (r >= 0 ? r : -1),
nf,
nf,
(v,r = gt114[v]) => (r >= 0 ? r : -1),
nf,
nf,
(v,r = gt115[v]) => (r >= 0 ? r : -1),
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
(v,r = gt116[v]) => (r >= 0 ? r : -1),
nf,
(v,r = gt117[v]) => (r >= 0 ? r : -1),
nf,
nf,
(v,r = gt118[v]) => (r >= 0 ? r : -1),
nf,
(v,r = gt119[v]) => (r >= 0 ? r : -1),
nf,
nf,
nf,
(v,r = gt120[v]) => (r >= 0 ? r : -1),
(v,r = gt121[v]) => (r >= 0 ? r : -1),
nf,
nf,
nf,
nf,
nf,
(v,r = gt122[v]) => (r >= 0 ? r : -1),
nf,
nf,
nf,
nf,
nf,
(v,r = gt123[v]) => (r >= 0 ? r : -1),
nf,
(v,r = gt124[v]) => (r >= 0 ? r : -1),
nf,
nf,
nf,
nf,
(v,r = gt1[v]) => (r >= 0 ? r : -1),
nf,
nf,
nf,
nf,
(v,r = gt125[v]) => (r >= 0 ? r : -1),
nf,
(v,r = gt126[v]) => (r >= 0 ? r : -1),
nf,
nf,
nf,
nf,
nf,
nf,
(v,r = gt127[v]) => (r >= 0 ? r : -1),
nf,
nf,
nf,
(v,r = gt128[v]) => (r >= 0 ? r : -1),
(v,r = gt129[v]) => (r >= 0 ? r : -1),
(v,r = gt130[v]) => (r >= 0 ? r : -1),
(v,r = gt131[v]) => (r >= 0 ? r : -1),
nf,
(v,r = gt132[v]) => (r >= 0 ? r : -1),
nf,
nf,
(v,r = gt74[v]) => (r >= 0 ? r : -1),
(v,r = gt75[v]) => (r >= 0 ? r : -1),
nf,
(v,r = gt133[v]) => (r >= 0 ? r : -1),
(v,r = gt134[v]) => (r >= 0 ? r : -1),
(v,r = gt135[v]) => (r >= 0 ? r : -1),
(v,r = gt136[v]) => (r >= 0 ? r : -1),
(v,r = gt137[v]) => (r >= 0 ? r : -1),
nf,
(v,r = gt88[v]) => (r >= 0 ? r : -1),
(v,r = gt89[v]) => (r >= 0 ? r : -1),
nf,
(v,r = gt138[v]) => (r >= 0 ? r : -1),
nf,
(v,r = gt139[v]) => (r >= 0 ? r : -1),
(v,r = gt140[v]) => (r >= 0 ? r : -1),
(v,r = gt141[v]) => (r >= 0 ? r : -1),
nf,
(v,r = gt142[v]) => (r >= 0 ? r : -1),
nf,
nf,
nf,
nf,
nf,
nf,
nf,
(v,r = gt143[v]) => (r >= 0 ? r : -1),
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
(v,r = gt144[v]) => (r >= 0 ? r : -1),
nf,
nf,
(v,r = gt145[v]) => (r >= 0 ? r : -1),
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
(v,r = gt146[v]) => (r >= 0 ? r : -1),
nf,
nf,
nf,
nf,
nf,
nf,
(v,r = gt147[v]) => (r >= 0 ? r : -1),
(v,r = gt148[v]) => (r >= 0 ? r : -1),
nf,
(v,r = gt149[v]) => (r >= 0 ? r : -1),
(v,r = gt150[v]) => (r >= 0 ? r : -1),
(v,r = gt151[v]) => (r >= 0 ? r : -1),
(v,r = gt152[v]) => (r >= 0 ? r : -1),
(v,r = gt153[v]) => (r >= 0 ? r : -1),
nf,
(v,r = gt154[v]) => (r >= 0 ? r : -1),
nf,
nf,
nf,
nf,
(v,r = gt155[v]) => (r >= 0 ? r : -1),
nf,
nf,
nf,
(v,r = gt156[v]) => (r >= 0 ? r : -1),
nf,
(v,r = gt157[v]) => (r >= 0 ? r : -1),
nf,
nf,
nf,
nf,
nf,
(v,r = gt158[v]) => (r >= 0 ? r : -1),
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
(v,r = gt159[v]) => (r >= 0 ? r : -1),
nf,
(v,r = gt160[v]) => (r >= 0 ? r : -1),
nf,
(v,r = gt161[v]) => (r >= 0 ? r : -1),
nf,
(v,r = gt162[v]) => (r >= 0 ? r : -1),
nf,
nf,
(v,r = gt163[v]) => (r >= 0 ? r : -1),
nf,
nf,
nf,
(v,r = gt164[v]) => (r >= 0 ? r : -1),
(v,r = gt165[v]) => (r >= 0 ? r : -1),
nf,
(v,r = gt166[v]) => (r >= 0 ? r : -1),
(v,r = gt167[v]) => (r >= 0 ? r : -1),
(v,r = gt168[v]) => (r >= 0 ? r : -1),
(v,r = gt169[v]) => (r >= 0 ? r : -1),
nf,
(v,r = gt170[v]) => (r >= 0 ? r : -1),
nf,
nf,
(v,r = gt171[v]) => (r >= 0 ? r : -1),
(v,r = gt172[v]) => (r >= 0 ? r : -1),
nf,
(v,r = gt173[v]) => (r >= 0 ? r : -1),
nf,
(v,r = gt174[v]) => (r >= 0 ? r : -1),
nf,
nf,
(v,r = gt175[v]) => (r >= 0 ? r : -1),
(v,r = gt176[v]) => (r >= 0 ? r : -1),
(v,r = gt177[v]) => (r >= 0 ? r : -1),
nf,
nf,
nf,
nf,
nf,
(v,r = gt178[v]) => (r >= 0 ? r : -1),
(v,r = gt179[v]) => (r >= 0 ? r : -1),
nf,
(v,r = gt180[v]) => (r >= 0 ? r : -1),
nf,
(v,r = gt181[v]) => (r >= 0 ? r : -1),
nf,
(v,r = gt182[v]) => (r >= 0 ? r : -1),
(v,r = gt183[v]) => (r >= 0 ? r : -1),
(v,r = gt184[v]) => (r >= 0 ? r : -1),
(v,r = gt185[v]) => (r >= 0 ? r : -1),
nf,
nf,
nf,
nf,
nf,
nf,
(v,r = gt186[v]) => (r >= 0 ? r : -1),
nf,
(v,r = gt187[v]) => (r >= 0 ? r : -1),
(v,r = gt188[v]) => (r >= 0 ? r : -1),
nf,
nf,
(v,r = gt189[v]) => (r >= 0 ? r : -1),
nf,
nf,
(v,r = gt190[v]) => (r >= 0 ? r : -1),
nf,
nf,
nf,
nf,
nf,
(v,r = gt191[v]) => (r >= 0 ? r : -1),
(v,r = gt192[v]) => (r >= 0 ? r : -1),
nf,
nf,
nf,
nf,
(v,r = gt193[v]) => (r >= 0 ? r : -1),
(v,r = gt194[v]) => (r >= 0 ? r : -1),
nf,
nf,
nf,
nf,
nf,
(v,r = gt195[v]) => (r >= 0 ? r : -1),
nf,
nf,
nf,
nf,
(v,r = gt196[v]) => (r >= 0 ? r : -1),
(v,r = gt1[v]) => (r >= 0 ? r : -1),
nf,
nf,
nf,
nf,
nf,
(v,r = gt197[v]) => (r >= 0 ? r : -1),
nf,
nf,
nf,
nf,
(v,r = gt1[v]) => (r >= 0 ? r : -1),
nf,
nf],
err = [(v)=>(["$"]).includes(v) ? 1 : 0,
(v)=>(["$"]).includes(v) ? 1 : 0,
(v)=>0,
(v)=>0,
(v)=>(["τimport","τexport","{","τthis","θid","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τawait","τvar",";","τif","τdo","τwhile","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst"]).includes(v) ? 1 : 0,
(v)=>(["τimport","τexport","{","τthis","θid","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τawait","τvar",";","τif","τdo","τwhile","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst"]).includes(v) ? 1 : 0,
(v)=>(["τimport","τexport","{","τthis","θid","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τawait","τvar",";","τif","τdo","τwhile","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst"]).includes(v) ? 1 : 0,
(v)=>(["τfrom"]).includes(v) ? 1 : 0,
(v)=>([",","τfrom"]).includes(v) ? 1 : 0,
(v)=>(["τfrom"]).includes(v) ? 1 : 0,
(v)=>(["τfrom"]).includes(v) ? 1 : 0,
(v)=>([";","τimport","τexport","{","τthis","θid","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τawait","τvar","τif","τdo","τwhile","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst"]).includes(v) ? 1 : 0,
(v)=>(["}",","]).includes(v) ? 1 : 0,
(v)=>(["}",","]).includes(v) ? 1 : 0,
(v)=>(["τimport","τexport","{","τthis","θid","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τawait","τvar",";","τif","τdo","τwhile","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst"]).includes(v) ? 1 : 0,
(v)=>([",","τfrom","}"]).includes(v) ? 1 : 0,
(v)=>(["τimport","τexport","{","τthis","θid","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τawait","τvar",";","τif","τdo","τwhile","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst"]).includes(v) ? 1 : 0,
(v)=>(["τfrom",";"]).includes(v) ? 1 : 0,
(v)=>(["}",","]).includes(v) ? 1 : 0,
(v)=>(["}",","]).includes(v) ? 1 : 0,
(v)=>(["$"]).includes(v) ? 1 : 0,
(v)=>(["$"]).includes(v) ? 1 : 0,
(v)=>(["{","τthis","θid","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τawait","τvar",";","τif","τdo","τwhile","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst","}","$","τdefault","τcase"]).includes(v) ? 1 : 0,
(v)=>(["τimport","τexport","{","τthis","θid","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τawait","τvar",";","τif","τdo","τwhile","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst","}","$"]).includes(v) ? 1 : 0,
(v)=>(["τelse","τwhile","τimport","τexport","{","τthis","θid","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τawait","τvar",";","τif","τdo","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst","}","$"]).includes(v) ? 1 : 0,
(v)=>(["τimport","τexport","{","τthis","θid","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τawait","τvar",";","τif","τdo","τwhile","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst","}","$"]).includes(v) ? 1 : 0,
(v)=>(["τimport","τexport","{","τthis","θid","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τawait","τvar",";","τif","τdo","τwhile","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst","}","$"]).includes(v) ? 1 : 0,
(v)=>(["τelse","τwhile","τimport","τexport","{","τthis","θid","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τawait","τvar",";","τif","τdo","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst","}","$"]).includes(v) ? 1 : 0,
(v)=>(["τelse","τwhile","τimport","τexport","{","τthis","θid","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τawait","τvar",";","τif","τdo","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst","}","$"]).includes(v) ? 1 : 0,
(v)=>(["τcatch","τfinally","τelse","τwhile","τimport","τexport","{","τthis","θid","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τawait","τvar",";","τif","τdo","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst","}","$"]).includes(v) ? 1 : 0,
(v)=>(["τelse","τwhile","τimport","τexport","{","τthis","θid","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τawait","τvar",";","τif","τdo","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst","}","$"]).includes(v) ? 1 : 0,
(v)=>(["τelse","τwhile","τimport","τexport","{","τthis","θid","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τawait","τvar",";","τif","τdo","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst","}","$"]).includes(v) ? 1 : 0,
(v)=>(["τelse","τwhile","τimport","τexport","{","τthis","θid","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τawait","τvar",";","τif","τdo","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst","}","$"]).includes(v) ? 1 : 0,
(v)=>(["τelse","τwhile","τimport","τexport","{","τthis","θid","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τawait","τvar",";","τif","τdo","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst","}","$"]).includes(v) ? 1 : 0,
(v)=>(["τin","τof"]).includes(v) ? 1 : 0,
(v)=>(["τin","τof"]).includes(v) ? 1 : 0,
(v)=>(["τelse","τwhile","τimport","τexport","{","τthis","θid","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τawait","τvar",";","τif","τdo","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst","}","$"]).includes(v) ? 1 : 0,
(v)=>(["τelse","τwhile","τimport","τexport","{","τthis","θid","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τawait","τvar",";","τif","τdo","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst","}","$"]).includes(v) ? 1 : 0,
(v)=>(["τelse","τwhile","τimport","τexport","{","τthis","θid","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τawait","τvar",";","τif","τdo","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst","}","$"]).includes(v) ? 1 : 0,
(v)=>(["τelse","τwhile","τimport","τexport","{","τthis","θid","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τawait","τvar",";","τif","τdo","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst","}","$"]).includes(v) ? 1 : 0,
(v)=>(["τelse","τwhile","τimport","τexport","{","τthis","θid","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τawait","τvar",";","τif","τdo","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst","}","$"]).includes(v) ? 1 : 0,
(v)=>(["τelse","τwhile","τimport","τexport","{","τthis","θid","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τawait","τvar",";","τif","τdo","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst","}","$"]).includes(v) ? 1 : 0,
(v)=>(["τelse","τwhile","τimport","τexport","{","τthis","θid","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τawait","τvar",";","τif","τdo","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst","}","$"]).includes(v) ? 1 : 0,
(v)=>(["τdefault","}","τcase"]).includes(v) ? 1 : 0,
(v)=>(["}","τdefault","τcase"]).includes(v) ? 1 : 0,
(v)=>(["τcase","}"]).includes(v) ? 1 : 0,
(v)=>(["τelse","τwhile","τimport","τexport","{","τthis","θid","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τawait","τvar",";","τif","τdo","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst","}","$"]).includes(v) ? 1 : 0,
(v)=>(["τelse","τwhile","τimport","τexport","{","τthis","θid","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τawait","τvar",";","τif","τdo","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst","}","$"]).includes(v) ? 1 : 0,
(v)=>(["τelse","τwhile","τimport","τexport","{","τthis","θid","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τawait","τvar",";","τif","τdo","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst","}","$"]).includes(v) ? 1 : 0,
(v)=>(["τelse","τwhile","τimport","τexport","{","τthis","θid","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τawait","τvar",";","τif","τdo","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst","}","$"]).includes(v) ? 1 : 0,
(v)=>(["τfinally","τelse","τwhile","τimport","τexport","{","τthis","θid","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τawait","τvar",";","τif","τdo","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst","}","$"]).includes(v) ? 1 : 0,
(v)=>(["τelse","τwhile","τimport","τexport","{","τthis","θid","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τawait","τvar",";","τif","τdo","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst","}","$"]).includes(v) ? 1 : 0,
(v)=>([")"]).includes(v) ? 1 : 0,
(v)=>(["τelse","τwhile","τimport","τexport","{","τthis","θid","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τawait","τvar",";","τif","τdo","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst","}","$"]).includes(v) ? 1 : 0,
(v)=>(["τimport","τexport","{","τthis","θid","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τawait","τvar",";","τif","τdo","τwhile","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst","τelse","}","$"]).includes(v) ? 1 : 0,
(v)=>([";",","]).includes(v) ? 1 : 0,
(v)=>([";",","]).includes(v) ? 1 : 0,
(v)=>(["τthis","θid","τtrue","τfalse","τnull","θstr","θnum","[","{","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τawait",";","τimport","τexport","τvar","τif","τdo","τwhile","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst","}","$"]).includes(v) ? 1 : 0,
(v)=>(["θid","{","["]).includes(v) ? 1 : 0,
(v)=>([";",","]).includes(v) ? 1 : 0,
(v)=>([";",","]).includes(v) ? 1 : 0,
(v)=>(["(","[",".","τin","τof","=","*=","/=","%=","+=","-=","<<=",">>=",">>>=","&=","^=","|=","**=","++","--","{"]).includes(v) ? 1 : 0,
(v)=>(["τimport","τexport","{","τthis","θid","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τawait","τvar",";","τif","τdo","τwhile","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst","}","$","τelse"]).includes(v) ? 1 : 0,
(v)=>([")"]).includes(v) ? 1 : 0,
(v)=>([")"]).includes(v) ? 1 : 0,
(v)=>([",",")"]).includes(v) ? 1 : 0,
(v)=>([")"]).includes(v) ? 1 : 0,
(v)=>([",",")"]).includes(v) ? 1 : 0,
(v)=>(["}"]).includes(v) ? 1 : 0,
(v)=>(["}"]).includes(v) ? 1 : 0,
(v)=>([")","]",":","τimport","τexport","{","τthis","θid","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τawait","τvar",";","τif","τdo","τwhile","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst",",","}"]).includes(v) ? 1 : 0,
(v)=>(["=>"]).includes(v) ? 1 : 0,
(v)=>0,
(v)=>0,
(v)=>(["=>"]).includes(v) ? 1 : 0,
(v)=>0,
(v)=>(["=>",".","(","[","τin","τof","=","*=","/=","%=","+=","-=","<<=",">>=",">>>=","&=","^=","|=","**=","++","--","{"]).includes(v) ? 1 : 0,
(v)=>(["(","[",".","τin","τof","=","*=","/=","%=","+=","-=","<<=",">>=",">>>=","&=","^=","|=","**=","++","--","{"]).includes(v) ? 1 : 0,
(v)=>(["τimport","τexport","{","τthis","θid","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τawait","τvar",";","τif","τdo","τwhile","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst","}","$"]).includes(v) ? 1 : 0,
(v)=>(["τimport","τexport","{","τthis","θid","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τawait","τvar",";","τif","τdo","τwhile","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst","}","$"]).includes(v) ? 1 : 0,
(v)=>(["{"]).includes(v) ? 1 : 0,
(v)=>(["}"]).includes(v) ? 1 : 0,
(v)=>(["θid","θstr","θnum","[","τget","τset","τstatic",";","}"]).includes(v) ? 1 : 0,
(v)=>(["θid","θstr","θnum","[","τget","τset","τstatic",";","}"]).includes(v) ? 1 : 0,
(v)=>(["θid","θstr","θnum","[","τget","τset","τstatic",";","}",","]).includes(v) ? 1 : 0,
(v)=>([")"]).includes(v) ? 1 : 0,
(v)=>([";",")",":",",","]"]).includes(v) ? 1 : 0,
(v)=>(["τin","τof","=","*=","/=","%=","+=","-=","<<=",">>=",">>>=","&=","^=","|=","**=","++","--","{","**","*","/","%","+","-","<<",">>",">>>","<",">","<=",">=","τinstanceof","==","!=","===","!==","&","^","|","&&","?","||",")","]",":","τimport","τexport","τthis","θid","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","τdelete","τvoid","τtypeof","~","τawait","τvar",";","τif","τdo","τwhile","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst",",","}"]).includes(v) ? 1 : 0,
(v)=>(["τin","τof","=","*=","/=","%=","+=","-=","<<=",">>=",">>>=","&=","^=","|=","**=","++","--","{"]).includes(v) ? 1 : 0,
(v)=>(["(","[",".","τin","τof","=","*=","/=","%=","+=","-=","<<=",">>=",">>>=","&=","^=","|=","**=","++","--","{"]).includes(v) ? 1 : 0,
(v)=>(["(","[",".","τin","τof","=","*=","/=","%=","+=","-=","<<=",">>=",">>>=","&=","^=","|=","**=","++","--","{"]).includes(v) ? 1 : 0,
(v)=>(["(","[",".","τin","τof","=","*=","/=","%=","+=","-=","<<=",">>=",">>>=","&=","^=","|=","**=","++","--","{"]).includes(v) ? 1 : 0,
(v)=>(["(","[",".","τin","τof","=","*=","/=","%=","+=","-=","<<=",">>=",">>>=","&=","^=","|=","**=","++","--","{"]).includes(v) ? 1 : 0,
(v)=>([".","(","[","τin","τof","=","*=","/=","%=","+=","-=","<<=",">>=",">>>=","&=","^=","|=","**=","++","--","{"]).includes(v) ? 1 : 0,
(v)=>([".","(","[","τin","τof","=","*=","/=","%=","+=","-=","<<=",">>=",">>>=","&=","^=","|=","**=","++","--","{"]).includes(v) ? 1 : 0,
(v)=>(["=>","(","[",".","τin","τof","=","*=","/=","%=","+=","-=","<<=",">>=",">>>=","&=","^=","|=","**=","++","--","{"]).includes(v) ? 1 : 0,
(v)=>([")",","]).includes(v) ? 1 : 0,
(v)=>(["(","[",".","τin","τof","=","*=","/=","%=","+=","-=","<<=",">>=",">>>=","&=","^=","|=","**=","++","--","{"]).includes(v) ? 1 : 0,
(v)=>(["(","[",".","τin","τof","=","*=","/=","%=","+=","-=","<<=",">>=",">>>=","&=","^=","|=","**=","++","--","{"]).includes(v) ? 1 : 0,
(v)=>(["}",","]).includes(v) ? 1 : 0,
(v)=>(["}",","]).includes(v) ? 1 : 0,
(v)=>(["}",","]).includes(v) ? 1 : 0,
(v)=>(["}",","]).includes(v) ? 1 : 0,
(v)=>(["(",":"]).includes(v) ? 1 : 0,
(v)=>(["(",":"]).includes(v) ? 1 : 0,
(v)=>(["(",":"]).includes(v) ? 1 : 0,
(v)=>(["}",","]).includes(v) ? 1 : 0,
(v)=>([";",",","}",")","]"]).includes(v) ? 1 : 0,
(v)=>(["(","[",".","τin","τof","=","*=","/=","%=","+=","-=","<<=",">>=",">>>=","&=","^=","|=","**=","++","--","{"]).includes(v) ? 1 : 0,
(v)=>(["]",","]).includes(v) ? 1 : 0,
(v)=>(["]","τthis","θid","τtrue","τfalse","τnull","θstr","θnum","[","{","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τawait","...",","]).includes(v) ? 1 : 0,
(v)=>(["]",","]).includes(v) ? 1 : 0,
(v)=>([")","]",":","τimport","τexport","{","τthis","θid","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τawait","τvar",";","τif","τdo","τwhile","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst",",","}"]).includes(v) ? 1 : 0,
(v)=>(["τthis","θid","τtrue","τfalse","τnull","θstr","θnum","[","{","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τawait"]).includes(v) ? 1 : 0,
(v)=>([")","]",":","τimport","τexport","{","τthis","θid","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τawait","τvar",";","τif","τdo","τwhile","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst",",","}"]).includes(v) ? 1 : 0,
(v)=>(["?","||",")","]",":","τimport","τexport","{","τthis","θid","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τawait","τvar",";","τif","τdo","τwhile","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst",",","}"]).includes(v) ? 1 : 0,
(v)=>(["&&","?","||",")","]",":","τimport","τexport","{","τthis","θid","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τawait","τvar",";","τif","τdo","τwhile","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst",",","}"]).includes(v) ? 1 : 0,
(v)=>(["|","&&","?","||",")","]",":","τimport","τexport","{","τthis","θid","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τawait","τvar",";","τif","τdo","τwhile","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst",",","}"]).includes(v) ? 1 : 0,
(v)=>(["^","|","&&","?","||",")","]",":","τimport","τexport","{","τthis","θid","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τawait","τvar",";","τif","τdo","τwhile","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst",",","}"]).includes(v) ? 1 : 0,
(v)=>(["&","^","|","&&","?","||",")","]",":","τimport","τexport","{","τthis","θid","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τawait","τvar",";","τif","τdo","τwhile","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst",",","}"]).includes(v) ? 1 : 0,
(v)=>(["==","!=","===","!==","&","^","|","&&","?","||",")","]",":","τimport","τexport","{","τthis","θid","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τawait","τvar",";","τif","τdo","τwhile","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst",",","}"]).includes(v) ? 1 : 0,
(v)=>(["<",">","<=",">=","τinstanceof","τin","==","!=","===","!==","&","^","|","&&","?","||",")","]",":","τimport","τexport","{","τthis","θid","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τawait","τvar",";","τif","τdo","τwhile","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst",",","}"]).includes(v) ? 1 : 0,
(v)=>(["<<",">>",">>>","<",">","<=",">=","τinstanceof","τin","==","!=","===","!==","&","^","|","&&","?","||",")","]",":","τimport","τexport","{","τthis","θid","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τawait","τvar",";","τif","τdo","τwhile","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst",",","}"]).includes(v) ? 1 : 0,
(v)=>(["+","-","<<",">>",">>>","<",">","<=",">=","τinstanceof","τin","==","!=","===","!==","&","^","|","&&","?","||",")","]",":","τimport","τexport","{","τthis","θid","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","~","τawait","τvar",";","τif","τdo","τwhile","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst",",","}"]).includes(v) ? 1 : 0,
(v)=>(["*","/","%","+","-","<<",">>",">>>","<",">","<=",">=","τinstanceof","τin","==","!=","===","!==","&","^","|","&&","?","||",")","]",":","τimport","τexport","{","τthis","θid","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","~","τawait","τvar",";","τif","τdo","τwhile","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst",",","}"]).includes(v) ? 1 : 0,
(v)=>(["*","/","%","+","-","<<",">>",">>>","<",">","<=",">=","τinstanceof","τin","==","!=","===","!==","&","^","|","&&","?","||",")","]",":","τimport","τexport","{","τthis","θid","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","~","τawait","τvar",";","τif","τdo","τwhile","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst",",","}"]).includes(v) ? 1 : 0,
(v)=>(["*","/","%","+","-","<<",">>",">>>","<",">","<=",">=","τinstanceof","τin","==","!=","===","!==","&","^","|","&&","?","||",")","]",":","τimport","τexport","{","τthis","θid","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","~","τawait","τvar",";","τif","τdo","τwhile","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst",",","}","**"]).includes(v) ? 1 : 0,
(v)=>(["**","*","/","%","+","-","<<",">>",">>>","<",">","<=",">=","τinstanceof","τin","==","!=","===","!==","&","^","|","&&","?","||",")","]",":","τimport","τexport","{","τthis","θid","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","~","τawait","τvar",";","τif","τdo","τwhile","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst",",","}"]).includes(v) ? 1 : 0,
(v)=>(["*","/","%","+","-","<<",">>",">>>","<",">","<=",">=","τinstanceof","τin","==","!=","===","!==","&","^","|","&&","?","||",")","]",":","τimport","τexport","{","τthis","θid","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","~","τawait","τvar",";","τif","τdo","τwhile","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst",",","}"]).includes(v) ? 1 : 0,
(v)=>(["=>","(","[",".","τin","τof","=","*=","/=","%=","+=","-=","<<=",">>=",">>>=","&=","^=","|=","**=","++","--","{"]).includes(v) ? 1 : 0,
(v)=>(["=",")","τin","τof",",","]","}"]).includes(v) ? 1 : 0,
(v)=>(["=",")","τin","τof"]).includes(v) ? 1 : 0,
(v)=>(["=",")","τin","τof"]).includes(v) ? 1 : 0,
(v)=>(["}"]).includes(v) ? 1 : 0,
(v)=>(["}",","]).includes(v) ? 1 : 0,
(v)=>(["]",","]).includes(v) ? 1 : 0,
(v)=>(["]",","]).includes(v) ? 1 : 0,
(v)=>(["}",","]).includes(v) ? 1 : 0,
(v)=>([",",")","]","}"]).includes(v) ? 1 : 0,
(v)=>(["}",",",")","]"]).includes(v) ? 1 : 0,
(v)=>(["]",")"]).includes(v) ? 1 : 0,
(v)=>(["(","[",".","τin","τof","=","*=","/=","%=","+=","-=","<<=",">>=",">>>=","&=","^=","|=","**=","++","--","{"]).includes(v) ? 1 : 0,
(v)=>(["τimport","τexport","{","τthis","θid","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τawait","τvar",";","τif","τdo","τwhile","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst",":",".","τin","τof","=","*=","/=","%=","+=","-=","<<=",">>=",">>>=","&=","^=","|=","**="]).includes(v) ? 1 : 0,
(v)=>(["(",":","[",".","τin","τof","=","*=","/=","%=","+=","-=","<<=",">>=",">>>=","&=","^=","|=","**=","++","--","{"]).includes(v) ? 1 : 0,
(v)=>(["(","[",".","τin","τof","=","*=","/=","%=","+=","-=","<<=",">>=",">>>=","&=","^=","|=","**=","++","--","{"]).includes(v) ? 1 : 0,
(v)=>(["(","[",".","τin","τof","=","*=","/=","%=","+=","-=","<<=",">>=",">>>=","&=","^=","|=","**=","++","--","{"]).includes(v) ? 1 : 0,
(v)=>([";",":"]).includes(v) ? 1 : 0,
(v)=>(["=","(","[",".","τin","τof","*=","/=","%=","+=","-=","<<=",">>=",">>>=","&=","^=","|=","**=","++","--","{","}",","]).includes(v) ? 1 : 0,
(v)=>(["=","(","τextends","{",")","τin","τof",";",",","=>","}","]"]).includes(v) ? 1 : 0,
(v)=>(["τas",",","τfrom","}",";",":","=","(","[",".","τin","τof","*=","/=","%=","+=","-=","<<=",">>=",">>>=","&=","^=","|=","**=","++","--","{","τextends",")","=>","]"]).includes(v) ? 1 : 0,
(v)=>(["(","[",".","τin","τof","=","*=","/=","%=","+=","-=","<<=",">>=",">>>=","&=","^=","|=","**=","++","--","{",":","τas",",","τfrom","}",";","τextends",")","=>","]"]).includes(v) ? 1 : 0],
eh = [e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2,
e$2],
gt0 = [-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,3,4,5,6,7,105,14,8,22,12,9,13,91,-1,-1,15,16,17,19,18,92,-1,-1,-1,-1,10,-1,-1,20,-1,-1,-1,21,11,-1,-1,106,110,-1,-1,63,108,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,104,-1,-1,-1,-1,-1,-1,-1,24,28,52,54,57,58,81,53,82,-1,-1,56,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,25,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,87,60,86,66,67],
gt1 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,113,6,7,105,14,8,22,12,9,13,91,-1,-1,15,16,17,19,18,92,-1,-1,-1,-1,10,-1,-1,20,-1,-1,-1,21,11,-1,-1,106,110,-1,-1,63,108,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,104,-1,-1,-1,-1,-1,-1,-1,24,28,52,54,57,58,81,53,82,-1,-1,56,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,25,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,87,60,86,66,67],
gt2 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,114,5,6,7,105,14,8,22,12,9,13,91,-1,-1,15,16,17,19,18,92,-1,-1,-1,-1,10,-1,-1,20,-1,-1,-1,21,11,-1,-1,106,110,-1,-1,63,108,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,104,-1,-1,-1,-1,-1,-1,-1,24,28,52,54,57,58,81,53,82,-1,-1,56,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,25,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,87,60,86,66,67],
gt3 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,118],
gt4 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,-1,160,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,158,159,49,162,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,-1,163,67],
gt5 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,-1,160,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,167,159,49,162,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,-1,163,67],
gt6 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,-1,160,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,168,159,49,162,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,-1,163,67],
gt7 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,-1,160,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,169,159,49,162,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,-1,163,67],
gt8 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,-1,160,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,170,159,49,162,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,-1,163,67],
gt9 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,-1,160,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,171,159,49,162,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,-1,163,67],
gt10 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,-1,160,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,172,159,49,162,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,-1,163,67],
gt11 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,-1,160,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,173,159,49,162,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,-1,163,67],
gt12 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,-1,160,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,174,159,49,162,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,-1,163,67],
gt13 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,176],
gt14 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,181],
gt15 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,64,166,-1,-1,-1,-1,-1,-1,-1,-1,-1,182,183,57,58,81,-1,-1,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,162,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,-1,163,67],
gt16 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,-1,28,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,188,187,191,190,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,86,192,67],
gt17 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,195,28,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,25,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,86,192,67],
gt18 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,199],
gt19 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,-1,160,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,200,159,49,162,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,-1,163,67],
gt20 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,202],
gt21 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,204,205,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,207,209,210,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,206,208,67],
gt22 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,214,-1,-1,14,8,22,12,9,13,91,-1,-1,15,16,17,19,18,92,-1,-1,-1,-1,10,-1,-1,20,-1,-1,-1,21,11,-1,-1,-1,-1,-1,-1,63,-1,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,-1,-1,-1,-1,-1,-1,-1,-1,24,28,52,54,57,58,81,53,82,-1,-1,56,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,25,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,87,60,86,66,67],
gt23 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,220,-1,-1,221,67],
gt24 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,223,-1,-1,221,67],
gt25 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,225,28,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,25,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,86,192,67],
gt26 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,227,28,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,25,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,86,192,67],
gt27 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,228],
gt28 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,231,232,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,230,208,67],
gt29 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,236,208,67],
gt30 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,237,238,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,240,209,210,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,239,208,67],
gt31 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,-1,28,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,242,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,86,192,67],
gt32 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,-1,28,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,243,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,86,192,67],
gt33 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,-1,28,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,244,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,86,192,67],
gt34 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,-1,28,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,245,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,86,192,67],
gt35 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,-1,160,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,-1,-1,-1,-1,246,31,32,33,34,35,36,37,38,39,40,41,49,162,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,-1,163,67],
gt36 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,-1,160,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,-1,-1,-1,-1,-1,247,32,33,34,35,36,37,38,39,40,41,49,162,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,-1,163,67],
gt37 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,-1,160,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,-1,-1,-1,-1,-1,-1,248,33,34,35,36,37,38,39,40,41,49,162,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,-1,163,67],
gt38 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,-1,160,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,249,34,35,36,37,38,39,40,41,49,162,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,-1,163,67],
gt39 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,-1,160,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,250,35,36,37,38,39,40,41,49,162,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,-1,163,67],
gt40 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,-1,160,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,251,36,37,38,39,40,41,49,162,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,-1,163,67],
gt41 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,-1,160,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,252,36,37,38,39,40,41,49,162,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,-1,163,67],
gt42 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,-1,160,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,253,36,37,38,39,40,41,49,162,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,-1,163,67],
gt43 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,-1,160,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,254,36,37,38,39,40,41,49,162,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,-1,163,67],
gt44 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,-1,160,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,255,37,38,39,40,41,49,162,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,-1,163,67],
gt45 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,-1,160,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,256,37,38,39,40,41,49,162,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,-1,163,67],
gt46 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,-1,160,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,257,37,38,39,40,41,49,162,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,-1,163,67],
gt47 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,-1,160,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,258,37,38,39,40,41,49,162,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,-1,163,67],
gt48 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,-1,160,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,259,37,38,39,40,41,49,162,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,-1,163,67],
gt49 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,-1,160,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,260,37,38,39,40,41,49,162,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,-1,163,67],
gt50 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,-1,160,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,261,38,39,40,41,49,162,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,-1,163,67],
gt51 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,-1,160,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,262,38,39,40,41,49,162,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,-1,163,67],
gt52 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,-1,160,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,263,38,39,40,41,49,162,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,-1,163,67],
gt53 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,-1,160,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,264,39,40,41,49,162,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,-1,163,67],
gt54 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,-1,160,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,265,39,40,41,49,162,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,-1,163,67],
gt55 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,-1,160,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,266,40,41,49,162,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,-1,163,67],
gt56 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,-1,160,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,267,40,41,49,162,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,-1,163,67],
gt57 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,-1,160,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,268,40,41,49,162,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,-1,163,67],
gt58 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,-1,160,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,269,40,41,49,162,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,-1,163,67],
gt59 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,276,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,271,272,273,-1,278,279,280,274,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,282,283,-1,-1,-1,275,-1,163,281],
gt60 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,287],
gt61 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,288,28,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,25,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,86,192,67],
gt62 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,-1,28,52,54,57,58,81,53,82,-1,290,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,291,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,86,192,67],
gt63 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,293,28,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,25,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,86,192,67],
gt64 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,294],
gt65 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,295],
gt66 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,-1,28,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,300,299,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,86,192,67],
gt67 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,302],
gt68 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,-1,28,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,304,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,86,192,67],
gt69 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,308,209,210,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,307,208,67],
gt70 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,309],
gt71 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,310,28,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,25,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,86,192,67],
gt72 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,27,85,311,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,-1,28,52,54,57,58,81,53,82,-1,-1,56,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,312,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,86,192,67],
gt73 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,315,-1,-1,14,8,22,12,9,13,91,-1,-1,15,16,17,19,18,92,-1,-1,-1,-1,10,-1,314,20,-1,-1,-1,21,11,-1,-1,-1,-1,-1,-1,63,316,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,-1,-1,-1,-1,-1,-1,-1,-1,24,28,52,54,57,58,81,53,82,-1,-1,56,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,25,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,87,60,86,66,67],
gt74 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,319],
gt75 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,321],
gt76 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,328,279,280,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,323,324,-1,-1,326,-1,327,-1,-1,282,283,-1,-1,-1,-1,329,208,281],
gt77 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,331,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,338,209,210,-1,-1,333,335,-1,336,337,332,-1,-1,-1,-1,-1,-1,-1,329,208,67],
gt78 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,339,28,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,25,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,86,192,67],
gt79 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,341,28,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,25,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,86,192,67],
gt80 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,347,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,345,348,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,342,346,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,25,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,86,192,67],
gt81 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,350,28,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,25,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,86,192,67],
gt82 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,354,28,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,25,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,86,192,67],
gt83 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,356,357],
gt84 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,360,232],
gt85 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,362,364,365,366,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,369,279,280,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,282,283,-1,-1,-1,-1,-1,-1,370],
gt86 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,-1,371,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,162,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,-1,163,67],
gt87 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,372,374,373,376,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,338,209,210,-1,-1,-1,-1,-1,377,337,375,-1,-1,-1,-1,-1,-1,-1,329,208,67],
gt88 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,381],
gt89 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,382],
gt90 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,386],
gt91 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,-1,28,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,387,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,86,192,67],
gt92 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,388],
gt93 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,-1,28,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,391,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,86,192,67],
gt94 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,392,279,280,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,282,283,-1,-1,-1,-1,-1,-1,370],
gt95 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,393,279,280,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,282,283,-1,-1,-1,-1,-1,-1,370],
gt96 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,-1,28,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,397,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,86,192,67],
gt97 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,-1,28,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,402,401,400,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,86,192,67],
gt98 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,409,5,6,7,105,14,8,22,12,9,13,91,-1,-1,15,16,17,19,18,92,-1,-1,-1,-1,10,-1,-1,20,-1,-1,-1,21,11,-1,-1,106,110,-1,-1,63,108,-1,-1,-1,-1,-1,-1,408,27,85,-1,-1,-1,-1,83,64,104,-1,-1,-1,-1,-1,-1,-1,24,28,52,54,57,58,81,53,82,-1,-1,56,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,25,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,87,60,86,66,67],
gt99 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,410,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,207,209,210,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,206,208,67],
gt100 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,-1,28,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,411,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,86,192,67],
gt101 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,415,208,67],
gt102 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,417],
gt103 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,338,209,210,-1,-1,-1,-1,-1,420,337,418,-1,-1,-1,-1,-1,-1,-1,329,208,67],
gt104 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,425,209,210,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,424,208,67],
gt105 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,426],
gt106 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,431,28,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,25,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,86,192,67],
gt107 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,434,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,433,205,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,436,209,210,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,435,208,67],
gt108 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,437,28,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,25,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,86,192,67],
gt109 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,443,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,237,238,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,445,209,210,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,444,208,67],
gt110 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,448,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,449,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,-1,446,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,162,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,-1,163,67],
gt111 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,452],
gt112 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,454],
gt113 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,455,364,365,366,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,369,279,280,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,282,283,-1,-1,-1,-1,-1,-1,370],
gt114 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,458,366,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,369,279,280,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,282,283,-1,-1,-1,-1,-1,-1,370],
gt115 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,459,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,369,279,280,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,282,283,-1,-1,-1,-1,-1,-1,370],
gt116 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,462,374,373,376,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,338,209,210,-1,-1,-1,-1,-1,377,337,375,-1,-1,-1,-1,-1,-1,-1,329,208,67],
gt117 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,463,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,240,209,210,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,239,208,67],
gt118 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,-1,28,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,464,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,86,192,67],
gt119 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,276,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,466,273,-1,278,279,280,274,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,282,283,-1,-1,-1,275,-1,163,281],
gt120 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,467,468,374,373,376,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,338,209,210,-1,-1,-1,-1,-1,377,337,375,-1,-1,-1,-1,-1,-1,-1,329,208,67],
gt121 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,-1,28,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,469,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,86,192,67],
gt122 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,-1,28,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,474,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,86,192,67],
gt123 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,-1,28,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,476,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,86,192,67],
gt124 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,478,209,210,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,477,208,67],
gt125 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,328,279,280,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,480,-1,-1,-1,482,-1,327,-1,-1,282,283,-1,-1,-1,-1,329,208,281],
gt126 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,338,209,210,-1,-1,-1,-1,-1,483,337,-1,-1,-1,-1,-1,-1,-1,-1,329,208,67],
gt127 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,486,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,338,209,210,-1,-1,-1,488,-1,336,337,487,-1,-1,-1,-1,-1,-1,-1,329,208,67],
gt128 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,489,-1,-1,14,8,22,12,9,13,91,-1,-1,15,16,17,19,18,92,-1,-1,-1,-1,10,-1,-1,20,-1,-1,-1,21,11,-1,-1,-1,-1,-1,-1,63,-1,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,-1,-1,-1,-1,-1,-1,-1,-1,24,28,52,54,57,58,81,53,82,-1,-1,56,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,25,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,87,60,86,66,67],
gt129 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,490,28,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,25,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,86,192,67],
gt130 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,491,-1,-1,14,8,22,12,9,13,91,-1,-1,15,16,17,19,18,92,-1,-1,-1,-1,10,-1,-1,20,-1,-1,-1,21,11,-1,-1,-1,-1,-1,-1,63,-1,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,-1,-1,-1,-1,-1,-1,-1,-1,24,28,52,54,57,58,81,53,82,-1,-1,56,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,25,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,87,60,86,66,67],
gt131 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,492,28,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,25,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,86,192,67],
gt132 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,495,28,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,25,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,86,192,67],
gt133 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,501,28,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,25,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,86,192,67],
gt134 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,503,28,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,25,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,86,192,67],
gt135 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,-1,28,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,504,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,86,192,67],
gt136 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,505,28,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,25,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,86,192,67],
gt137 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,-1,28,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,506,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,86,192,67],
gt138 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,508,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,510,209,210,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,509,208,67],
gt139 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,443,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,510,209,210,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,509,208,67],
gt140 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,512],
gt141 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,514,-1,-1,14,8,22,12,9,13,91,-1,-1,15,16,17,19,18,92,-1,-1,-1,-1,10,-1,-1,20,-1,-1,-1,21,11,-1,-1,-1,-1,-1,-1,63,-1,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,-1,-1,-1,-1,-1,-1,-1,-1,24,28,52,54,57,58,81,53,82,-1,-1,56,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,25,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,87,60,86,66,67],
gt142 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,515,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,517,209,210,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,516,208,67],
gt143 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,520,521,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,338,209,210,-1,-1,-1,-1,-1,377,337,375,-1,-1,-1,-1,-1,-1,-1,329,208,67],
gt144 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,526,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,525,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,338,209,210,-1,-1,-1,-1,-1,377,337,-1,-1,-1,-1,-1,-1,-1,-1,329,208,67],
gt145 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,-1,28,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,527,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,86,192,67],
gt146 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,338,209,210,-1,-1,-1,-1,-1,420,337,532,-1,-1,-1,-1,-1,-1,-1,329,208,67],
gt147 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,537,28,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,25,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,86,192,67],
gt148 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,539,28,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,25,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,86,192,67],
gt149 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,541,-1,-1,14,8,22,12,9,13,91,-1,-1,15,16,17,19,18,92,-1,-1,-1,-1,10,-1,-1,20,-1,-1,-1,21,11,-1,-1,-1,-1,-1,-1,63,-1,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,-1,-1,-1,-1,-1,-1,-1,-1,24,28,52,54,57,58,81,53,82,-1,-1,56,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,25,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,87,60,86,66,67],
gt150 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,542,28,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,25,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,86,192,67],
gt151 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,544,28,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,25,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,86,192,67],
gt152 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,-1,28,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,545,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,86,192,67],
gt153 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,546,28,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,25,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,86,192,67],
gt154 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,549,-1,-1,14,8,22,12,9,13,91,-1,-1,15,16,17,19,18,92,-1,-1,-1,-1,10,-1,-1,20,-1,-1,-1,21,11,-1,-1,-1,-1,-1,-1,63,-1,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,-1,-1,-1,-1,-1,-1,-1,-1,24,28,52,54,57,58,81,53,82,-1,-1,56,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,25,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,87,60,86,66,67],
gt155 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,-1,28,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,554,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,86,192,67],
gt156 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,-1,28,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,556,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,86,192,67],
gt157 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,558,560,559],
gt158 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,409,5,6,7,105,14,8,22,12,9,13,91,-1,-1,15,16,17,19,18,92,-1,-1,-1,-1,10,-1,-1,20,-1,-1,-1,21,11,-1,-1,106,110,-1,-1,63,108,-1,-1,-1,-1,-1,564,565,27,85,-1,-1,-1,-1,83,64,104,-1,-1,-1,-1,-1,-1,-1,24,28,52,54,57,58,81,53,82,-1,-1,56,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,25,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,87,60,86,66,67],
gt159 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,571,-1,-1,14,8,22,12,9,13,91,-1,-1,15,16,17,19,18,92,-1,-1,-1,-1,10,-1,-1,20,-1,-1,-1,21,11,-1,-1,-1,-1,-1,-1,63,-1,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,-1,-1,-1,-1,-1,-1,-1,-1,24,28,52,54,57,58,81,53,82,-1,-1,56,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,25,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,87,60,86,66,67],
gt160 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,573,28,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,25,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,86,192,67],
gt161 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,576,-1,-1,14,8,22,12,9,13,91,-1,-1,15,16,17,19,18,92,-1,-1,-1,-1,10,-1,-1,20,-1,-1,-1,21,11,-1,-1,-1,-1,-1,-1,63,-1,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,-1,-1,-1,-1,-1,-1,-1,-1,24,28,52,54,57,58,81,53,82,-1,-1,56,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,25,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,87,60,86,66,67],
gt162 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,578,-1,-1,14,8,22,12,9,13,91,-1,-1,15,16,17,19,18,92,-1,-1,-1,-1,10,-1,-1,20,-1,-1,-1,21,11,-1,-1,-1,-1,-1,-1,63,-1,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,-1,-1,-1,-1,-1,-1,-1,-1,24,28,52,54,57,58,81,53,82,-1,-1,56,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,25,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,87,60,86,66,67],
gt163 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,580,28,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,25,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,86,192,67],
gt164 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,585,-1,-1,14,8,22,12,9,13,91,-1,-1,15,16,17,19,18,92,-1,-1,-1,-1,10,-1,-1,20,-1,-1,-1,21,11,-1,-1,-1,-1,-1,-1,63,-1,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,-1,-1,-1,-1,-1,-1,-1,-1,24,28,52,54,57,58,81,53,82,-1,-1,56,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,25,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,87,60,86,66,67],
gt165 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,586,-1,-1,14,8,22,12,9,13,91,-1,-1,15,16,17,19,18,92,-1,-1,-1,-1,10,-1,-1,20,-1,-1,-1,21,11,-1,-1,-1,-1,-1,-1,63,-1,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,-1,-1,-1,-1,-1,-1,-1,-1,24,28,52,54,57,58,81,53,82,-1,-1,56,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,25,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,87,60,86,66,67],
gt166 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,587,-1,-1,14,8,22,12,9,13,91,-1,-1,15,16,17,19,18,92,-1,-1,-1,-1,10,-1,-1,20,-1,-1,-1,21,11,-1,-1,-1,-1,-1,-1,63,-1,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,-1,-1,-1,-1,-1,-1,-1,-1,24,28,52,54,57,58,81,53,82,-1,-1,56,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,25,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,87,60,86,66,67],
gt167 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,588,-1,-1,14,8,22,12,9,13,91,-1,-1,15,16,17,19,18,92,-1,-1,-1,-1,10,-1,-1,20,-1,-1,-1,21,11,-1,-1,-1,-1,-1,-1,63,-1,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,-1,-1,-1,-1,-1,-1,-1,-1,24,28,52,54,57,58,81,53,82,-1,-1,56,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,25,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,87,60,86,66,67],
gt168 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,589,-1,-1,14,8,22,12,9,13,91,-1,-1,15,16,17,19,18,92,-1,-1,-1,-1,10,-1,-1,20,-1,-1,-1,21,11,-1,-1,-1,-1,-1,-1,63,-1,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,-1,-1,-1,-1,-1,-1,-1,-1,24,28,52,54,57,58,81,53,82,-1,-1,56,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,25,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,87,60,86,66,67],
gt169 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,590,-1,-1,14,8,22,12,9,13,91,-1,-1,15,16,17,19,18,92,-1,-1,-1,-1,10,-1,-1,20,-1,-1,-1,21,11,-1,-1,-1,-1,-1,-1,63,-1,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,-1,-1,-1,-1,-1,-1,-1,-1,24,28,52,54,57,58,81,53,82,-1,-1,56,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,25,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,87,60,86,66,67],
gt170 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,-1,28,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,592,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,86,192,67],
gt171 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,596,594],
gt172 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,597,560],
gt173 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,599,28,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,25,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,86,192,67],
gt174 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,601],
gt175 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,409,5,6,7,105,14,8,22,12,9,13,91,-1,-1,15,16,17,19,18,92,-1,-1,-1,-1,10,-1,-1,20,-1,-1,-1,21,11,-1,-1,106,110,-1,-1,63,108,-1,-1,-1,-1,-1,603,565,27,85,-1,-1,-1,-1,83,64,104,-1,-1,-1,-1,-1,-1,-1,24,28,52,54,57,58,81,53,82,-1,-1,56,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,25,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,87,60,86,66,67],
gt176 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,409,5,6,7,105,14,8,22,12,9,13,91,-1,-1,15,16,17,19,18,92,-1,-1,-1,-1,10,-1,-1,20,-1,-1,-1,21,11,-1,-1,106,110,-1,-1,63,108,-1,-1,-1,-1,-1,604,565,27,85,-1,-1,-1,-1,83,64,104,-1,-1,-1,-1,-1,-1,-1,24,28,52,54,57,58,81,53,82,-1,-1,56,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,25,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,87,60,86,66,67],
gt177 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,409,5,6,7,105,14,8,22,12,9,13,91,-1,-1,15,16,17,19,18,92,-1,-1,-1,-1,10,-1,-1,20,-1,-1,-1,21,11,-1,-1,106,110,-1,-1,63,108,-1,-1,-1,-1,-1,605,565,27,85,-1,-1,-1,-1,83,64,104,-1,-1,-1,-1,-1,-1,-1,24,28,52,54,57,58,81,53,82,-1,-1,56,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,25,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,87,60,86,66,67],
gt178 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,608,-1,-1,14,8,22,12,9,13,91,-1,-1,15,16,17,19,18,92,-1,-1,-1,-1,10,-1,-1,20,-1,-1,-1,21,11,-1,-1,-1,-1,-1,-1,63,-1,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,-1,-1,-1,-1,-1,-1,-1,-1,24,28,52,54,57,58,81,53,82,-1,-1,56,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,25,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,87,60,86,66,67],
gt179 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,609,-1,-1,14,8,22,12,9,13,91,-1,-1,15,16,17,19,18,92,-1,-1,-1,-1,10,-1,-1,20,-1,-1,-1,21,11,-1,-1,-1,-1,-1,-1,63,-1,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,-1,-1,-1,-1,-1,-1,-1,-1,24,28,52,54,57,58,81,53,82,-1,-1,56,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,25,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,87,60,86,66,67],
gt180 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,610,-1,-1,14,8,22,12,9,13,91,-1,-1,15,16,17,19,18,92,-1,-1,-1,-1,10,-1,-1,20,-1,-1,-1,21,11,-1,-1,-1,-1,-1,-1,63,-1,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,-1,-1,-1,-1,-1,-1,-1,-1,24,28,52,54,57,58,81,53,82,-1,-1,56,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,25,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,87,60,86,66,67],
gt181 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,165,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,166,-1,-1,-1,-1,-1,-1,-1,611,28,52,54,57,58,81,53,82,-1,-1,56,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,25,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,-1,60,86,192,67],
gt182 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,614,-1,-1,14,8,22,12,9,13,91,-1,-1,15,16,17,19,18,92,-1,-1,-1,-1,10,-1,-1,20,-1,-1,-1,21,11,-1,-1,-1,-1,-1,-1,63,-1,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,-1,-1,-1,-1,-1,-1,-1,-1,24,28,52,54,57,58,81,53,82,-1,-1,56,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,25,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,87,60,86,66,67],
gt183 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,615,-1,-1,14,8,22,12,9,13,91,-1,-1,15,16,17,19,18,92,-1,-1,-1,-1,10,-1,-1,20,-1,-1,-1,21,11,-1,-1,-1,-1,-1,-1,63,-1,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,-1,-1,-1,-1,-1,-1,-1,-1,24,28,52,54,57,58,81,53,82,-1,-1,56,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,25,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,87,60,86,66,67],
gt184 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,616,-1,-1,14,8,22,12,9,13,91,-1,-1,15,16,17,19,18,92,-1,-1,-1,-1,10,-1,-1,20,-1,-1,-1,21,11,-1,-1,-1,-1,-1,-1,63,-1,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,-1,-1,-1,-1,-1,-1,-1,-1,24,28,52,54,57,58,81,53,82,-1,-1,56,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,25,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,87,60,86,66,67],
gt185 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,617,-1,-1,14,8,22,12,9,13,91,-1,-1,15,16,17,19,18,92,-1,-1,-1,-1,10,-1,-1,20,-1,-1,-1,21,11,-1,-1,-1,-1,-1,-1,63,-1,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,-1,-1,-1,-1,-1,-1,-1,-1,24,28,52,54,57,58,81,53,82,-1,-1,56,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,25,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,87,60,86,66,67],
gt186 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,618,-1,-1,14,8,22,12,9,13,91,-1,-1,15,16,17,19,18,92,-1,-1,-1,-1,10,-1,-1,20,-1,-1,-1,21,11,-1,-1,-1,-1,-1,-1,63,-1,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,-1,-1,-1,-1,-1,-1,-1,-1,24,28,52,54,57,58,81,53,82,-1,-1,56,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,25,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,87,60,86,66,67],
gt187 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,620,-1,-1,14,8,22,12,9,13,91,-1,-1,15,16,17,19,18,92,-1,-1,-1,-1,10,-1,-1,20,-1,-1,-1,21,11,-1,-1,-1,-1,-1,-1,63,-1,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,-1,-1,-1,-1,-1,-1,-1,-1,24,28,52,54,57,58,81,53,82,-1,-1,56,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,25,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,87,60,86,66,67],
gt188 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,621],
gt189 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,596],
gt190 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,625,5,6,7,105,14,8,22,12,9,13,91,-1,-1,15,16,17,19,18,92,-1,-1,-1,-1,10,-1,-1,20,-1,-1,-1,21,11,-1,-1,106,110,-1,-1,63,108,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,104,-1,-1,-1,-1,-1,-1,-1,24,28,52,54,57,58,81,53,82,-1,-1,56,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,25,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,87,60,86,66,67],
gt191 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,409,5,6,7,105,14,8,22,12,9,13,91,-1,-1,15,16,17,19,18,92,-1,-1,-1,-1,10,-1,-1,20,-1,-1,-1,21,11,-1,-1,106,110,-1,-1,63,108,-1,-1,-1,-1,-1,629,565,27,85,-1,-1,-1,-1,83,64,104,-1,-1,-1,-1,-1,-1,-1,24,28,52,54,57,58,81,53,82,-1,-1,56,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,25,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,87,60,86,66,67],
gt192 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,630,-1,-1,14,8,22,12,9,13,91,-1,-1,15,16,17,19,18,92,-1,-1,-1,-1,10,-1,-1,20,-1,-1,-1,21,11,-1,-1,-1,-1,-1,-1,63,-1,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,-1,-1,-1,-1,-1,-1,-1,-1,24,28,52,54,57,58,81,53,82,-1,-1,56,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,25,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,87,60,86,66,67],
gt193 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,632,-1,-1,14,8,22,12,9,13,91,-1,-1,15,16,17,19,18,92,-1,-1,-1,-1,10,-1,-1,20,-1,-1,-1,21,11,-1,-1,-1,-1,-1,-1,63,-1,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,-1,-1,-1,-1,-1,-1,-1,-1,24,28,52,54,57,58,81,53,82,-1,-1,56,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,25,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,87,60,86,66,67],
gt194 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,633,-1,-1,14,8,22,12,9,13,91,-1,-1,15,16,17,19,18,92,-1,-1,-1,-1,10,-1,-1,20,-1,-1,-1,21,11,-1,-1,-1,-1,-1,-1,63,-1,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,-1,-1,-1,-1,-1,-1,-1,-1,24,28,52,54,57,58,81,53,82,-1,-1,56,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,25,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,87,60,86,66,67],
gt195 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,634,-1,-1,14,8,22,12,9,13,91,-1,-1,15,16,17,19,18,92,-1,-1,-1,-1,10,-1,-1,20,-1,-1,-1,21,11,-1,-1,-1,-1,-1,-1,63,-1,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,-1,-1,-1,-1,-1,-1,-1,-1,24,28,52,54,57,58,81,53,82,-1,-1,56,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,25,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,87,60,86,66,67],
gt196 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,636,5,6,7,105,14,8,22,12,9,13,91,-1,-1,15,16,17,19,18,92,-1,-1,-1,-1,10,-1,-1,20,-1,-1,-1,21,11,-1,-1,106,110,-1,-1,63,108,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,104,-1,-1,-1,-1,-1,-1,-1,24,28,52,54,57,58,81,53,82,-1,-1,56,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,25,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,87,60,86,66,67],
gt197 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,638,-1,-1,14,8,22,12,9,13,91,-1,-1,15,16,17,19,18,92,-1,-1,-1,-1,10,-1,-1,20,-1,-1,-1,21,11,-1,-1,-1,-1,-1,-1,63,-1,-1,-1,-1,-1,-1,-1,-1,27,85,-1,-1,-1,-1,83,64,-1,-1,-1,-1,-1,-1,-1,-1,24,28,52,54,57,58,81,53,82,-1,-1,56,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,25,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,71,72,70,69,87,60,86,66,67],

sf = [(t, e, o, l, s)=>{o.push(null); return 20483},
(t, e, o, l, s)=>94,
(t, e, o, l, s)=>170,
(t, e, o, l, s)=>174,
(t, e, o, l, s)=>178,
(t, e, o, l, s)=>182,
(t, e, o, l, s)=>186,
(t, e, o, l, s)=>190,
(t, e, o, l, s)=>194,
(t, e, o, l, s)=>202,
(t, e, o, l, s)=>206,
(t, e, o, l, s)=>222,
(t, e, o, l, s)=>238,
(t, e, o, l, s)=>274,
(t, e, o, l, s)=>294,
(t, e, o, l, s)=>298,
(t, e, o, l, s)=>302,
(t, e, o, l, s)=>306,
(t, e, o, l, s)=>310,
(t, e, o, l, s)=>314,
(t, e, o, l, s)=>318,
(t, e, o, l, s)=>322,
(t, e, o, l, s)=>338,
(t, e, o, l, s)=>354,
(t, e, o, l, s)=>358,
(t, e, o, l, s)=>362,
(t, e, o, l, s)=>374,
(t, e, o, l, s)=>378,
(t, e, o, l, s)=>382,
(t, e, o, l, s)=>386,
(t, e, o, l, s)=>390,
(t, e, o, l, s)=>394,
(t, e, o, l, s)=>398,
(t, e, o, l, s)=>402,
(t, e, o, l, s)=>406,
(t, e, o, l, s)=>410,
(t, e, o, l, s)=>414,
(t, e, o, l, s)=>430,
(t, e, o, l, s)=>438,
(t, e, o, l, s)=>446,
(t, e, o, l, s)=>450,
(t, e, o, l, s)=>{let ln = Math.max(o.length-1,0); o[ln]=( S$0(o.slice(-1),e,l,s));o.length=ln+1; return 5},
(t, e, o, l, s)=>{let ln = Math.max(o.length-1,0); o[ln]=( start$0(o.slice(-1),e,l,s));o.length=ln+1; return 1031},
(t, e, o, l, s)=>{let ln = Math.max(o.length-1,0); o[ln]=( start$0(o.slice(-1),e,l,s));o.length=ln+1; return 20487},
(t, e, o, l, s)=>{let ln = Math.max(o.length-1,0); o[ln]=(new e.functions.stmts(o.slice(-1),e,l,s));o.length=ln+1; return 21511},
(t, e, o, l, s)=>{let ln = Math.max(o.length-1,0); o[ln]=( statement_list$0(o.slice(-1),e,l,s));o.length=ln+1; return 22535},
(t, e, o, l, s)=>23559,
(t, e, o, l, s)=>24583,
(t, e, o, l, s)=>28679,
(t, e, o, l, s)=>462,
(t, e, o, l, s)=>466,
(t, e, o, l, s)=>{let ln = Math.max(o.length-1,0); o[ln]=( start$0(o.slice(-1),e,l,s));o.length=ln+1; return 88071},
(t, e, o, l, s)=>114695,
(t, e, o, l, s)=>470,
(t, e, o, l, s)=>130055,
(t, e, o, l, s)=>478,
(t, e, o, l, s)=>482,
(t, e, o, l, s)=>486,
(t, e, o, l, s)=>490,
(t, e, o, l, s)=>494,
(t, e, o, l, s)=>498,
(t, e, o, l, s)=>502,
(t, e, o, l, s)=>506,
(t, e, o, l, s)=>510,
(t, e, o, l, s)=>514,
(t, e, o, l, s)=>518,
(t, e, o, l, s)=>522,
(t, e, o, l, s)=>526,
(t, e, o, l, s)=>530,
(t, e, o, l, s)=>116743,
(t, e, o, l, s)=>534,
(t, e, o, l, s)=>538,
(t, e, o, l, s)=>117767,
(t, e, o, l, s)=>542,
(t, e, o, l, s)=>118791,
(t, e, o, l, s)=>546,
(t, e, o, l, s)=>119815,
(t, e, o, l, s)=>550,
(t, e, o, l, s)=>120839,
(t, e, o, l, s)=>554,
(t, e, o, l, s)=>121863,
(t, e, o, l, s)=>558,
(t, e, o, l, s)=>562,
(t, e, o, l, s)=>566,
(t, e, o, l, s)=>570,
(t, e, o, l, s)=>122887,
(t, e, o, l, s)=>574,
(t, e, o, l, s)=>578,
(t, e, o, l, s)=>582,
(t, e, o, l, s)=>586,
(t, e, o, l, s)=>590,
(t, e, o, l, s)=>594,
(t, e, o, l, s)=>123911,
(t, e, o, l, s)=>598,
(t, e, o, l, s)=>602,
(t, e, o, l, s)=>606,
(t, e, o, l, s)=>124935,
(t, e, o, l, s)=>610,
(t, e, o, l, s)=>614,
(t, e, o, l, s)=>125959,
(t, e, o, l, s)=>618,
(t, e, o, l, s)=>622,
(t, e, o, l, s)=>626,
(t, e, o, l, s)=>126983,
(t, e, o, l, s)=>128007,
(t, e, o, l, s)=>630,
(t, e, o, l, s)=>129031,
(t, e, o, l, s)=>658,
(t, e, o, l, s)=>89095,
(t, e, o, l, s)=>702,
(t, e, o, l, s)=>710,
(t, e, o, l, s)=>714,
(t, e, o, l, s)=>90119,
(t, e, o, l, s)=>718,
(t, e, o, l, s)=>722,
(t, e, o, l, s)=>738,
(t, e, o, l, s)=>742,
(t, e, o, l, s)=>91143,
(t, e, o, l, s)=>{let ln = Math.max(o.length-1,0); o[ln]=(new e.functions.this_expr(o.slice(-1),e,l,s));o.length=ln+1; return 99335},
(t, e, o, l, s)=>99335,
(t, e, o, l, s)=>{let ln = Math.max(o.length-1,0); o[ln]=(new e.functions.array_literal(o.slice(-1),e,l,s));o.length=ln+1; return 99335},
(t, e, o, l, s)=>72711,
(t, e, o, l, s)=>150535,
(t, e, o, l, s)=>151559,
(t, e, o, l, s)=>149511,
(t, e, o, l, s)=>152583,
(t, e, o, l, s)=>{let ln = Math.max(o.length-1,0); o[ln]=(new e.functions.identifier(o.slice(-1),e,l,s));o.length=ln+1; return 153607},
(t, e, o, l, s)=>144391,
(t, e, o, l, s)=>{let ln = Math.max(o.length-1,0); o[ln]=(new e.functions.bool_literal(o.slice(-1),e,l,s));o.length=ln+1; return 148487},
(t, e, o, l, s)=>{let ln = Math.max(o.length-1,0); o[ln]=(new e.functions.null_literal(o.slice(-1),e,l,s));o.length=ln+1; return 147463},
(t, e, o, l, s)=>{let ln = Math.max(o.length-1,0); o[ln]=(new e.functions.string_literal(o.slice(-1),e,l,s));o.length=ln+1; return 145415},
(t, e, o, l, s)=>{let ln = Math.max(o.length-1,0); o[ln]=(new e.functions.numeric_literal(o.slice(-1),e,l,s));o.length=ln+1; return 146439},
(t, e, o, l, s)=>746,
(t, e, o, l, s)=>758,
(t, e, o, l, s)=>774,
(t, e, o, l, s)=>778,
(t, e, o, l, s)=>786,
(t, e, o, l, s)=>790,
(t, e, o, l, s)=>794,
(t, e, o, l, s)=>93191,
(t, e, o, l, s)=>95239,
(t, e, o, l, s)=>806,
(t, e, o, l, s)=>814,
(t, e, o, l, s)=>846,
(t, e, o, l, s)=>850,
(t, e, o, l, s)=>{let ln = Math.max(o.length-1,0); o[ln]=(new empty_statement$0(o.slice(-1),e,l,s));o.length=ln+1; return 30727},
(t, e, o, l, s)=>854,
(t, e, o, l, s)=>27655,
(t, e, o, l, s)=>862,
(t, e, o, l, s)=>866,
(t, e, o, l, s)=>870,
(t, e, o, l, s)=>874,
(t, e, o, l, s)=>878,
(t, e, o, l, s)=>890,
(t, e, o, l, s)=>898,
(t, e, o, l, s)=>906,
(t, e, o, l, s)=>918,
(t, e, o, l, s)=>25607,
(t, e, o, l, s)=>934,
(t, e, o, l, s)=>938,
(t, e, o, l, s)=>26631,
(t, e, o, l, s)=>942,
(t, e, o, l, s)=>{let ln = Math.max(o.length-1,0); o[ln]=( let_or_const$0(o.slice(-1),e,l,s));o.length=ln+1; return 59399},
(t, e, o, l, s)=>{let ln = Math.max(o.length-1,0); o[ln]=( let_or_const$1(o.slice(-1),e,l,s));o.length=ln+1; return 59399},
(t, e, o, l, s)=>{let ln = Math.max(o.length-2,0); o[ln]=( statement_list$1(o.slice(-2),e,l,s));o.length=ln+1; return 22539},
(t, e, o, l, s)=>966,
(t, e, o, l, s)=>{let ln = Math.max(o.length-2,0); o[ln]=( start$0(o.slice(-2),e,l,s));o.length=ln+1; return 31755},
(t, e, o, l, s)=>{let ln = Math.max(o.length-2,0); o[ln]=(new e.functions.post_inc_expr(o.slice(-2),e,l,s));o.length=ln+1; return 130059},
(t, e, o, l, s)=>{let ln = Math.max(o.length-2,0); o[ln]=(new e.functions.post_dec_expr(o.slice(-2),e,l,s));o.length=ln+1; return 130059},
(t, e, o, l, s)=>115719,
(t, e, o, l, s)=>{let ln = Math.max(o.length-2,0); o[ln]=(new e.functions.delete_expr(o.slice(-2),e,l,s));o.length=ln+1; return 129035},
(t, e, o, l, s)=>{let ln = Math.max(o.length-1,0); o[ln]=(new e.functions.object(o.slice(-1),e,l,s));o.length=ln+1; return 99335},
(t, e, o, l, s)=>1082,
(t, e, o, l, s)=>1110,
(t, e, o, l, s)=>1138,
(t, e, o, l, s)=>1142,
(t, e, o, l, s)=>1146,
(t, e, o, l, s)=>62471,
(t, e, o, l, s)=>78855,
(t, e, o, l, s)=>{let ln = Math.max(o.length-2,0); o[ln]=(new e.functions.void_expr(o.slice(-2),e,l,s));o.length=ln+1; return 129035},
(t, e, o, l, s)=>{let ln = Math.max(o.length-2,0); o[ln]=(new e.functions.typeof_expr(o.slice(-2),e,l,s));o.length=ln+1; return 129035},
(t, e, o, l, s)=>{let ln = Math.max(o.length-2,0); o[ln]=(new e.functions.plus_expr(o.slice(-2),e,l,s));o.length=ln+1; return 129035},
(t, e, o, l, s)=>{let ln = Math.max(o.length-2,0); o[ln]=(new e.functions.negate_expr(o.slice(-2),e,l,s));o.length=ln+1; return 129035},
(t, e, o, l, s)=>{let ln = Math.max(o.length-2,0); o[ln]=(new e.functions.unary_or_expr(o.slice(-2),e,l,s));o.length=ln+1; return 129035},
(t, e, o, l, s)=>{let ln = Math.max(o.length-2,0); o[ln]=(new e.functions.unary_not_expr(o.slice(-2),e,l,s));o.length=ln+1; return 129035},
(t, e, o, l, s)=>{let ln = Math.max(o.length-2,0); o[ln]=(new e.functions.pre_inc_expr(o.slice(-2),e,l,s));o.length=ln+1; return 130059},
(t, e, o, l, s)=>{let ln = Math.max(o.length-2,0); o[ln]=(new e.functions.pre_dec_expr(o.slice(-2),e,l,s));o.length=ln+1; return 130059},
(t, e, o, l, s)=>{let ln = Math.max(o.length-2,0); o[ln]=(new e.functions.call_expr(o.slice(-2),e,l,s));o.length=ln+1; return 95243},
(t, e, o, l, s)=>1158,
(t, e, o, l, s)=>1170,
(t, e, o, l, s)=>{let ln = Math.max(o.length-2,0); o[ln]=(new e.functions.call_expr(o.slice(-2),e,l,s));o.length=ln+1; return 77835},
(t, e, o, l, s)=>{let ln = Math.max(o.length-2,0); o[ln]=(new e.functions.new_expr(o.slice(-2),e,l,s));o.length=ln+1; return 90123},
(t, e, o, l, s)=>1186,
(t, e, o, l, s)=>{let ln = Math.max(o.length-2,0); o[ln]=( array_literal$0(o.slice(-2),e,l,s));o.length=ln+1; return 110603},
(t, e, o, l, s)=>1190,
(t, e, o, l, s)=>1194,
(t, e, o, l, s)=>1206,
(t, e, o, l, s)=>1214,
(t, e, o, l, s)=>112647,
(t, e, o, l, s)=>{let ln = Math.max(o.length-1,0); o[ln]=( statement_list$0(o.slice(-1),e,l,s));o.length=ln+1; return 111623},
(t, e, o, l, s)=>{let ln = Math.max(o.length-2,0); o[ln]=( cover_parenthesized_expression_and_arrow_parameter_list$0(o.slice(-2),e,l,s));o.length=ln+1; return 132107},
(t, e, o, l, s)=>1222,
(t, e, o, l, s)=>1226,
(t, e, o, l, s)=>96267,
(t, e, o, l, s)=>{let ln = Math.max(o.length-2,0); o[ln]=(new e.functions.await_expr(o.slice(-2),e,l,s));o.length=ln+1; return 131083},
(t, e, o, l, s)=>1254,
(t, e, o, l, s)=>{let ln = Math.max(o.length-2,0); o[ln]=(new e.functions.label_stmt(o.slice(-2),e,l,s));o.length=ln+1; return 47115},
(t, e, o, l, s)=>1270,
(t, e, o, l, s)=>1274,
(t, e, o, l, s)=>{let ln = Math.max(o.length-1,0); o[ln]=( statement_list$0(o.slice(-1),e,l,s));o.length=ln+1; return 56327},
(t, e, o, l, s)=>{let ln = Math.max(o.length-1,0); o[ln]=(new e.functions.binding(o.slice(-1),e,l,s));o.length=ln+1; return 57351},
(t, e, o, l, s)=>1282,
(t, e, o, l, s)=>133127,
(t, e, o, l, s)=>1290,
(t, e, o, l, s)=>1302,
(t, e, o, l, s)=>1322,
(t, e, o, l, s)=>1338,
(t, e, o, l, s)=>1362,
(t, e, o, l, s)=>1374,
(t, e, o, l, s)=>1378,
(t, e, o, l, s)=>1398,
(t, e, o, l, s)=>{let ln = Math.max(o.length-2,0); o[ln]=(new e.functions.continue_stmt(o.slice(-2),e,l,s));o.length=ln+1; return 36875},
(t, e, o, l, s)=>1406,
(t, e, o, l, s)=>{let ln = Math.max(o.length-2,0); o[ln]=(new e.functions.break_stmt(o.slice(-2),e,l,s));o.length=ln+1; return 37899},
(t, e, o, l, s)=>1410,
(t, e, o, l, s)=>{let ln = Math.max(o.length-2,0); o[ln]=( return_statement$0(o.slice(-2),e,l,s));o.length=ln+1; return 38923},
(t, e, o, l, s)=>1414,
(t, e, o, l, s)=>1422,
(t, e, o, l, s)=>1434,
(t, e, o, l, s)=>1438,
(t, e, o, l, s)=>{let ln = Math.max(o.length-2,0); o[ln]=(new e.functions.debugger_stmt(o.slice(-2),e,l,s));o.length=ln+1; return 54283},
(t, e, o, l, s)=>{let ln = Math.max(o.length-2,0); o[ln]=(new e.functions.class_stmt(o.slice(-2),e,l,s));o.length=ln+1; return 79883},
(t, e, o, l, s)=>1446,
(t, e, o, l, s)=>1454,
(t, e, o, l, s)=>1470,
(t, e, o, l, s)=>1474,
(t, e, o, l, s)=>{o.push(null); return 65539},
(t, e, o, l, s)=>1514,
(t, e, o, l, s)=>1518,
(t, e, o, l, s)=>1522,
(t, e, o, l, s)=>{let ln = Math.max(o.length-1,0); o[ln]=( statement_list$0(o.slice(-1),e,l,s));o.length=ln+1; return 60423},
(t, e, o, l, s)=>{let ln = Math.max(o.length-3,0); o[ln]=(new e.functions.block(o.slice(-3),e,l,s));o.length=ln+1; return 29711},
(t, e, o, l, s)=>{let ln = Math.max(o.length-3,0); o[ln]=( expression$0(o.slice(-3),e,l,s));o.length=ln+1; return 88079},
(t, e, o, l, s)=>{let ln = Math.max(o.length-3,0); o[ln]=(new e.functions.assign(o.slice(-3),e,l,s));o.length=ln+1; return 114703},
(t, e, o, l, s)=>1534,
(t, e, o, l, s)=>{let ln = Math.max(o.length-3,0); o[ln]=(new e.functions.or(o.slice(-3),e,l,s));o.length=ln+1; return 117775},
(t, e, o, l, s)=>{let ln = Math.max(o.length-3,0); o[ln]=(new e.functions.and(o.slice(-3),e,l,s));o.length=ln+1; return 118799},
(t, e, o, l, s)=>{let ln = Math.max(o.length-3,0); o[ln]=(new e.functions.bit_or(o.slice(-3),e,l,s));o.length=ln+1; return 119823},
(t, e, o, l, s)=>{let ln = Math.max(o.length-3,0); o[ln]=(new e.functions.bit_xor(o.slice(-3),e,l,s));o.length=ln+1; return 120847},
(t, e, o, l, s)=>{let ln = Math.max(o.length-3,0); o[ln]=(new e.functions.bit_and(o.slice(-3),e,l,s));o.length=ln+1; return 121871},
(t, e, o, l, s)=>{let ln = Math.max(o.length-3,0); o[ln]=(new e.functions.eq(o.slice(-3),e,l,s));o.length=ln+1; return 122895},
(t, e, o, l, s)=>{let ln = Math.max(o.length-3,0); o[ln]=(new e.functions.neq(o.slice(-3),e,l,s));o.length=ln+1; return 122895},
(t, e, o, l, s)=>{let ln = Math.max(o.length-3,0); o[ln]=(new e.functions.strict_eq(o.slice(-3),e,l,s));o.length=ln+1; return 122895},
(t, e, o, l, s)=>{let ln = Math.max(o.length-3,0); o[ln]=(new e.functions.strict_neq(o.slice(-3),e,l,s));o.length=ln+1; return 122895},
(t, e, o, l, s)=>{let ln = Math.max(o.length-3,0); o[ln]=(new e.functions.lt(o.slice(-3),e,l,s));o.length=ln+1; return 123919},
(t, e, o, l, s)=>{let ln = Math.max(o.length-3,0); o[ln]=(new e.functions.gt(o.slice(-3),e,l,s));o.length=ln+1; return 123919},
(t, e, o, l, s)=>{let ln = Math.max(o.length-3,0); o[ln]=(new e.functions.lteq(o.slice(-3),e,l,s));o.length=ln+1; return 123919},
(t, e, o, l, s)=>{let ln = Math.max(o.length-3,0); o[ln]=(new e.functions.gteq(o.slice(-3),e,l,s));o.length=ln+1; return 123919},
(t, e, o, l, s)=>{let ln = Math.max(o.length-3,0); o[ln]=(new e.functions.instanceof_expr(o.slice(-3),e,l,s));o.length=ln+1; return 123919},
(t, e, o, l, s)=>{let ln = Math.max(o.length-3,0); o[ln]=(new e.functions.in(o.slice(-3),e,l,s));o.length=ln+1; return 123919},
(t, e, o, l, s)=>{let ln = Math.max(o.length-3,0); o[ln]=(new e.functions.l_shift(o.slice(-3),e,l,s));o.length=ln+1; return 124943},
(t, e, o, l, s)=>{let ln = Math.max(o.length-3,0); o[ln]=(new e.functions.r_shift(o.slice(-3),e,l,s));o.length=ln+1; return 124943},
(t, e, o, l, s)=>{let ln = Math.max(o.length-3,0); o[ln]=(new e.functions.r_shift_fill(o.slice(-3),e,l,s));o.length=ln+1; return 124943},
(t, e, o, l, s)=>{let ln = Math.max(o.length-3,0); o[ln]=(new e.functions.add(o.slice(-3),e,l,s));o.length=ln+1; return 125967},
(t, e, o, l, s)=>{let ln = Math.max(o.length-3,0); o[ln]=(new e.functions.sub(o.slice(-3),e,l,s));o.length=ln+1; return 125967},
(t, e, o, l, s)=>{let ln = Math.max(o.length-3,0); o[ln]=(new e.functions.mult(o.slice(-3),e,l,s));o.length=ln+1; return 126991},
(t, e, o, l, s)=>{let ln = Math.max(o.length-3,0); o[ln]=(new e.functions.div(o.slice(-3),e,l,s));o.length=ln+1; return 126991},
(t, e, o, l, s)=>{let ln = Math.max(o.length-3,0); o[ln]=(new e.functions.mod(o.slice(-3),e,l,s));o.length=ln+1; return 126991},
(t, e, o, l, s)=>{let ln = Math.max(o.length-3,0); o[ln]=(new e.functions.exp(o.slice(-3),e,l,s));o.length=ln+1; return 128015},
(t, e, o, l, s)=>{let ln = Math.max(o.length-2,0); o[ln]=( class_tail$3(o.slice(-2),e,l,s));o.length=ln+1; return 100363},
(t, e, o, l, s)=>1538,
(t, e, o, l, s)=>1542,
(t, e, o, l, s)=>{let ln = Math.max(o.length-1,0); o[ln]=( statement_list$0(o.slice(-1),e,l,s));o.length=ln+1; return 101383},
(t, e, o, l, s)=>102407,
(t, e, o, l, s)=>{let ln = Math.max(o.length-1,0); o[ln]=(new property_definition$0(o.slice(-1),e,l,s));o.length=ln+1; return 102407},
(t, e, o, l, s)=>1558,
(t, e, o, l, s)=>1562,
(t, e, o, l, s)=>105479,
(t, e, o, l, s)=>106503,
(t, e, o, l, s)=>{let ln = Math.max(o.length-3,0); o[ln]=(new e.functions.call_expr(o.slice(-3),e,l,s));o.length=ln+1; return 95247},
(t, e, o, l, s)=>1578,
(t, e, o, l, s)=>{let ln = Math.max(o.length-2,0); o[ln]=( arguments$0(o.slice(-2),e,l,s));o.length=ln+1; return 97291},
(t, e, o, l, s)=>1582,
(t, e, o, l, s)=>1586,
(t, e, o, l, s)=>{let ln = Math.max(o.length-1,0); o[ln]=( statement_list$0(o.slice(-1),e,l,s));o.length=ln+1; return 98311},
(t, e, o, l, s)=>1594,
(t, e, o, l, s)=>{let ln = Math.max(o.length-3,0); o[ln]=(new e.functions.member(o.slice(-3),e,l,s));o.length=ln+1; return 91151},
(t, e, o, l, s)=>{let ln = Math.max(o.length-3,0); o[ln]=(new e.functions.new_member_stmt(o.slice(-3),e,l,s));o.length=ln+1; return 91151},
(t, e, o, l, s)=>{let ln = Math.max(o.length-3,0); o[ln]=(new e.functions.new_target_expr(o.slice(-3),e,l,s));o.length=ln+1; return 94223},
(t, e, o, l, s)=>{let ln = Math.max(o.length-3,0); o[ln]=( array_literal$0(o.slice(-3),e,l,s));o.length=ln+1; return 110607},
(t, e, o, l, s)=>112651,
(t, e, o, l, s)=>{let ln = Math.max(o.length-2,0); o[ln]=( element_list$0(o.slice(-2),e,l,s));o.length=ln+1; return 111627},
(t, e, o, l, s)=>{let ln = Math.max(o.length-3,0); o[ln]=( case_block$3(o.slice(-3),e,l,s));o.length=ln+1; return 110607},
(t, e, o, l, s)=>1598,
(t, e, o, l, s)=>{let ln = Math.max(o.length-2,0); o[ln]=(new e.functions.spread_expr(o.slice(-2),e,l,s));o.length=ln+1; return 113675},
(t, e, o, l, s)=>{let ln = Math.max(o.length-3,0); o[ln]=( case_block$3(o.slice(-3),e,l,s));o.length=ln+1; return 132111},
(t, e, o, l, s)=>1614,
(t, e, o, l, s)=>1618,
(t, e, o, l, s)=>1622,
(t, e, o, l, s)=>1626,
(t, e, o, l, s)=>{let ln = Math.max(o.length-3,0); o[ln]=(new e.functions.supper_expr(o.slice(-3),e,l,s));o.length=ln+1; return 92175},
(t, e, o, l, s)=>1630,
(t, e, o, l, s)=>{let ln = Math.max(o.length-3,0); o[ln]=( arrow_function$0(o.slice(-3),e,l,s));o.length=ln+1; return 71695},
(t, e, o, l, s)=>73735,
(t, e, o, l, s)=>{let ln = Math.max(o.length-2,0); o[ln]=( case_block$3(o.slice(-2),e,l,s));o.length=ln+1; return 48139},
(t, e, o, l, s)=>49159,
(t, e, o, l, s)=>{let ln = Math.max(o.length-3,0); o[ln]=(new e.functions.var_stmt(o.slice(-3),e,l,s));o.length=ln+1; return 55311},
(t, e, o, l, s)=>{let ln = Math.max(o.length-2,0); o[ln]=(new e.functions.binding(o.slice(-2),e,l,s));o.length=ln+1; return 57355},
(t, e, o, l, s)=>134155,
(t, e, o, l, s)=>1650,
(t, e, o, l, s)=>1654,
(t, e, o, l, s)=>1658,
(t, e, o, l, s)=>137223,
(t, e, o, l, s)=>140295,
(t, e, o, l, s)=>1666,
(t, e, o, l, s)=>142343,
(t, e, o, l, s)=>135179,
(t, e, o, l, s)=>1678,
(t, e, o, l, s)=>1686,
(t, e, o, l, s)=>1690,
(t, e, o, l, s)=>1694,
(t, e, o, l, s)=>138247,
(t, e, o, l, s)=>139271,
(t, e, o, l, s)=>141319,
(t, e, o, l, s)=>1710,
(t, e, o, l, s)=>1714,
(t, e, o, l, s)=>1718,
(t, e, o, l, s)=>1722,
(t, e, o, l, s)=>1730,
(t, e, o, l, s)=>{f91_7(o,e,l,s); return 1754},
(t, e, o, l, s)=>1758,
(t, e, o, l, s)=>1762,
(t, e, o, l, s)=>1766,
(t, e, o, l, s)=>1770,
(t, e, o, l, s)=>1790,
(t, e, o, l, s)=>1802,
(t, e, o, l, s)=>{let ln = Math.max(o.length-3,0); o[ln]=( continue_statement$0(o.slice(-3),e,l,s));o.length=ln+1; return 36879},
(t, e, o, l, s)=>{let ln = Math.max(o.length-3,0); o[ln]=( break_statement$0(o.slice(-3),e,l,s));o.length=ln+1; return 37903},
(t, e, o, l, s)=>{let ln = Math.max(o.length-3,0); o[ln]=(new e.functions.return_stmt(o.slice(-3),e,l,s));o.length=ln+1; return 38927},
(t, e, o, l, s)=>1806,
(t, e, o, l, s)=>{let ln = Math.max(o.length-3,0); o[ln]=(new e.functions.throw_stmt(o.slice(-3),e,l,s));o.length=ln+1; return 39951},
(t, e, o, l, s)=>{let ln = Math.max(o.length-3,0); o[ln]=( try_statement$0(o.slice(-3),e,l,s));o.length=ln+1; return 50191},
(t, e, o, l, s)=>{let ln = Math.max(o.length-3,0); o[ln]=( try_statement$1(o.slice(-3),e,l,s));o.length=ln+1; return 50191},
(t, e, o, l, s)=>1814,
(t, e, o, l, s)=>{let ln = Math.max(o.length-3,0); o[ln]=(new e.functions.class_stmt(o.slice(-3),e,l,s));o.length=ln+1; return 79887},
(t, e, o, l, s)=>1826,
(t, e, o, l, s)=>1830,
(t, e, o, l, s)=>{let ln = Math.max(o.length-2,0); o[ln]=( class_tail$3(o.slice(-2),e,l,s));o.length=ln+1; return 80907},
(t, e, o, l, s)=>82951,
(t, e, o, l, s)=>{let ln = Math.max(o.length-1,0); o[ln]=( statement_list$0(o.slice(-1),e,l,s));o.length=ln+1; return 83975},
(t, e, o, l, s)=>84999,
(t, e, o, l, s)=>{let ln = Math.max(o.length-2,0); o[ln]=( case_block$3(o.slice(-2),e,l,s));o.length=ln+1; return 81931},
(t, e, o, l, s)=>1842,
(t, e, o, l, s)=>65543,
(t, e, o, l, s)=>1846,
(t, e, o, l, s)=>67591,
(t, e, o, l, s)=>{let ln = Math.max(o.length-1,0); o[ln]=( statement_list$0(o.slice(-1),e,l,s));o.length=ln+1; return 66567},
(t, e, o, l, s)=>68615,
(t, e, o, l, s)=>{let ln = Math.max(o.length-3,0); o[ln]=(new e.functions.lexical(o.slice(-3),e,l,s));o.length=ln+1; return 58383},
(t, e, o, l, s)=>{let ln = Math.max(o.length-2,0); o[ln]=(new e.functions.binding(o.slice(-2),e,l,s));o.length=ln+1; return 61451},
(t, e, o, l, s)=>{let ln = Math.max(o.length-3,0); o[ln]=( case_block$3(o.slice(-3),e,l,s));o.length=ln+1; return 100367},
(t, e, o, l, s)=>1862,
(t, e, o, l, s)=>108555,
(t, e, o, l, s)=>{let ln = Math.max(o.length-2,0); o[ln]=(new e.functions.spread_expr(o.slice(-2),e,l,s));o.length=ln+1; return 102411},
(t, e, o, l, s)=>{let ln = Math.max(o.length-2,0); o[ln]=(new colon_assignment$0(o.slice(-2),e,l,s));o.length=ln+1; return 103435},
(t, e, o, l, s)=>1882,
(t, e, o, l, s)=>1886,
(t, e, o, l, s)=>1890,
(t, e, o, l, s)=>{let ln = Math.max(o.length-4,0); o[ln]=(new e.functions.call_expr(o.slice(-4),e,l,s));o.length=ln+1; return 95251},
(t, e, o, l, s)=>{let ln = Math.max(o.length-3,0); o[ln]=( case_block$3(o.slice(-3),e,l,s));o.length=ln+1; return 97295},
(t, e, o, l, s)=>1894,
(t, e, o, l, s)=>1902,
(t, e, o, l, s)=>{let ln = Math.max(o.length-2,0); o[ln]=(new e.functions.spread_expr(o.slice(-2),e,l,s));o.length=ln+1; return 98315},
(t, e, o, l, s)=>{let ln = Math.max(o.length-4,0); o[ln]=(new e.functions.member(o.slice(-4),e,l,s));o.length=ln+1; return 91155},
(t, e, o, l, s)=>{let ln = Math.max(o.length-4,0); o[ln]=( case_block$3(o.slice(-4),e,l,s));o.length=ln+1; return 110611},
(t, e, o, l, s)=>{let ln = Math.max(o.length-3,0); o[ln]=( element_list$1(o.slice(-3),e,l,s));o.length=ln+1; return 111631},
(t, e, o, l, s)=>{let ln = Math.max(o.length-4,0); o[ln]=( case_block$3(o.slice(-4),e,l,s));o.length=ln+1; return 132115},
(t, e, o, l, s)=>{let ln = Math.max(o.length-4,0); o[ln]=( cover_parenthesized_expression_and_arrow_parameter_list$1(o.slice(-4),e,l,s));o.length=ln+1; return 132115},
(t, e, o, l, s)=>{let ln = Math.max(o.length-4,0); o[ln]=(new e.functions.supper_expr(o.slice(-4),e,l,s));o.length=ln+1; return 92179},
(t, e, o, l, s)=>1918,
(t, e, o, l, s)=>70663,
(t, e, o, l, s)=>{let ln = Math.max(o.length-3,0); o[ln]=( variable_declaration_list$0(o.slice(-3),e,l,s));o.length=ln+1; return 56335},
(t, e, o, l, s)=>{let ln = Math.max(o.length-2,0); o[ln]=( case_block$3(o.slice(-2),e,l,s));o.length=ln+1; return 109579},
(t, e, o, l, s)=>134159,
(t, e, o, l, s)=>1926,
(t, e, o, l, s)=>136203,
(t, e, o, l, s)=>142347,
(t, e, o, l, s)=>1938,
(t, e, o, l, s)=>135183,
(t, e, o, l, s)=>139275,
(t, e, o, l, s)=>1942,
(t, e, o, l, s)=>143371,
(t, e, o, l, s)=>141323,
(t, e, o, l, s)=>1974,
(t, e, o, l, s)=>1978,
(t, e, o, l, s)=>1986,
(t, e, o, l, s)=>1990,
(t, e, o, l, s)=>1994,
(t, e, o, l, s)=>1998,
(t, e, o, l, s)=>35847,
(t, e, o, l, s)=>{f89_8(o,e,l,s); return 2002},
(t, e, o, l, s)=>{f92_6(o,e,l,s); return 2010},
(t, e, o, l, s)=>34827,
(t, e, o, l, s)=>2030,
(t, e, o, l, s)=>2046,
(t, e, o, l, s)=>2054,
(t, e, o, l, s)=>{let ln = Math.max(o.length-4,0); o[ln]=( try_statement$2(o.slice(-4),e,l,s));o.length=ln+1; return 50195},
(t, e, o, l, s)=>{let ln = Math.max(o.length-2,0); o[ln]=(new e.functions.finally_stmt(o.slice(-2),e,l,s));o.length=ln+1; return 52235},
(t, e, o, l, s)=>2074,
(t, e, o, l, s)=>{let ln = Math.max(o.length-3,0); o[ln]=( class_tail$2(o.slice(-3),e,l,s));o.length=ln+1; return 80911},
(t, e, o, l, s)=>{let ln = Math.max(o.length-3,0); o[ln]=( class_tail$1(o.slice(-3),e,l,s));o.length=ln+1; return 80911},
(t, e, o, l, s)=>{let ln = Math.max(o.length-2,0); o[ln]=( class_element_list$0(o.slice(-2),e,l,s));o.length=ln+1; return 83979},
(t, e, o, l, s)=>{let ln = Math.max(o.length-2,0); o[ln]=( class_element$0(o.slice(-2),e,l,s));o.length=ln+1; return 85003},
(t, e, o, l, s)=>2078,
(t, e, o, l, s)=>{let ln = Math.max(o.length-2,0); o[ln]=( start$0(o.slice(-2),e,l,s));o.length=ln+1; return 65547},
(t, e, o, l, s)=>2090,
(t, e, o, l, s)=>{let ln = Math.max(o.length-3,0); o[ln]=( variable_declaration_list$0(o.slice(-3),e,l,s));o.length=ln+1; return 60431},
(t, e, o, l, s)=>{let ln = Math.max(o.length-5,0); o[ln]=(new e.functions.condition_expr(o.slice(-5),e,l,s));o.length=ln+1; return 116759},
(t, e, o, l, s)=>{let ln = Math.max(o.length-4,0); o[ln]=( case_block$3(o.slice(-4),e,l,s));o.length=ln+1; return 100371},
(t, e, o, l, s)=>{let ln = Math.max(o.length-3,0); o[ln]=( formal_parameters$0(o.slice(-3),e,l,s));o.length=ln+1; return 101391},
(t, e, o, l, s)=>2094,
(t, e, o, l, s)=>64519,
(t, e, o, l, s)=>{let ln = Math.max(o.length-2,0); o[ln]=( case_block$3(o.slice(-2),e,l,s));o.length=ln+1; return 104459},
(t, e, o, l, s)=>107535,
(t, e, o, l, s)=>2098,
(t, e, o, l, s)=>{let ln = Math.max(o.length-4,0); o[ln]=( case_block$3(o.slice(-4),e,l,s));o.length=ln+1; return 97299},
(t, e, o, l, s)=>{let ln = Math.max(o.length-3,0); o[ln]=( formal_parameters$0(o.slice(-3),e,l,s));o.length=ln+1; return 98319},
(t, e, o, l, s)=>{let ln = Math.max(o.length-4,0); o[ln]=( element_list$1(o.slice(-4),e,l,s));o.length=ln+1; return 111635},
(t, e, o, l, s)=>2114,
(t, e, o, l, s)=>2118,
(t, e, o, l, s)=>{let ln = Math.max(o.length-3,0); o[ln]=( case_block$3(o.slice(-3),e,l,s));o.length=ln+1; return 73743},
(t, e, o, l, s)=>2122,
(t, e, o, l, s)=>134163,
(t, e, o, l, s)=>137231,
(t, e, o, l, s)=>140303,
(t, e, o, l, s)=>135187,
(t, e, o, l, s)=>2126,
(t, e, o, l, s)=>2134,
(t, e, o, l, s)=>138255,
(t, e, o, l, s)=>2138,
(t, e, o, l, s)=>{let ln = Math.max(o.length-5,0); o[ln]=(new e.functions.if_stmt(o.slice(-5),e,l,s));o.length=ln+1; return 32791},
(t, e, o, l, s)=>2142,
(t, e, o, l, s)=>{let ln = Math.max(o.length-5,0); o[ln]=(new e.functions.while_stmt(o.slice(-5),e,l,s));o.length=ln+1; return 33815},
(t, e, o, l, s)=>2146,
(t, e, o, l, s)=>2154,
(t, e, o, l, s)=>2162,
(t, e, o, l, s)=>2174,
(t, e, o, l, s)=>{f90_7(o,e,l,s); return 2190},
(t, e, o, l, s)=>{f91_7(o,e,l,s); return 2194},
(t, e, o, l, s)=>2202,
(t, e, o, l, s)=>2206,
(t, e, o, l, s)=>2210,
(t, e, o, l, s)=>2214,
(t, e, o, l, s)=>2222,
(t, e, o, l, s)=>{let ln = Math.max(o.length-5,0); o[ln]=(new e.functions.switch_stmt(o.slice(-5),e,l,s));o.length=ln+1; return 42007},
(t, e, o, l, s)=>2230,
(t, e, o, l, s)=>2246,
(t, e, o, l, s)=>2250,
(t, e, o, l, s)=>{let ln = Math.max(o.length-5,0); o[ln]=(new e.functions.with_stmt(o.slice(-5),e,l,s));o.length=ln+1; return 40983},
(t, e, o, l, s)=>2254,
(t, e, o, l, s)=>53255,
(t, e, o, l, s)=>{let ln = Math.max(o.length-4,0); o[ln]=( class_tail$0(o.slice(-4),e,l,s));o.length=ln+1; return 80915},
(t, e, o, l, s)=>{o.push(null); return 69635},
(t, e, o, l, s)=>{let ln = Math.max(o.length-3,0); o[ln]=( formal_parameters$0(o.slice(-3),e,l,s));o.length=ln+1; return 65551},
(t, e, o, l, s)=>{let ln = Math.max(o.length-3,0); o[ln]=( formal_parameters$0(o.slice(-3),e,l,s));o.length=ln+1; return 66575},
(t, e, o, l, s)=>2266,
(t, e, o, l, s)=>2270,
(t, e, o, l, s)=>2274,
(t, e, o, l, s)=>2278,
(t, e, o, l, s)=>87047,
(t, e, o, l, s)=>{let ln = Math.max(o.length-4,0); o[ln]=( argument_list$0(o.slice(-4),e,l,s));o.length=ln+1; return 98323},
(t, e, o, l, s)=>{let ln = Math.max(o.length-6,0); o[ln]=( cover_parenthesized_expression_and_arrow_parameter_list$2(o.slice(-6),e,l,s));o.length=ln+1; return 132123},
(t, e, o, l, s)=>134167,
(t, e, o, l, s)=>135191,
(t, e, o, l, s)=>2282,
(t, e, o, l, s)=>2290,
(t, e, o, l, s)=>2298,
(t, e, o, l, s)=>2302,
(t, e, o, l, s)=>2310,
(t, e, o, l, s)=>{let ln = Math.max(o.length-6,0); o[ln]=( iteration_statement$6(o.slice(-6),e,l,s));o.length=ln+1; return 33819},
(t, e, o, l, s)=>2318,
(t, e, o, l, s)=>2326,
(t, e, o, l, s)=>2330,
(t, e, o, l, s)=>2334,
(t, e, o, l, s)=>{f89_8(o,e,l,s); return 2338},
(t, e, o, l, s)=>{let ln = Math.max(o.length-6,0); o[ln]=( iteration_statement$13(o.slice(-6),e,l,s));o.length=ln+1; return 33819},
(t, e, o, l, s)=>2366,
(t, e, o, l, s)=>2374,
(t, e, o, l, s)=>{let ln = Math.max(o.length-2,0); o[ln]=( case_block$0(o.slice(-2),e,l,s));o.length=ln+1; return 43019},
(t, e, o, l, s)=>2382,
(t, e, o, l, s)=>2394,
(t, e, o, l, s)=>{let ln = Math.max(o.length-1,0); o[ln]=( statement_list$0(o.slice(-1),e,l,s));o.length=ln+1; return 44039},
(t, e, o, l, s)=>2402,
(t, e, o, l, s)=>{let ln = Math.max(o.length-1,0); o[ln]=( default_clause$1(o.slice(-1),e,l,s));o.length=ln+1; return 46087},
(t, e, o, l, s)=>2410,
(t, e, o, l, s)=>69639,
(t, e, o, l, s)=>2426,
(t, e, o, l, s)=>135195,
(t, e, o, l, s)=>{let ln = Math.max(o.length-7,0); o[ln]=(new e.functions.if_stmt(o.slice(-7),e,l,s));o.length=ln+1; return 32799},
(t, e, o, l, s)=>{let ln = Math.max(o.length-7,0); o[ln]=(new e.functions.do_while_stmt(o.slice(-7),e,l,s));o.length=ln+1; return 33823},
(t, e, o, l, s)=>2430,
(t, e, o, l, s)=>{let ln = Math.max(o.length-7,0); o[ln]=( iteration_statement$5(o.slice(-7),e,l,s));o.length=ln+1; return 33823},
(t, e, o, l, s)=>{let ln = Math.max(o.length-7,0); o[ln]=( iteration_statement$4(o.slice(-7),e,l,s));o.length=ln+1; return 33823},
(t, e, o, l, s)=>2450,
(t, e, o, l, s)=>2454,
(t, e, o, l, s)=>{let ln = Math.max(o.length-7,0); o[ln]=( iteration_statement$11(o.slice(-7),e,l,s));o.length=ln+1; return 33823},
(t, e, o, l, s)=>{let ln = Math.max(o.length-7,0); o[ln]=( iteration_statement$12(o.slice(-7),e,l,s));o.length=ln+1; return 33823},
(t, e, o, l, s)=>{let ln = Math.max(o.length-7,0); o[ln]=( iteration_statement$14(o.slice(-7),e,l,s));o.length=ln+1; return 33823},
(t, e, o, l, s)=>{let ln = Math.max(o.length-7,0); o[ln]=( iteration_statement$16(o.slice(-7),e,l,s));o.length=ln+1; return 33823},
(t, e, o, l, s)=>2478,
(t, e, o, l, s)=>2490,
(t, e, o, l, s)=>{let ln = Math.max(o.length-3,0); o[ln]=( case_block$3(o.slice(-3),e,l,s));o.length=ln+1; return 43023},
(t, e, o, l, s)=>{let ln = Math.max(o.length-2,0); o[ln]=( case_clauses$0(o.slice(-2),e,l,s));o.length=ln+1; return 44043},
(t, e, o, l, s)=>2494,
(t, e, o, l, s)=>2498,
(t, e, o, l, s)=>{let ln = Math.max(o.length-5,0); o[ln]=(new e.functions.catch_stmt(o.slice(-5),e,l,s));o.length=ln+1; return 51223},
(t, e, o, l, s)=>{let ln = Math.max(o.length-7,0); o[ln]=( function_declaration$0(o.slice(-7),e,l,s));o.length=ln+1; return 63519},
(t, e, o, l, s)=>2506,
(t, e, o, l, s)=>2510,
(t, e, o, l, s)=>2514,
(t, e, o, l, s)=>{let ln = Math.max(o.length-8,0); o[ln]=( iteration_statement$3(o.slice(-8),e,l,s));o.length=ln+1; return 33827},
(t, e, o, l, s)=>{let ln = Math.max(o.length-8,0); o[ln]=( iteration_statement$2(o.slice(-8),e,l,s));o.length=ln+1; return 33827},
(t, e, o, l, s)=>{let ln = Math.max(o.length-8,0); o[ln]=( iteration_statement$1(o.slice(-8),e,l,s));o.length=ln+1; return 33827},
(t, e, o, l, s)=>2526,
(t, e, o, l, s)=>{let ln = Math.max(o.length-8,0); o[ln]=( iteration_statement$10(o.slice(-8),e,l,s));o.length=ln+1; return 33827},
(t, e, o, l, s)=>{let ln = Math.max(o.length-8,0); o[ln]=( iteration_statement$15(o.slice(-8),e,l,s));o.length=ln+1; return 33827},
(t, e, o, l, s)=>{let ln = Math.max(o.length-8,0); o[ln]=( iteration_statement$16(o.slice(-8),e,l,s));o.length=ln+1; return 33827},
(t, e, o, l, s)=>{let ln = Math.max(o.length-8,0); o[ln]=( iteration_statement$0(o.slice(-8),e,l,s));o.length=ln+1; return 33827},
(t, e, o, l, s)=>{let ln = Math.max(o.length-8,0); o[ln]=( iteration_statement$17(o.slice(-8),e,l,s));o.length=ln+1; return 33827},
(t, e, o, l, s)=>2542,
(t, e, o, l, s)=>{let ln = Math.max(o.length-4,0); o[ln]=( case_block$2(o.slice(-4),e,l,s));o.length=ln+1; return 43027},
(t, e, o, l, s)=>{let ln = Math.max(o.length-3,0); o[ln]=( case_clause$1(o.slice(-3),e,l,s));o.length=ln+1; return 45071},
(t, e, o, l, s)=>{let ln = Math.max(o.length-3,0); o[ln]=( default_clause$0(o.slice(-3),e,l,s));o.length=ln+1; return 46095},
(t, e, o, l, s)=>{let ln = Math.max(o.length-8,0); o[ln]=( function_declaration$1(o.slice(-8),e,l,s));o.length=ln+1; return 63523},
(t, e, o, l, s)=>{let ln = Math.max(o.length-7,0); o[ln]=(new e.functions.class_method(o.slice(-7),e,l,s));o.length=ln+1; return 86047},
(t, e, o, l, s)=>{let ln = Math.max(o.length-7,0); o[ln]=(new e.functions.class_get_method(o.slice(-7),e,l,s));o.length=ln+1; return 86047},
(t, e, o, l, s)=>2550,
(t, e, o, l, s)=>{let ln = Math.max(o.length-9,0); o[ln]=( iteration_statement$0(o.slice(-9),e,l,s));o.length=ln+1; return 33831},
(t, e, o, l, s)=>{let ln = Math.max(o.length-9,0); o[ln]=( iteration_statement$8(o.slice(-9),e,l,s));o.length=ln+1; return 33831},
(t, e, o, l, s)=>{let ln = Math.max(o.length-9,0); o[ln]=( iteration_statement$9(o.slice(-9),e,l,s));o.length=ln+1; return 33831},
(t, e, o, l, s)=>{let ln = Math.max(o.length-9,0); o[ln]=( iteration_statement$18(o.slice(-9),e,l,s));o.length=ln+1; return 33831},
(t, e, o, l, s)=>{let ln = Math.max(o.length-5,0); o[ln]=( case_block$1(o.slice(-5),e,l,s));o.length=ln+1; return 43031},
(t, e, o, l, s)=>{let ln = Math.max(o.length-4,0); o[ln]=( case_clause$0(o.slice(-4),e,l,s));o.length=ln+1; return 45075},
(t, e, o, l, s)=>{let ln = Math.max(o.length-8,0); o[ln]=(new e.functions.class_set_method(o.slice(-8),e,l,s));o.length=ln+1; return 86051},
(t, e, o, l, s)=>{let ln = Math.max(o.length-10,0); o[ln]=( iteration_statement$7(o.slice(-10),e,l,s));o.length=ln+1; return 33835}],
rec = [0,
0,
4,
80,
84,
88,
92,
92,
96,
96,
96,
96,
96,
96,
96,
96,
96,
96,
96,
96,
96,
96,
112,
116,
124,
344,
448,
448,
448,
456,
460,
464,
468,
472,
476,
480,
484,
488,
492,
496,
500,
500,
504,
504,
504,
504,
504,
504,
504,
504,
508,
508,
348,
348,
352,
352,
356,
356,
356,
388,
388,
388,
388,
388,
388,
388,
588,
596,
600,
564,
564,
564,
564,
580,
580,
576,
568,
572,
432,
516,
360,
364,
372,
372,
512,
280,
284,
184,
216,
120,
128,
108,
108,
132,
132,
132,
164,
144,
148,
152,
160,
156,
196,
212,
100,
100,
100,
312,
104,
248,
228,
232,
232,
88,
116,
124,
344,
448,
448,
508,
508,
452,
452,
452,
452,
452,
452,
452,
452,
452,
452,
452,
452,
456,
460,
464,
468,
472,
476,
480,
480,
480,
480,
484,
484,
484,
484,
484,
484,
488,
488,
488,
492,
492,
496,
496,
496,
500,
504,
504,
508,
388,
388,
588,
392,
244,
308,
504,
504,
504,
504,
504,
504,
508,
508,
372,
372,
372,
380,
356,
356,
304,
352,
356,
368,
360,
432,
432,
432,
440,
436,
436,
588,
444,
516,
516,
516,
360,
360,
376,
512,
280,
184,
188,
216,
220,
224,
224,
592,
520,
520,
524,
528,
128,
132,
132,
132,
132,
164,
144,
144,
584,
148,
148,
152,
152,
160,
156,
196,
212,
312,
312,
316,
316,
320,
248,
248,
228,
236,
240,
240,
116,
344,
448,
448,
456,
460,
464,
468,
472,
476,
480,
480,
480,
480,
484,
484,
484,
484,
484,
484,
488,
488,
488,
492,
492,
496,
496,
496,
500,
392,
392,
396,
400,
400,
400,
400,
400,
404,
412,
412,
416,
416,
416,
420,
336,
336,
372,
372,
380,
380,
384,
384,
356,
356,
356,
368,
432,
440,
436,
436,
432,
432,
436,
444,
516,
516,
516,
516,
360,
360,
280,
288,
288,
188,
192,
192,
216,
220,
224,
428,
224,
524,
524,
524,
532,
536,
548,
548,
556,
528,
528,
528,
528,
560,
540,
544,
552,
552,
128,
132,
132,
132,
132,
132,
132,
132,
132,
228,
132,
164,
144,
148,
152,
160,
156,
196,
196,
200,
204,
312,
316,
316,
316,
324,
328,
332,
332,
332,
336,
416,
320,
248,
256,
256,
264,
260,
268,
248,
228,
236,
240,
240,
456,
392,
392,
424,
400,
404,
336,
408,
420,
336,
336,
372,
380,
380,
384,
356,
432,
436,
436,
436,
516,
516,
516,
516,
360,
288,
276,
220,
428,
524,
524,
524,
532,
548,
556,
528,
528,
544,
528,
528,
528,
560,
560,
552,
128,
132,
132,
132,
132,
132,
132,
132,
224,
224,
132,
132,
132,
132,
132,
132,
136,
240,
240,
132,
132,
132,
136,
164,
160,
196,
200,
204,
316,
316,
316,
328,
332,
248,
256,
248,
236,
456,
392,
396,
336,
252,
408,
420,
336,
336,
380,
384,
384,
436,
516,
516,
288,
524,
524,
536,
548,
528,
528,
528,
528,
540,
128,
132,
132,
132,
132,
132,
132,
132,
132,
132,
132,
132,
132,
132,
132,
132,
132,
132,
132,
132,
140,
140,
132,
164,
168,
160,
200,
208,
208,
316,
248,
256,
260,
248,
336,
336,
336,
340,
384,
516,
516,
524,
528,
528,
528,
128,
132,
132,
132,
132,
132,
132,
132,
132,
132,
132,
132,
132,
132,
132,
132,
132,
132,
132,
132,
132,
132,
132,
168,
168,
168,
172,
176,
180,
200,
248,
272,
248,
336,
336,
336,
528,
128,
132,
132,
132,
132,
132,
132,
132,
132,
132,
132,
132,
132,
132,
132,
132,
132,
132,
132,
132,
132,
132,
132,
168,
168,
172,
168,
168,
176,
180,
200,
248,
248,
336,
336,
336,
132,
132,
132,
132,
132,
132,
132,
132,
132,
132,
132,
132,
132,
132,
168,
168,
168,
176,
180,
248,
336,
336,
336,
132,
132,
132,
132,
132,
168,
176,
336,
132],
sm = [new Map([["$",1],["{",2],["τdelete",3],["τvoid",4],["τtypeof",5],["+",6],["-",7],["~",8],["!",9],["++",10],["--",11],["τnew",12],["τthis",13],["θid",14],["τtrue",15],["τfalse",16],["τnull",17],["θstr",18],["θnum",19],["[",20],["(",21],["τsuper",22],["τawait",23],["τvar",24],[";",25],["τif",26],["τdo",27],["τwhile",28],["τfor",29],["τswitch",30],["τcontinue",31],["τbreak",32],["τreturn",33],["τwith",34],["τthrow",35],["τtry",36],["τdebugger",37],["τclass",38],["τfunction",39],["τlet",40],["τconst",41],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["$",42],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["$",43],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["$",44],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["$",45],["{",2],["τdelete",3],["τvoid",4],["τtypeof",5],["+",6],["-",7],["~",8],["!",9],["++",10],["--",11],["τnew",12],["τthis",13],["θid",14],["τtrue",15],["τfalse",16],["τnull",17],["θstr",18],["θnum",19],["[",20],["(",21],["τsuper",22],["τawait",23],["τvar",24],[";",25],["τif",26],["τdo",27],["τwhile",28],["τfor",29],["τswitch",30],["τcontinue",31],["τbreak",32],["τreturn",33],["τwith",34],["τthrow",35],["τtry",36],["τdebugger",37],["τclass",38],["τfunction",39],["τlet",40],["τconst",41],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["$",46],["{",46],["τthis",46],["θid",46],["τtrue",46],["τfalse",46],["τnull",46],["θstr",46],["θnum",46],["[",46],["τfunction",46],["τclass",46],["(",46],["τsuper",46],["τnew",46],["++",46],["--",46],["τdelete",46],["τvoid",46],["τtypeof",46],["+",46],["-",46],["~",46],["τawait",46],["τvar",46],[";",46],["τif",46],["τdo",46],["τwhile",46],["τfor",46],["τswitch",46],["τcontinue",46],["τbreak",46],["τreturn",46],["τwith",46],["τthrow",46],["τtry",46],["τdebugger",46],["τlet",46],["τconst",46],["}",46],["τcase",46],["τdefault",46],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["$",47],["{",47],["τthis",47],["θid",47],["τtrue",47],["τfalse",47],["τnull",47],["θstr",47],["θnum",47],["[",47],["τfunction",47],["τclass",47],["(",47],["τsuper",47],["τnew",47],["++",47],["--",47],["τdelete",47],["τvoid",47],["τtypeof",47],["+",47],["-",47],["~",47],["τawait",47],["τvar",47],[";",47],["τif",47],["τdo",47],["τwhile",47],["τfor",47],["τswitch",47],["τcontinue",47],["τbreak",47],["τreturn",47],["τwith",47],["τthrow",47],["τtry",47],["τdebugger",47],["τlet",47],["τconst",47],["}",47],["τcase",47],["τdefault",47],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["$",48],["{",48],["τthis",48],["θid",48],["τtrue",48],["τfalse",48],["τnull",48],["θstr",48],["θnum",48],["[",48],["τfunction",48],["τclass",48],["(",48],["τsuper",48],["τnew",48],["++",48],["--",48],["τdelete",48],["τvoid",48],["τtypeof",48],["+",48],["-",48],["~",48],["τawait",48],["τvar",48],[";",48],["τif",48],["τdo",48],["τwhile",48],["τfor",48],["τswitch",48],["τcontinue",48],["τbreak",48],["τreturn",48],["τwith",48],["τthrow",48],["τtry",48],["τdebugger",48],["τlet",48],["τconst",48],["}",48],["τelse",48],["τcase",48],["τdefault",48],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["$",49],["{",49],["τthis",49],["θid",49],["τtrue",49],["τfalse",49],["τnull",49],["θstr",49],["θnum",49],["[",49],["τfunction",49],["τclass",49],["(",49],["τsuper",49],["τnew",49],["++",49],["--",49],["τdelete",49],["τvoid",49],["τtypeof",49],["+",49],["-",49],["~",49],["τawait",49],["τvar",49],[";",49],["τif",49],["τdo",49],["τwhile",49],["τfor",49],["τswitch",49],["τcontinue",49],["τbreak",49],["τreturn",49],["τwith",49],["τthrow",49],["τtry",49],["τdebugger",49],["τlet",49],["τconst",49],["}",49],["τelse",49],["τcase",49],["τdefault",49],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["{",2],["τdelete",3],["τvoid",4],["τtypeof",5],["+",6],["-",7],["~",8],["!",9],["++",10],["--",11],["τnew",12],["τthis",13],["θid",14],["τtrue",15],["τfalse",16],["τnull",17],["θstr",18],["θnum",19],["[",20],["(",21],["τsuper",22],["τawait",23],["τvar",24],[";",25],["τif",26],["τdo",27],["τwhile",28],["τfor",29],["τswitch",30],["τcontinue",31],["τbreak",32],["τreturn",33],["τwith",34],["τthrow",35],["τtry",36],["τdebugger",37],["τclass",38],["τfunction",39],["τlet",40],["τconst",41],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",50],[",",51],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",52],[",",52],[")",52],["]",52],[":",52],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",53],[",",53],["]",53],[")",53],[":",53],["}",53],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["=",54],[";",55],["++",56],["--",57],["**",55],["*",55],["/",55],["%",55],["+",55],["-",55],["<<",55],[">>",55],[">>>",55],["<",55],[">",55],["<=",55],[">=",55],["τinstanceof",55],["τin",55],["==",55],["!=",55],["===",55],["!==",55],["&",55],["^",55],["|",55],["&&",55],["||",55],["?",55],[",",55],["*=",58],["/=",59],["%=",60],["+=",61],["-=",62],["<<=",63],[">>=",64],[">>>=",65],["&=",66],["^=",67],["|=",68],["**=",69],["]",55],[")",55],[":",55],["}",55],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",70],["?",71],["||",72],[",",70],["]",70],[")",70],[":",70],["}",70],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",73],["&&",74],["||",73],["?",73],[",",73],["]",73],[")",73],[":",73],["}",73],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",75],["|",76],["&&",75],["||",75],["?",75],[",",75],["]",75],[")",75],[":",75],["}",75],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",77],["^",78],["|",77],["&&",77],["||",77],["?",77],[",",77],["]",77],[")",77],[":",77],["}",77],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",79],["&",80],["^",79],["|",79],["&&",79],["||",79],["?",79],[",",79],["]",79],[")",79],[":",79],["}",79],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",81],["==",82],["!=",83],["===",84],["!==",85],["&",81],["^",81],["|",81],["&&",81],["||",81],["?",81],[",",81],["]",81],[")",81],[":",81],["}",81],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",86],["<",87],[">",88],["<=",89],[">=",90],["τinstanceof",91],["τin",92],["==",86],["!=",86],["===",86],["!==",86],["&",86],["^",86],["|",86],["&&",86],["||",86],["?",86],[",",86],["]",86],[")",86],[":",86],["}",86],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",93],["<<",94],[">>",95],[">>>",96],["<",93],[">",93],["<=",93],[">=",93],["τinstanceof",93],["τin",93],["==",93],["!=",93],["===",93],["!==",93],["&",93],["^",93],["|",93],["&&",93],["||",93],["?",93],[",",93],["]",93],[")",93],[":",93],["}",93],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",97],["+",98],["-",99],["<<",97],[">>",97],[">>>",97],["<",97],[">",97],["<=",97],[">=",97],["τinstanceof",97],["τin",97],["==",97],["!=",97],["===",97],["!==",97],["&",97],["^",97],["|",97],["&&",97],["||",97],["?",97],[",",97],["]",97],[")",97],[":",97],["}",97],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",100],["*",101],["/",102],["%",103],["+",100],["-",100],["<<",100],[">>",100],[">>>",100],["<",100],[">",100],["<=",100],[">=",100],["τinstanceof",100],["τin",100],["==",100],["!=",100],["===",100],["!==",100],["&",100],["^",100],["|",100],["&&",100],["||",100],["?",100],[",",100],["]",100],[")",100],[":",100],["}",100],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",104],["*",104],["/",104],["%",104],["+",104],["-",104],["<<",104],[">>",104],[">>>",104],["<",104],[">",104],["<=",104],[">=",104],["τinstanceof",104],["τin",104],["==",104],["!=",104],["===",104],["!==",104],["&",104],["^",104],["|",104],["&&",104],["||",104],["?",104],[",",104],["]",104],[")",104],[":",104],["}",104],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",105],["*",105],["/",105],["%",105],["+",105],["-",105],["<<",105],[">>",105],[">>>",105],["<",105],[">",105],["<=",105],[">=",105],["τinstanceof",105],["τin",105],["==",105],["!=",105],["===",105],["!==",105],["&",105],["^",105],["|",105],["&&",105],["||",105],["?",105],[",",105],["]",105],[")",105],[":",105],["}",105],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["**",106],[";",107],["*",107],["/",107],["%",107],["+",107],["-",107],["<<",107],[">>",107],[">>>",107],["<",107],[">",107],["<=",107],[">=",107],["τinstanceof",107],["τin",107],["==",107],["!=",107],["===",107],["!==",107],["&",107],["^",107],["|",107],["&&",107],["||",107],["?",107],[",",107],["]",107],[")",107],[":",107],["}",107],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["τdelete",3],["τvoid",4],["τtypeof",5],["+",6],["-",7],["~",8],["!",9],["++",10],["--",11],["τnew",12],["τthis",13],["θid",14],["τtrue",15],["τfalse",16],["τnull",17],["θstr",18],["θnum",19],["[",20],["{",108],["τfunction",39],["τclass",38],["(",21],["τsuper",22],["τawait",23],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",107],["*",107],["/",107],["%",107],["+",107],["-",107],["<<",107],[">>",107],[">>>",107],["<",107],[">",107],["<=",107],[">=",107],["τinstanceof",107],["τin",107],["==",107],["!=",107],["===",107],["!==",107],["&",107],["^",107],["|",107],["&&",107],["||",107],["?",107],[",",107],["**",107],["]",107],[")",107],[":",107],["}",107],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",109],["++",109],["--",109],["**",109],["*",109],["/",109],["%",109],["+",109],["-",109],["<<",109],[">>",109],[">>>",109],["<",109],[">",109],["<=",109],[">=",109],["τinstanceof",109],["τin",109],["==",109],["!=",109],["===",109],["!==",109],["&",109],["^",109],["|",109],["&&",109],["||",109],["?",109],["=",109],["*=",109],["/=",109],["%=",109],["+=",109],["-=",109],["<<=",109],[">>=",109],[">>>=",109],["&=",109],["^=",109],["|=",109],["**=",109],[",",109],["]",109],[")",109],[":",109],["τof",109],["{",109],["}",109],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",109],[".",110],["[",111],["++",109],["--",109],["**",109],["*",109],["/",109],["%",109],["+",109],["-",109],["<<",109],[">>",109],[">>>",109],["<",109],[">",109],["<=",109],[">=",109],["τinstanceof",109],["τin",109],["==",109],["!=",109],["===",109],["!==",109],["&",109],["^",109],["|",109],["&&",109],["||",109],["?",109],["=",109],["*=",109],["/=",109],["%=",109],["+=",109],["-=",109],["<<=",109],[">>=",109],[">>>=",109],["&=",109],["^=",109],["|=",109],["**=",109],[",",109],["(",112],["]",109],[")",109],[":",109],["τof",109],["{",109],["}",109],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",113],["[",114],[".",115],["++",113],["--",113],["**",113],["*",113],["/",113],["%",113],["+",113],["-",113],["<<",113],[">>",113],[">>>",113],["<",113],[">",113],["<=",113],[">=",113],["τinstanceof",113],["τin",113],["==",113],["!=",113],["===",113],["!==",113],["&",113],["^",113],["|",113],["&&",113],["||",113],["?",113],["=",113],["*=",113],["/=",113],["%=",113],["+=",113],["-=",113],["<<=",113],[">>=",113],[">>>=",113],["&=",113],["^=",113],["|=",113],["**=",113],[",",113],["(",112],["]",113],[")",113],[":",113],["τof",113],["{",113],["}",113],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[".",116],["τnew",12],["τthis",13],["θid",14],["τtrue",15],["τfalse",16],["τnull",17],["θstr",18],["θnum",19],["[",20],["{",108],["τfunction",39],["τclass",38],["(",21],["τsuper",117],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",118],["[",118],[".",118],["(",118],["++",118],["--",118],["**",118],["*",118],["/",118],["%",118],["+",118],["-",118],["<<",118],[">>",118],[">>>",118],["<",118],[">",118],["<=",118],[">=",118],["τinstanceof",118],["τin",118],["==",118],["!=",118],["===",118],["!==",118],["&",118],["^",118],["|",118],["&&",118],["||",118],["?",118],["=",118],["*=",118],["/=",118],["%=",118],["+=",118],["-=",118],["<<=",118],[">>=",118],[">>>=",118],["&=",118],["^=",118],["|=",118],["**=",118],[",",118],["]",118],[")",118],[":",118],["τof",118],["{",118],["}",118],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",119],["[",119],[".",119],["(",119],["++",119],["--",119],["**",119],["*",119],["/",119],["%",119],["+",119],["-",119],["<<",119],[">>",119],[">>>",119],["<",119],[">",119],["<=",119],[">=",119],["τinstanceof",119],["τin",119],["==",119],["!=",119],["===",119],["!==",119],["&",119],["^",119],["|",119],["&&",119],["||",119],["?",119],["=",119],["*=",119],["/=",119],["%=",119],["+=",119],["-=",119],["<<=",119],[">>=",119],[">>>=",119],["&=",119],["^=",119],["|=",119],["**=",119],[",",119],["]",119],[")",119],[":",119],["τof",119],["{",119],["}",119],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",120],["[",120],[".",120],["(",120],["++",120],["--",120],["**",120],["*",120],["/",120],["%",120],["+",120],["-",120],["<<",120],[">>",120],[">>>",120],["<",120],[">",120],["<=",120],[">=",120],["τinstanceof",120],["τin",120],["==",120],["!=",120],["===",120],["!==",120],["&",120],["^",120],["|",120],["&&",120],["||",120],["?",120],["=",120],["*=",120],["/=",120],["%=",120],["+=",120],["-=",120],["<<=",120],[">>=",120],[">>>=",120],["&=",120],["^=",120],["|=",120],["**=",120],[",",120],["]",120],[")",120],[":",120],["τof",120],["{",120],["}",120],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",121],["[",121],[".",121],["(",121],["++",121],["--",121],["**",121],["*",121],["/",121],["%",121],["+",121],["-",121],["<<",121],[">>",121],[">>>",121],["<",121],[">",121],["<=",121],[">=",121],["τinstanceof",121],["τin",121],["==",121],["!=",121],["===",121],["!==",121],["&",121],["^",121],["|",121],["&&",121],["||",121],["?",121],["=",121],["*=",121],["/=",121],["%=",121],["+=",121],["-=",121],["<<=",121],[">>=",121],[">>>=",121],["&=",121],["^=",121],["|=",121],["**=",121],[",",121],["]",121],[")",121],[":",121],["τof",121],["{",121],["}",121],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",120],["[",120],[".",120],["(",120],["++",120],["--",120],["**",120],["*",120],["/",120],["%",120],["+",120],["-",120],["<<",120],[">>",120],[">>>",120],["<",120],[">",120],["<=",120],[">=",120],["τinstanceof",120],["τin",120],["==",120],["!=",120],["===",120],["!==",120],["&",120],["^",120],["|",120],["&&",120],["||",120],["?",120],["=>",122],["=",120],["*=",120],["/=",120],["%=",120],["+=",120],["-=",120],["<<=",120],[">>=",120],[">>>=",120],["&=",120],["^=",120],["|=",120],["**=",120],[",",120],["]",120],[")",120],[":",120],["τof",120],["}",120],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",123],["[",123],[".",123],["(",123],["++",123],["--",123],["**",123],["*",123],["/",123],["%",123],["+",123],["-",123],["<<",123],[">>",123],[">>>",123],["<",123],[">",123],["<=",123],[">=",123],["τinstanceof",123],["τin",123],["==",123],["!=",123],["===",123],["!==",123],["&",123],["^",123],["|",123],["&&",123],["||",123],["?",123],["=>",124],["=",123],["*=",123],["/=",123],["%=",123],["+=",123],["-=",123],["<<=",123],[">>=",123],[">>>=",123],["&=",123],["^=",123],["|=",123],["**=",123],[",",123],[":",125],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",126],["[",126],[".",126],["(",126],["++",126],["--",126],["**",126],["*",126],["/",126],["%",126],["+",126],["-",126],["<<",126],[">>",126],[">>>",126],["<",126],[">",126],["<=",126],[">=",126],["τinstanceof",126],["τin",126],["==",126],["!=",126],["===",126],["!==",126],["&",126],["^",126],["|",126],["&&",126],["||",126],["?",126],["=>",126],["=",126],["*=",126],["/=",126],["%=",126],["+=",126],["-=",126],["<<=",126],[">>=",126],[">>>=",126],["&=",126],["^=",126],["|=",126],["**=",126],[",",126],[":",126],["]",126],[")",126],["τextends",126],["{",126],["τof",126],["}",126],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",127],["[",127],[".",127],["(",127],["++",127],["--",127],["**",127],["*",127],["/",127],["%",127],["+",127],["-",127],["<<",127],[">>",127],[">>>",127],["<",127],[">",127],["<=",127],[">=",127],["τinstanceof",127],["τin",127],["==",127],["!=",127],["===",127],["!==",127],["&",127],["^",127],["|",127],["&&",127],["||",127],["?",127],["=>",127],["=",127],["*=",127],["/=",127],["%=",127],["+=",127],["-=",127],["<<=",127],[">>=",127],[">>>=",127],["&=",127],["^=",127],["|=",127],["**=",127],[",",127],[":",127],["]",127],[")",127],["τextends",127],["{",127],["}",127],["τof",127],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",128],["[",128],[".",128],["(",128],["++",128],["--",128],["**",128],["*",128],["/",128],["%",128],["+",128],["-",128],["<<",128],[">>",128],[">>>",128],["<",128],[">",128],["<=",128],[">=",128],["τinstanceof",128],["τin",128],["==",128],["!=",128],["===",128],["!==",128],["&",128],["^",128],["|",128],["&&",128],["||",128],["?",128],["=",128],["*=",128],["/=",128],["%=",128],["+=",128],["-=",128],["<<=",128],[">>=",128],[">>>=",128],["&=",128],["^=",128],["|=",128],["**=",128],[",",128],["]",128],[")",128],[":",128],["τof",128],["{",128],["}",128],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",129],["[",129],[".",129],["(",129],["++",129],["--",129],["**",129],["*",129],["/",129],["%",129],["+",129],["-",129],["<<",129],[">>",129],[">>>",129],["<",129],[">",129],["<=",129],[">=",129],["τinstanceof",129],["τin",129],["==",129],["!=",129],["===",129],["!==",129],["&",129],["^",129],["|",129],["&&",129],["||",129],["?",129],["=",129],["*=",129],["/=",129],["%=",129],["+=",129],["-=",129],["<<=",129],[">>=",129],[">>>=",129],["&=",129],["^=",129],["|=",129],["**=",129],[",",129],["]",129],[")",129],[":",129],["τof",129],["{",129],["}",129],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",130],["[",130],[".",130],["(",130],["++",130],["--",130],["**",130],["*",130],["/",130],["%",130],["+",130],["-",130],["<<",130],[">>",130],[">>>",130],["<",130],[">",130],["<=",130],[">=",130],["τinstanceof",130],["τin",130],["==",130],["!=",130],["===",130],["!==",130],["&",130],["^",130],["|",130],["&&",130],["||",130],["?",130],["=",130],["*=",130],["/=",130],["%=",130],["+=",130],["-=",130],["<<=",130],[">>=",130],[">>>=",130],["&=",130],["^=",130],["|=",130],["**=",130],[",",130],["]",130],[")",130],[":",130],["τof",130],["{",130],["}",130],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",131],["[",131],[".",131],["(",131],["++",131],["--",131],["**",131],["*",131],["/",131],["%",131],["+",131],["-",131],["<<",131],[">>",131],[">>>",131],["<",131],[">",131],["<=",131],[">=",131],["τinstanceof",131],["τin",131],["==",131],["!=",131],["===",131],["!==",131],["&",131],["^",131],["|",131],["&&",131],["||",131],["?",131],["=",131],["*=",131],["/=",131],["%=",131],["+=",131],["-=",131],["<<=",131],[">>=",131],[">>>=",131],["&=",131],["^=",131],["|=",131],["**=",131],[",",131],["]",131],[")",131],[":",131],["τof",131],["{",131],["}",131],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",132],["[",132],[".",132],["(",132],["++",132],["--",132],["**",132],["*",132],["/",132],["%",132],["+",132],["-",132],["<<",132],[">>",132],[">>>",132],["<",132],[">",132],["<=",132],[">=",132],["τinstanceof",132],["τin",132],["==",132],["!=",132],["===",132],["!==",132],["&",132],["^",132],["|",132],["&&",132],["||",132],["?",132],["=",132],["*=",132],["/=",132],["%=",132],["+=",132],["-=",132],["<<=",132],[">>=",132],[">>>=",132],["&=",132],["^=",132],["|=",132],["**=",132],[",",132],["]",132],[")",132],[":",132],["τof",132],["{",132],["}",132],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["]",133],[",",134],["τdelete",3],["τvoid",4],["τtypeof",5],["+",6],["-",7],["~",8],["!",9],["++",10],["--",11],["τnew",12],["τthis",13],["θid",14],["τtrue",15],["τfalse",16],["τnull",17],["θstr",18],["θnum",19],["[",20],["{",108],["τfunction",39],["τclass",38],["(",21],["τsuper",22],["τawait",23],["...",135],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[")",136],["...",137],["τdelete",3],["τvoid",4],["τtypeof",5],["+",6],["-",7],["~",8],["!",9],["++",10],["--",11],["τnew",12],["τthis",13],["θid",14],["τtrue",15],["τfalse",16],["τnull",17],["θstr",18],["θnum",19],["[",20],["{",108],["τfunction",39],["τclass",38],["(",21],["τsuper",22],["τawait",23],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[".",138],["[",139],["(",112],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[".",140],["[",140],[";",140],["(",140],["++",140],["--",140],["**",140],["*",140],["/",140],["%",140],["+",140],["-",140],["<<",140],[">>",140],[">>>",140],["<",140],[">",140],["<=",140],[">=",140],["τinstanceof",140],["τin",140],["==",140],["!=",140],["===",140],["!==",140],["&",140],["^",140],["|",140],["&&",140],["||",140],["?",140],["=",140],["*=",140],["/=",140],["%=",140],["+=",140],["-=",140],["<<=",140],[">>=",140],[">>>=",140],["&=",140],["^=",140],["|=",140],["**=",140],[",",140],["]",140],[")",140],[":",140],["τof",140],["{",140],["}",140],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",141],[".",141],["(",141],["[",141],["++",141],["--",141],["**",141],["*",141],["/",141],["%",141],["+",141],["-",141],["<<",141],[">>",141],[">>>",141],["<",141],[">",141],["<=",141],[">=",141],["τinstanceof",141],["τin",141],["==",141],["!=",141],["===",141],["!==",141],["&",141],["^",141],["|",141],["&&",141],["||",141],["?",141],["=",141],["*=",141],["/=",141],["%=",141],["+=",141],["-=",141],["<<=",141],[">>=",141],[">>>=",141],["&=",141],["^=",141],["|=",141],["**=",141],[",",141],["]",141],[")",141],[":",141],["τof",141],["{",141],["}",141],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["=>",142],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["=>",122],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[":",143],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["θid",14],["{",144],["[",145],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["$",146],["{",146],["τthis",146],["θid",146],["τtrue",146],["τfalse",146],["τnull",146],["θstr",146],["θnum",146],["[",146],["τfunction",146],["τclass",146],["(",146],["τsuper",146],["τnew",146],["++",146],["--",146],["τdelete",146],["τvoid",146],["τtypeof",146],["+",146],["-",146],["~",146],["τawait",146],["τvar",146],[";",146],["τif",146],["τdo",146],["τwhile",146],["τfor",146],["τswitch",146],["τcontinue",146],["τbreak",146],["τreturn",146],["τwith",146],["τthrow",146],["τtry",146],["τdebugger",146],["τlet",146],["τconst",146],["}",146],["τelse",146],["τcase",146],["τdefault",146],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["(",147],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["$",148],["{",148],["τthis",148],["θid",148],["τtrue",148],["τfalse",148],["τnull",148],["θstr",148],["θnum",148],["[",148],["τfunction",148],["τclass",148],["(",148],["τsuper",148],["τnew",148],["++",148],["--",148],["τdelete",148],["τvoid",148],["τtypeof",148],["+",148],["-",148],["~",148],["τawait",148],["τvar",148],[";",148],["τif",148],["τdo",148],["τwhile",148],["τfor",148],["τswitch",148],["τcontinue",148],["τbreak",148],["τreturn",148],["τwith",148],["τthrow",148],["τtry",148],["τdebugger",148],["τlet",148],["τconst",148],["}",148],["τelse",148],["τcase",148],["τdefault",148],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["{",2],["τdelete",3],["τvoid",4],["τtypeof",5],["+",6],["-",7],["~",8],["!",9],["++",10],["--",11],["τnew",12],["τthis",13],["θid",14],["τtrue",15],["τfalse",16],["τnull",17],["θstr",18],["θnum",19],["[",20],["(",21],["τsuper",22],["τawait",23],["τvar",24],[";",25],["τif",26],["τdo",27],["τwhile",28],["τfor",29],["τswitch",30],["τcontinue",31],["τbreak",32],["τreturn",33],["τwith",34],["τthrow",35],["τtry",36],["τdebugger",37],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["(",149],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["(",150],["τawait",151],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["(",152],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",153],["θid",14],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",154],["θid",14],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",155],["τdelete",3],["τvoid",4],["τtypeof",5],["+",6],["-",7],["~",8],["!",9],["++",10],["--",11],["τnew",12],["τthis",13],["θid",14],["τtrue",15],["τfalse",16],["τnull",17],["θstr",18],["θnum",19],["[",20],["{",108],["τfunction",39],["τclass",38],["(",21],["τsuper",22],["τawait",23],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["(",156],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["{",2],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",157],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["$",158],["{",158],["τthis",158],["θid",158],["τtrue",158],["τfalse",158],["τnull",158],["θstr",158],["θnum",158],["[",158],["τfunction",158],["τclass",158],["(",158],["τsuper",158],["τnew",158],["++",158],["--",158],["τdelete",158],["τvoid",158],["τtypeof",158],["+",158],["-",158],["~",158],["τawait",158],["τvar",158],[";",158],["τif",158],["τdo",158],["τwhile",158],["τfor",158],["τswitch",158],["τcontinue",158],["τbreak",158],["τreturn",158],["τwith",158],["τthrow",158],["τtry",158],["τdebugger",158],["τlet",158],["τconst",158],["}",158],["τcase",158],["τdefault",158],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["θid",14],["{",159],["τextends",160],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["$",161],["{",161],["τthis",161],["θid",161],["τtrue",161],["τfalse",161],["τnull",161],["θstr",161],["θnum",161],["[",161],["τfunction",161],["τclass",161],["(",161],["τsuper",161],["τnew",161],["++",161],["--",161],["τdelete",161],["τvoid",161],["τtypeof",161],["+",161],["-",161],["~",161],["τawait",161],["τvar",161],[";",161],["τif",161],["τdo",161],["τwhile",161],["τfor",161],["τswitch",161],["τcontinue",161],["τbreak",161],["τreturn",161],["τwith",161],["τthrow",161],["τtry",161],["τdebugger",161],["τlet",161],["τconst",161],["}",161],["τcase",161],["τdefault",161],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["(",162],["θid",14],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["θid",163],["{",163],["[",163],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["θid",164],["{",164],["[",164],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["$",165],["{",165],["τthis",165],["θid",165],["τtrue",165],["τfalse",165],["τnull",165],["θstr",165],["θnum",165],["[",165],["τfunction",165],["τclass",165],["(",165],["τsuper",165],["τnew",165],["++",165],["--",165],["τdelete",165],["τvoid",165],["τtypeof",165],["+",165],["-",165],["~",165],["τawait",165],["τvar",165],[";",165],["τif",165],["τdo",165],["τwhile",165],["τfor",165],["τswitch",165],["τcontinue",165],["τbreak",165],["τreturn",165],["τwith",165],["τthrow",165],["τtry",165],["τdebugger",165],["τlet",165],["τconst",165],["}",165],["τcase",165],["τdefault",165],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["}",166],["{",2],["τdelete",3],["τvoid",4],["τtypeof",5],["+",6],["-",7],["~",8],["!",9],["++",10],["--",11],["τnew",12],["τthis",13],["θid",14],["τtrue",15],["τfalse",16],["τnull",17],["θstr",18],["θnum",19],["[",20],["(",21],["τsuper",22],["τawait",23],["τvar",24],[";",25],["τif",26],["τdo",27],["τwhile",28],["τfor",29],["τswitch",30],["τcontinue",31],["τbreak",32],["τreturn",33],["τwith",34],["τthrow",35],["τtry",36],["τdebugger",37],["τclass",38],["τfunction",39],["τlet",40],["τconst",41],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["$",167],["{",167],["τthis",167],["θid",167],["τtrue",167],["τfalse",167],["τnull",167],["θstr",167],["θnum",167],["[",167],["τfunction",167],["τclass",167],["(",167],["τsuper",167],["τnew",167],["++",167],["--",167],["τdelete",167],["τvoid",167],["τtypeof",167],["+",167],["-",167],["~",167],["τawait",167],["τvar",167],[";",167],["τif",167],["τdo",167],["τwhile",167],["τfor",167],["τswitch",167],["τcontinue",167],["τbreak",167],["τreturn",167],["τwith",167],["τthrow",167],["τtry",167],["τdebugger",167],["τlet",167],["τconst",167],["}",167],["τelse",167],["τcase",167],["τdefault",167],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",168],["**",168],["*",168],["/",168],["%",168],["+",168],["-",168],["<<",168],[">>",168],[">>>",168],["<",168],[">",168],["<=",168],[">=",168],["τinstanceof",168],["τin",168],["==",168],["!=",168],["===",168],["!==",168],["&",168],["^",168],["|",168],["&&",168],["||",168],["?",168],[",",168],["]",168],[")",168],[":",168],["}",168],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",169],["**",169],["*",169],["/",169],["%",169],["+",169],["-",169],["<<",169],[">>",169],[">>>",169],["<",169],[">",169],["<=",169],[">=",169],["τinstanceof",169],["τin",169],["==",169],["!=",169],["===",169],["!==",169],["&",169],["^",169],["|",169],["&&",169],["||",169],["?",169],[",",169],["]",169],[")",169],[":",169],["}",169],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["τthis",170],["θid",170],["τtrue",170],["τfalse",170],["τnull",170],["θstr",170],["θnum",170],["[",170],["{",170],["τfunction",170],["τclass",170],["(",170],["τsuper",170],["τnew",170],["++",170],["--",170],["τdelete",170],["τvoid",170],["τtypeof",170],["+",170],["-",170],["~",170],["τawait",170],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",171],["*",171],["/",171],["%",171],["+",171],["-",171],["<<",171],[">>",171],[">>>",171],["<",171],[">",171],["<=",171],[">=",171],["τinstanceof",171],["τin",171],["==",171],["!=",171],["===",171],["!==",171],["&",171],["^",171],["|",171],["&&",171],["||",171],["?",171],[",",171],["**",171],["]",171],[")",171],[":",171],["}",171],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",55],["++",56],["--",57],["*",55],["/",55],["%",55],["+",55],["-",55],["<<",55],[">>",55],[">>>",55],["<",55],[">",55],["<=",55],[">=",55],["τinstanceof",55],["τin",55],["==",55],["!=",55],["===",55],["!==",55],["&",55],["^",55],["|",55],["&&",55],["||",55],["?",55],[",",55],["**",55],["]",55],[")",55],[":",55],["}",55],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",172],["[",172],[".",172],["(",172],["++",172],["--",172],["*",172],["/",172],["%",172],["+",172],["-",172],["<<",172],[">>",172],[">>>",172],["<",172],[">",172],["<=",172],[">=",172],["τinstanceof",172],["τin",172],["==",172],["!=",172],["===",172],["!==",172],["&",172],["^",172],["|",172],["&&",172],["||",172],["?",172],[",",172],["**",172],["=",172],["*=",172],["/=",172],["%=",172],["+=",172],["-=",172],["<<=",172],[">>=",172],[">>>=",172],["&=",172],["^=",172],["|=",172],["**=",172],["]",172],[")",172],[":",172],["τof",172],["{",172],["}",172],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",120],["[",120],[".",120],["(",120],["++",120],["--",120],["*",120],["/",120],["%",120],["+",120],["-",120],["<<",120],[">>",120],[">>>",120],["<",120],[">",120],["<=",120],[">=",120],["τinstanceof",120],["τin",120],["==",120],["!=",120],["===",120],["!==",120],["&",120],["^",120],["|",120],["&&",120],["||",120],["?",120],[",",120],["**",120],["=",120],["*=",120],["/=",120],["%=",120],["+=",120],["-=",120],["<<=",120],[">>=",120],[">>>=",120],["&=",120],["^=",120],["|=",120],["**=",120],["]",120],[")",120],["{",120],[":",120],["τof",120],["}",120],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",123],["[",123],[".",123],["(",123],["++",123],["--",123],["*",123],["/",123],["%",123],["+",123],["-",123],["<<",123],[">>",123],[">>>",123],["<",123],[">",123],["<=",123],[">=",123],["τinstanceof",123],["τin",123],["==",123],["!=",123],["===",123],["!==",123],["&",123],["^",123],["|",123],["&&",123],["||",123],["?",123],[",",123],["**",123],["=",123],["*=",123],["/=",123],["%=",123],["+=",123],["-=",123],["<<=",123],[">>=",123],[">>>=",123],["&=",123],["^=",123],["|=",123],["**=",123],["}",123],["]",123],[")",123],["{",123],[":",123],["τof",123],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["}",173],["...",174],["θid",14],["θstr",18],["θnum",19],["[",175],["τget",176],["τset",177],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",178],["[",178],[".",178],["(",178],["++",178],["--",178],["*",178],["/",178],["%",178],["+",178],["-",178],["<<",178],[">>",178],[">>>",178],["<",178],[">",178],["<=",178],[">=",178],["τinstanceof",178],["τin",178],["==",178],["!=",178],["===",178],["!==",178],["&",178],["^",178],["|",178],["&&",178],["||",178],["?",178],[",",178],["**",178],["=",178],["*=",178],["/=",178],["%=",178],["+=",178],["-=",178],["<<=",178],[">>=",178],[">>>=",178],["&=",178],["^=",178],["|=",178],["**=",178],["]",178],[")",178],[":",178],["τof",178],["{",178],["}",178],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",179],["[",179],[".",179],["(",179],["++",179],["--",179],["*",179],["/",179],["%",179],["+",179],["-",179],["<<",179],[">>",179],[">>>",179],["<",179],[">",179],["<=",179],[">=",179],["τinstanceof",179],["τin",179],["==",179],["!=",179],["===",179],["!==",179],["&",179],["^",179],["|",179],["&&",179],["||",179],["?",179],[",",179],["**",179],["=",179],["*=",179],["/=",179],["%=",179],["+=",179],["-=",179],["<<=",179],[">>=",179],[">>>=",179],["&=",179],["^=",179],["|=",179],["**=",179],["]",179],[")",179],[":",179],["τof",179],["{",179],["}",179],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",180],["*",180],["/",180],["%",180],["+",180],["-",180],["<<",180],[">>",180],[">>>",180],["<",180],[">",180],["<=",180],[">=",180],["τinstanceof",180],["τin",180],["==",180],["!=",180],["===",180],["!==",180],["&",180],["^",180],["|",180],["&&",180],["||",180],["?",180],[",",180],["**",180],["]",180],[")",180],[":",180],["}",180],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",181],["*",181],["/",181],["%",181],["+",181],["-",181],["<<",181],[">>",181],[">>>",181],["<",181],[">",181],["<=",181],[">=",181],["τinstanceof",181],["τin",181],["==",181],["!=",181],["===",181],["!==",181],["&",181],["^",181],["|",181],["&&",181],["||",181],["?",181],[",",181],["**",181],["]",181],[")",181],[":",181],["}",181],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",182],["*",182],["/",182],["%",182],["+",182],["-",182],["<<",182],[">>",182],[">>>",182],["<",182],[">",182],["<=",182],[">=",182],["τinstanceof",182],["τin",182],["==",182],["!=",182],["===",182],["!==",182],["&",182],["^",182],["|",182],["&&",182],["||",182],["?",182],[",",182],["**",182],["]",182],[")",182],[":",182],["}",182],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",183],["*",183],["/",183],["%",183],["+",183],["-",183],["<<",183],[">>",183],[">>>",183],["<",183],[">",183],["<=",183],[">=",183],["τinstanceof",183],["τin",183],["==",183],["!=",183],["===",183],["!==",183],["&",183],["^",183],["|",183],["&&",183],["||",183],["?",183],[",",183],["**",183],["]",183],[")",183],[":",183],["}",183],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",184],["*",184],["/",184],["%",184],["+",184],["-",184],["<<",184],[">>",184],[">>>",184],["<",184],[">",184],["<=",184],[">=",184],["τinstanceof",184],["τin",184],["==",184],["!=",184],["===",184],["!==",184],["&",184],["^",184],["|",184],["&&",184],["||",184],["?",184],[",",184],["**",184],["]",184],[")",184],[":",184],["}",184],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",185],["*",185],["/",185],["%",185],["+",185],["-",185],["<<",185],[">>",185],[">>>",185],["<",185],[">",185],["<=",185],[">=",185],["τinstanceof",185],["τin",185],["==",185],["!=",185],["===",185],["!==",185],["&",185],["^",185],["|",185],["&&",185],["||",185],["?",185],[",",185],["**",185],["]",185],[")",185],[":",185],["}",185],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",186],["**",186],["*",186],["/",186],["%",186],["+",186],["-",186],["<<",186],[">>",186],[">>>",186],["<",186],[">",186],["<=",186],[">=",186],["τinstanceof",186],["τin",186],["==",186],["!=",186],["===",186],["!==",186],["&",186],["^",186],["|",186],["&&",186],["||",186],["?",186],[",",186],["]",186],[")",186],[":",186],["}",186],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",187],["**",187],["*",187],["/",187],["%",187],["+",187],["-",187],["<<",187],[">>",187],[">>>",187],["<",187],[">",187],["<=",187],[">=",187],["τinstanceof",187],["τin",187],["==",187],["!=",187],["===",187],["!==",187],["&",187],["^",187],["|",187],["&&",187],["||",187],["?",187],[",",187],["]",187],[")",187],[":",187],["}",187],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["θid",14],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",188],[".",188],["(",188],["[",188],["++",188],["--",188],["**",188],["*",188],["/",188],["%",188],["+",188],["-",188],["<<",188],[">>",188],[">>>",188],["<",188],[">",188],["<=",188],[">=",188],["τinstanceof",188],["τin",188],["==",188],["!=",188],["===",188],["!==",188],["&",188],["^",188],["|",188],["&&",188],["||",188],["?",188],["=",188],["*=",188],["/=",188],["%=",188],["+=",188],["-=",188],["<<=",188],[">>=",188],[">>>=",188],["&=",188],["^=",188],["|=",188],["**=",188],[",",188],["]",188],[")",188],[":",188],["τof",188],["{",188],["}",188],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[")",189],["...",190],["τdelete",3],["τvoid",4],["τtypeof",5],["+",6],["-",7],["~",8],["!",9],["++",10],["--",11],["τnew",12],["τthis",13],["θid",14],["τtrue",15],["τfalse",16],["τnull",17],["θstr",18],["θnum",19],["[",20],["{",108],["τfunction",39],["τclass",38],["(",21],["τsuper",22],["τawait",23],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["[",191],["(",191],[".",191],[";",191],["++",191],["--",191],["**",191],["*",191],["/",191],["%",191],["+",191],["-",191],["<<",191],[">>",191],[">>>",191],["<",191],[">",191],["<=",191],[">=",191],["τinstanceof",191],["τin",191],["==",191],["!=",191],["===",191],["!==",191],["&",191],["^",191],["|",191],["&&",191],["||",191],["?",191],["=",191],["*=",191],["/=",191],["%=",191],["+=",191],["-=",191],["<<=",191],[">>=",191],[">>>=",191],["&=",191],["^=",191],["|=",191],["**=",191],[",",191],["]",191],[")",191],[":",191],["τof",191],["{",191],["}",191],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",192],["++",192],["--",192],["**",192],["*",192],["/",192],["%",192],["+",192],["-",192],["<<",192],[">>",192],[">>>",192],["<",192],[">",192],["<=",192],[">=",192],["τinstanceof",192],["τin",192],["==",192],["!=",192],["===",192],["!==",192],["&",192],["^",192],["|",192],["&&",192],["||",192],["?",192],["=",192],["*=",192],["/=",192],["%=",192],["+=",192],["-=",192],["<<=",192],[">>=",192],[">>>=",192],["&=",192],["^=",192],["|=",192],["**=",192],[",",192],["]",192],[")",192],[":",192],["τof",192],["{",192],["}",192],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["τtarget",193],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[".",138],["[",139],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",194],["[",194],[".",194],["(",194],["++",194],["--",194],["**",194],["*",194],["/",194],["%",194],["+",194],["-",194],["<<",194],[">>",194],[">>>",194],["<",194],[">",194],["<=",194],[">=",194],["τinstanceof",194],["τin",194],["==",194],["!=",194],["===",194],["!==",194],["&",194],["^",194],["|",194],["&&",194],["||",194],["?",194],["=",194],["*=",194],["/=",194],["%=",194],["+=",194],["-=",194],["<<=",194],[">>=",194],[">>>=",194],["&=",194],["^=",194],["|=",194],["**=",194],[",",194],["]",194],[")",194],[":",194],["τof",194],["{",194],["}",194],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["]",195],[",",196],["τdelete",3],["τvoid",4],["τtypeof",5],["+",6],["-",7],["~",8],["!",9],["++",10],["--",11],["τnew",12],["τthis",13],["θid",14],["τtrue",15],["τfalse",16],["τnull",17],["θstr",18],["θnum",19],["[",20],["{",108],["τfunction",39],["τclass",38],["(",21],["τsuper",22],["τawait",23],["...",135],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["]",197],[",",198],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["]",199],[",",199],["τthis",199],["θid",199],["τtrue",199],["τfalse",199],["τnull",199],["θstr",199],["θnum",199],["[",199],["{",199],["τfunction",199],["τclass",199],["(",199],["τsuper",199],["τnew",199],["++",199],["--",199],["τdelete",199],["τvoid",199],["τtypeof",199],["+",199],["-",199],["~",199],["τawait",199],["...",199],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["]",200],[",",200],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["]",123],["[",123],[".",123],["(",123],["++",123],["--",123],["**",123],["*",123],["/",123],["%",123],["+",123],["-",123],["<<",123],[">>",123],[">>>",123],["<",123],[">",123],["<=",123],[">=",123],["τinstanceof",123],["τin",123],["==",123],["!=",123],["===",123],["!==",123],["&",123],["^",123],["|",123],["&&",123],["||",123],["?",123],["=>",124],["=",123],["*=",123],["/=",123],["%=",123],["+=",123],["-=",123],["<<=",123],[">>=",123],[">>>=",123],["&=",123],["^=",123],["|=",123],["**=",123],[",",123],[")",123],[";",123],[":",123],["τof",123],["}",123],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",201],["[",201],[".",201],["(",201],["++",201],["--",201],["**",201],["*",201],["/",201],["%",201],["+",201],["-",201],["<<",201],[">>",201],[">>>",201],["<",201],[">",201],["<=",201],[">=",201],["τinstanceof",201],["τin",201],["==",201],["!=",201],["===",201],["!==",201],["&",201],["^",201],["|",201],["&&",201],["||",201],["?",201],["=>",201],["=",201],["*=",201],["/=",201],["%=",201],["+=",201],["-=",201],["<<=",201],[">>=",201],[">>>=",201],["&=",201],["^=",201],["|=",201],["**=",201],[",",201],["]",201],[")",201],[":",201],["τof",201],["{",201],["}",201],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[")",202],[",",203],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[".",204],["(",204],["[",204],[";",204],["++",204],["--",204],["**",204],["*",204],["/",204],["%",204],["+",204],["-",204],["<<",204],[">>",204],[">>>",204],["<",204],[">",204],["<=",204],[">=",204],["τinstanceof",204],["τin",204],["==",204],["!=",204],["===",204],["!==",204],["&",204],["^",204],["|",204],["&&",204],["||",204],["?",204],["=",204],["*=",204],["/=",204],["%=",204],["+=",204],["-=",204],["<<=",204],[">>=",204],[">>>=",204],["&=",204],["^=",204],["|=",204],["**=",204],[",",204],["]",204],[")",204],[":",204],["τof",204],["{",204],["}",204],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",205],["*",205],["/",205],["%",205],["+",205],["-",205],["<<",205],[">>",205],[">>>",205],["<",205],[">",205],["<=",205],[">=",205],["τinstanceof",205],["τin",205],["==",205],["!=",205],["===",205],["!==",205],["&",205],["^",205],["|",205],["&&",205],["||",205],["?",205],[",",205],["**",205],["]",205],[")",205],[":",205],["}",205],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["{",206],["τdelete",3],["τvoid",4],["τtypeof",5],["+",6],["-",7],["~",8],["!",9],["++",10],["--",11],["τnew",12],["τthis",13],["θid",14],["τtrue",15],["τfalse",16],["τnull",17],["θstr",18],["θnum",19],["[",20],["τfunction",39],["τclass",38],["(",21],["τsuper",22],["τawait",23],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["$",207],["{",207],["τthis",207],["θid",207],["τtrue",207],["τfalse",207],["τnull",207],["θstr",207],["θnum",207],["[",207],["τfunction",207],["τclass",207],["(",207],["τsuper",207],["τnew",207],["++",207],["--",207],["τdelete",207],["τvoid",207],["τtypeof",207],["+",207],["-",207],["~",207],["τawait",207],["τvar",207],[";",207],["τif",207],["τdo",207],["τwhile",207],["τfor",207],["τswitch",207],["τcontinue",207],["τbreak",207],["τreturn",207],["τwith",207],["τthrow",207],["τtry",207],["τdebugger",207],["τlet",207],["τconst",207],["}",207],["τelse",207],["τcase",207],["τdefault",207],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["{",2],["τdelete",3],["τvoid",4],["τtypeof",5],["+",6],["-",7],["~",8],["!",9],["++",10],["--",11],["τnew",12],["τthis",13],["θid",14],["τtrue",15],["τfalse",16],["τnull",17],["θstr",18],["θnum",19],["[",20],["(",21],["τsuper",22],["τawait",23],["τvar",24],[";",25],["τif",26],["τdo",27],["τwhile",28],["τfor",29],["τswitch",30],["τcontinue",31],["τbreak",32],["τreturn",33],["τwith",34],["τthrow",35],["τtry",36],["τdebugger",37],["τfunction",39],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",208],[",",209],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",210],[",",210],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",211],[",",211],["=",212],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["=",212],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["=",124],[";",124],[",",124],["τextends",124],["{",124],["(",124],[")",124],["}",124],["]",124],["τin",124],["τof",124],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["=",213],[")",213],["]",213],[",",213],["τin",213],["τof",213],["}",213],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["}",214],["...",215],["θid",14],["θstr",18],["θnum",19],["[",175],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["]",216],[",",134],["...",217],["θid",14],["{",144],["[",145],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["τwhile",218],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",219],["τvar",220],["τdelete",3],["τvoid",4],["τtypeof",5],["+",6],["-",7],["~",8],["!",9],["++",10],["--",11],["τnew",12],["τthis",13],["θid",14],["τtrue",15],["τfalse",16],["τnull",17],["θstr",18],["θnum",19],["[",20],["{",108],["τfunction",39],["τclass",38],["(",21],["τsuper",22],["τawait",23],["τlet",40],["τconst",41],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["(",221],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["$",222],["{",222],["τthis",222],["θid",222],["τtrue",222],["τfalse",222],["τnull",222],["θstr",222],["θnum",222],["[",222],["τfunction",222],["τclass",222],["(",222],["τsuper",222],["τnew",222],["++",222],["--",222],["τdelete",222],["τvoid",222],["τtypeof",222],["+",222],["-",222],["~",222],["τawait",222],["τvar",222],[";",222],["τif",222],["τdo",222],["τwhile",222],["τfor",222],["τswitch",222],["τcontinue",222],["τbreak",222],["τreturn",222],["τwith",222],["τthrow",222],["τtry",222],["τdebugger",222],["τlet",222],["τconst",222],["}",222],["τelse",222],["τcase",222],["τdefault",222],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",223],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",125],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["$",224],["{",224],["τthis",224],["θid",224],["τtrue",224],["τfalse",224],["τnull",224],["θstr",224],["θnum",224],["[",224],["τfunction",224],["τclass",224],["(",224],["τsuper",224],["τnew",224],["++",224],["--",224],["τdelete",224],["τvoid",224],["τtypeof",224],["+",224],["-",224],["~",224],["τawait",224],["τvar",224],[";",224],["τif",224],["τdo",224],["τwhile",224],["τfor",224],["τswitch",224],["τcontinue",224],["τbreak",224],["τreturn",224],["τwith",224],["τthrow",224],["τtry",224],["τdebugger",224],["τlet",224],["τconst",224],["}",224],["τelse",224],["τcase",224],["τdefault",224],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",225],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["$",226],["{",226],["τthis",226],["θid",226],["τtrue",226],["τfalse",226],["τnull",226],["θstr",226],["θnum",226],["[",226],["τfunction",226],["τclass",226],["(",226],["τsuper",226],["τnew",226],["++",226],["--",226],["τdelete",226],["τvoid",226],["τtypeof",226],["+",226],["-",226],["~",226],["τawait",226],["τvar",226],[";",226],["τif",226],["τdo",226],["τwhile",226],["τfor",226],["τswitch",226],["τcontinue",226],["τbreak",226],["τreturn",226],["τwith",226],["τthrow",226],["τtry",226],["τdebugger",226],["τlet",226],["τconst",226],["}",226],["τelse",226],["τcase",226],["τdefault",226],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",227],[",",51],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",228],[",",51],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["τcatch",229],["τfinally",230],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["$",231],["{",231],["τthis",231],["θid",231],["τtrue",231],["τfalse",231],["τnull",231],["θstr",231],["θnum",231],["[",231],["τfunction",231],["τclass",231],["(",231],["τsuper",231],["τnew",231],["++",231],["--",231],["τdelete",231],["τvoid",231],["τtypeof",231],["+",231],["-",231],["~",231],["τawait",231],["τvar",231],[";",231],["τif",231],["τdo",231],["τwhile",231],["τfor",231],["τswitch",231],["τcontinue",231],["τbreak",231],["τreturn",231],["τwith",231],["τthrow",231],["τtry",231],["τdebugger",231],["τlet",231],["τconst",231],["}",231],["τelse",231],["τcase",231],["τdefault",231],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["{",159],["τextends",160],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["$",232],["{",232],["τthis",232],["θid",232],["τtrue",232],["τfalse",232],["τnull",232],["θstr",232],["θnum",232],["τfunction",232],["τclass",232],["τsuper",232],["τnew",232],["τdelete",232],["τvoid",232],["τtypeof",232],["~",232],["τawait",232],["τvar",232],["τif",232],["τdo",232],["τwhile",232],["τfor",232],["τswitch",232],["τcontinue",232],["τbreak",232],["τreturn",232],["τwith",232],["τthrow",232],["τtry",232],["τdebugger",232],["τlet",232],["τconst",232],["}",232],[";",232],["[",232],[".",232],["(",232],["++",232],["--",232],["*",232],["/",232],["%",232],["+",232],["-",232],["<<",232],[">>",232],[">>>",232],["<",232],[">",232],["<=",232],[">=",232],["τinstanceof",232],["τin",232],["==",232],["!=",232],["===",232],["!==",232],["&",232],["^",232],["|",232],["&&",232],["||",232],["?",232],[",",232],["**",232],["=",232],["*=",232],["/=",232],["%=",232],["+=",232],["-=",232],["<<=",232],[">>=",232],[">>>=",232],["&=",232],["^=",232],["|=",232],["**=",232],["]",232],[")",232],[":",232],["τof",232],["τcase",232],["τdefault",232],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["{",233],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["}",234],["τstatic",235],[";",236],["τget",176],["τset",177],["θid",14],["θstr",18],["θnum",19],["[",175],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["τnew",12],["τthis",13],["θid",14],["τtrue",15],["τfalse",16],["τnull",17],["θstr",18],["θnum",19],["[",20],["{",108],["τfunction",39],["τclass",38],["(",21],["τsuper",22],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[")",237],["...",217],["θid",14],["{",144],["[",145],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["(",238],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",239],[",",240],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",241],[",",241],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["$",242],["{",242],["τthis",242],["θid",242],["τtrue",242],["τfalse",242],["τnull",242],["θstr",242],["θnum",242],["[",242],["τfunction",242],["τclass",242],["(",242],["τsuper",242],["τnew",242],["++",242],["--",242],["τdelete",242],["τvoid",242],["τtypeof",242],["+",242],["-",242],["~",242],["τawait",242],["τvar",242],[";",242],["τif",242],["τdo",242],["τwhile",242],["τfor",242],["τswitch",242],["τcontinue",242],["τbreak",242],["τreturn",242],["τwith",242],["τthrow",242],["τtry",242],["τdebugger",242],["τlet",242],["τconst",242],["}",242],["τcatch",242],["τfinally",242],["τelse",242],["τcase",242],["τdefault",242],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",243],[",",243],[")",243],["]",243],[":",243],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",244],[",",244],["]",244],[")",244],[":",244],["}",244],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[":",245],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",246],["||",246],["?",246],[",",246],["&&",74],["]",246],[")",246],[":",246],["}",246],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",247],["&&",247],["||",247],["?",247],[",",247],["|",76],["]",247],[")",247],[":",247],["}",247],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",248],["|",248],["&&",248],["||",248],["?",248],[",",248],["^",78],["]",248],[")",248],[":",248],["}",248],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",249],["^",249],["|",249],["&&",249],["||",249],["?",249],[",",249],["&",80],["]",249],[")",249],[":",249],["}",249],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",250],["&",250],["^",250],["|",250],["&&",250],["||",250],["?",250],[",",250],["==",82],["!=",83],["===",84],["!==",85],["]",250],[")",250],[":",250],["}",250],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",251],["==",251],["!=",251],["===",251],["!==",251],["&",251],["^",251],["|",251],["&&",251],["||",251],["?",251],[",",251],["<",87],[">",88],["<=",89],[">=",90],["τinstanceof",91],["τin",92],["]",251],[")",251],[":",251],["}",251],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",252],["==",252],["!=",252],["===",252],["!==",252],["&",252],["^",252],["|",252],["&&",252],["||",252],["?",252],[",",252],["<",87],[">",88],["<=",89],[">=",90],["τinstanceof",91],["τin",92],["]",252],[")",252],[":",252],["}",252],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",253],["==",253],["!=",253],["===",253],["!==",253],["&",253],["^",253],["|",253],["&&",253],["||",253],["?",253],[",",253],["<",87],[">",88],["<=",89],[">=",90],["τinstanceof",91],["τin",92],["]",253],[")",253],[":",253],["}",253],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",254],["==",254],["!=",254],["===",254],["!==",254],["&",254],["^",254],["|",254],["&&",254],["||",254],["?",254],[",",254],["<",87],[">",88],["<=",89],[">=",90],["τinstanceof",91],["τin",92],["]",254],[")",254],[":",254],["}",254],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",255],["<",255],[">",255],["<=",255],[">=",255],["τinstanceof",255],["τin",255],["==",255],["!=",255],["===",255],["!==",255],["&",255],["^",255],["|",255],["&&",255],["||",255],["?",255],[",",255],["<<",94],[">>",95],[">>>",96],["]",255],[")",255],[":",255],["}",255],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",256],["<",256],[">",256],["<=",256],[">=",256],["τinstanceof",256],["τin",256],["==",256],["!=",256],["===",256],["!==",256],["&",256],["^",256],["|",256],["&&",256],["||",256],["?",256],[",",256],["<<",94],[">>",95],[">>>",96],["]",256],[")",256],[":",256],["}",256],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",257],["<",257],[">",257],["<=",257],[">=",257],["τinstanceof",257],["τin",257],["==",257],["!=",257],["===",257],["!==",257],["&",257],["^",257],["|",257],["&&",257],["||",257],["?",257],[",",257],["<<",94],[">>",95],[">>>",96],["]",257],[")",257],[":",257],["}",257],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",258],["<",258],[">",258],["<=",258],[">=",258],["τinstanceof",258],["τin",258],["==",258],["!=",258],["===",258],["!==",258],["&",258],["^",258],["|",258],["&&",258],["||",258],["?",258],[",",258],["<<",94],[">>",95],[">>>",96],["]",258],[")",258],[":",258],["}",258],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",259],["<",259],[">",259],["<=",259],[">=",259],["τinstanceof",259],["τin",259],["==",259],["!=",259],["===",259],["!==",259],["&",259],["^",259],["|",259],["&&",259],["||",259],["?",259],[",",259],["<<",94],[">>",95],[">>>",96],["]",259],[")",259],[":",259],["}",259],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",260],["<",260],[">",260],["<=",260],[">=",260],["τinstanceof",260],["τin",260],["==",260],["!=",260],["===",260],["!==",260],["&",260],["^",260],["|",260],["&&",260],["||",260],["?",260],[",",260],["<<",94],[">>",95],[">>>",96],["]",260],[")",260],[":",260],["}",260],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",261],["<<",261],[">>",261],[">>>",261],["<",261],[">",261],["<=",261],[">=",261],["τinstanceof",261],["τin",261],["==",261],["!=",261],["===",261],["!==",261],["&",261],["^",261],["|",261],["&&",261],["||",261],["?",261],[",",261],["+",98],["-",99],["]",261],[")",261],[":",261],["}",261],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",262],["<<",262],[">>",262],[">>>",262],["<",262],[">",262],["<=",262],[">=",262],["τinstanceof",262],["τin",262],["==",262],["!=",262],["===",262],["!==",262],["&",262],["^",262],["|",262],["&&",262],["||",262],["?",262],[",",262],["+",98],["-",99],["]",262],[")",262],[":",262],["}",262],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",263],["<<",263],[">>",263],[">>>",263],["<",263],[">",263],["<=",263],[">=",263],["τinstanceof",263],["τin",263],["==",263],["!=",263],["===",263],["!==",263],["&",263],["^",263],["|",263],["&&",263],["||",263],["?",263],[",",263],["+",98],["-",99],["]",263],[")",263],[":",263],["}",263],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",264],["+",264],["-",264],["<<",264],[">>",264],[">>>",264],["<",264],[">",264],["<=",264],[">=",264],["τinstanceof",264],["τin",264],["==",264],["!=",264],["===",264],["!==",264],["&",264],["^",264],["|",264],["&&",264],["||",264],["?",264],[",",264],["*",101],["/",102],["%",103],["]",264],[")",264],[":",264],["}",264],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",265],["+",265],["-",265],["<<",265],[">>",265],[">>>",265],["<",265],[">",265],["<=",265],[">=",265],["τinstanceof",265],["τin",265],["==",265],["!=",265],["===",265],["!==",265],["&",265],["^",265],["|",265],["&&",265],["||",265],["?",265],[",",265],["*",101],["/",102],["%",103],["]",265],[")",265],[":",265],["}",265],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",266],["*",266],["/",266],["%",266],["+",266],["-",266],["<<",266],[">>",266],[">>>",266],["<",266],[">",266],["<=",266],[">=",266],["τinstanceof",266],["τin",266],["==",266],["!=",266],["===",266],["!==",266],["&",266],["^",266],["|",266],["&&",266],["||",266],["?",266],[",",266],["]",266],[")",266],[":",266],["}",266],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",267],["*",267],["/",267],["%",267],["+",267],["-",267],["<<",267],[">>",267],[">>>",267],["<",267],[">",267],["<=",267],[">=",267],["τinstanceof",267],["τin",267],["==",267],["!=",267],["===",267],["!==",267],["&",267],["^",267],["|",267],["&&",267],["||",267],["?",267],[",",267],["]",267],[")",267],[":",267],["}",267],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",268],["*",268],["/",268],["%",268],["+",268],["-",268],["<<",268],[">>",268],[">>>",268],["<",268],[">",268],["<=",268],[">=",268],["τinstanceof",268],["τin",268],["==",268],["!=",268],["===",268],["!==",268],["&",268],["^",268],["|",268],["&&",268],["||",268],["?",268],[",",268],["]",268],[")",268],[":",268],["}",268],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",269],["*",269],["/",269],["%",269],["+",269],["-",269],["<<",269],[">>",269],[">>>",269],["<",269],[">",269],["<=",269],[">=",269],["τinstanceof",269],["τin",269],["==",269],["!=",269],["===",269],["!==",269],["&",269],["^",269],["|",269],["&&",269],["||",269],["?",269],[",",269],["]",269],[")",269],[":",269],["}",269],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",270],["[",270],[".",270],["(",270],["++",270],["--",270],["*",270],["/",270],["%",270],["+",270],["-",270],["<<",270],[">>",270],[">>>",270],["<",270],[">",270],["<=",270],[">=",270],["τinstanceof",270],["τin",270],["==",270],["!=",270],["===",270],["!==",270],["&",270],["^",270],["|",270],["&&",270],["||",270],["?",270],[",",270],["**",270],["=",270],["*=",270],["/=",270],["%=",270],["+=",270],["-=",270],["<<=",270],[">>=",270],[">>>=",270],["&=",270],["^=",270],["|=",270],["**=",270],["]",270],[")",270],[":",270],["τof",270],["{",270],["}",270],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["}",271],[",",272],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["}",273],[",",273],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["}",274],[",",274],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["}",275],[",",275],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["}",274],[",",274],["=",212],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["(",276],[":",277],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[":",278],["(",278],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[":",279],["=",126],["}",126],["(",279],[",",126],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[":",279],["(",279],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["θid",14],["θstr",18],["θnum",19],["[",175],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",280],[".",280],["(",280],["[",280],["++",280],["--",280],["**",280],["*",280],["/",280],["%",280],["+",280],["-",280],["<<",280],[">>",280],[">>>",280],["<",280],[">",280],["<=",280],[">=",280],["τinstanceof",280],["τin",280],["==",280],["!=",280],["===",280],["!==",280],["&",280],["^",280],["|",280],["&&",280],["||",280],["?",280],["=",280],["*=",280],["/=",280],["%=",280],["+=",280],["-=",280],["<<=",280],[">>=",280],[">>>=",280],["&=",280],["^=",280],["|=",280],["**=",280],[",",280],["]",280],[")",280],[":",280],["τof",280],["{",280],["}",280],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["]",281],[",",51],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",282],[".",282],["(",282],["[",282],["++",282],["--",282],["**",282],["*",282],["/",282],["%",282],["+",282],["-",282],["<<",282],[">>",282],[">>>",282],["<",282],[">",282],["<=",282],[">=",282],["τinstanceof",282],["τin",282],["==",282],["!=",282],["===",282],["!==",282],["&",282],["^",282],["|",282],["&&",282],["||",282],["?",282],["=",282],["*=",282],["/=",282],["%=",282],["+=",282],["-=",282],["<<=",282],[">>=",282],[">>>=",282],["&=",282],["^=",282],["|=",282],["**=",282],[",",282],["]",282],[")",282],[":",282],["τof",282],["{",282],["}",282],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[")",283],[",",284],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[")",285],[",",285],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["]",286],[",",51],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",287],["[",287],[".",287],["(",287],["++",287],["--",287],["**",287],["*",287],["/",287],["%",287],["+",287],["-",287],["<<",287],[">>",287],[">>>",287],["<",287],[">",287],["<=",287],[">=",287],["τinstanceof",287],["τin",287],["==",287],["!=",287],["===",287],["!==",287],["&",287],["^",287],["|",287],["&&",287],["||",287],["?",287],["=",287],["*=",287],["/=",287],["%=",287],["+=",287],["-=",287],["<<=",287],[">>=",287],[">>>=",287],["&=",287],["^=",287],["|=",287],["**=",287],[",",287],["]",287],[")",287],[":",287],["τof",287],["{",287],["}",287],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",288],["[",288],[".",288],["(",288],["++",288],["--",288],["**",288],["*",288],["/",288],["%",288],["+",288],["-",288],["<<",288],[">>",288],[">>>",288],["<",288],[">",288],["<=",288],[">=",288],["τinstanceof",288],["τin",288],["==",288],["!=",288],["===",288],["!==",288],["&",288],["^",288],["|",288],["&&",288],["||",288],["?",288],["=",288],["*=",288],["/=",288],["%=",288],["+=",288],["-=",288],["<<=",288],[">>=",288],[">>>=",288],["&=",288],["^=",288],["|=",288],["**=",288],[",",288],["]",288],[")",288],[":",288],["τof",288],["{",288],["}",288],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[".",289],["[",289],[";",289],["(",289],["++",289],["--",289],["**",289],["*",289],["/",289],["%",289],["+",289],["-",289],["<<",289],[">>",289],[">>>",289],["<",289],[">",289],["<=",289],[">=",289],["τinstanceof",289],["τin",289],["==",289],["!=",289],["===",289],["!==",289],["&",289],["^",289],["|",289],["&&",289],["||",289],["?",289],["=",289],["*=",289],["/=",289],["%=",289],["+=",289],["-=",289],["<<=",289],[">>=",289],[">>>=",289],["&=",289],["^=",289],["|=",289],["**=",289],[",",289],["]",289],[")",289],[":",289],["τof",289],["{",289],["}",289],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",290],["[",290],[".",290],["(",290],["++",290],["--",290],["**",290],["*",290],["/",290],["%",290],["+",290],["-",290],["<<",290],[">>",290],[">>>",290],["<",290],[">",290],["<=",290],[">=",290],["τinstanceof",290],["τin",290],["==",290],["!=",290],["===",290],["!==",290],["&",290],["^",290],["|",290],["&&",290],["||",290],["?",290],["=",290],["*=",290],["/=",290],["%=",290],["+=",290],["-=",290],["<<=",290],[">>=",290],[">>>=",290],["&=",290],["^=",290],["|=",290],["**=",290],[",",290],["]",290],[")",290],[":",290],["τof",290],["{",290],["}",290],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["]",291],[",",291],["τthis",291],["θid",291],["τtrue",291],["τfalse",291],["τnull",291],["θstr",291],["θnum",291],["[",291],["{",291],["τfunction",291],["τclass",291],["(",291],["τsuper",291],["τnew",291],["++",291],["--",291],["τdelete",291],["τvoid",291],["τtypeof",291],["+",291],["-",291],["~",291],["τawait",291],["...",291],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["]",292],[",",292],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",293],["[",293],[".",293],["(",293],["++",293],["--",293],["**",293],["*",293],["/",293],["%",293],["+",293],["-",293],["<<",293],[">>",293],[">>>",293],["<",293],[">",293],["<=",293],[">=",293],["τinstanceof",293],["τin",293],["==",293],["!=",293],["===",293],["!==",293],["&",293],["^",293],["|",293],["&&",293],["||",293],["?",293],["=",293],["*=",293],["/=",293],["%=",293],["+=",293],["-=",293],["<<=",293],[">>=",293],[">>>=",293],["&=",293],["^=",293],["|=",293],["**=",293],[",",293],["]",293],[")",293],[":",293],["τof",293],["{",293],["}",293],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["]",294],[",",196],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["]",199],[",",134],["τdelete",3],["τvoid",4],["τtypeof",5],["+",6],["-",7],["~",8],["!",9],["++",10],["--",11],["τnew",12],["τthis",13],["θid",14],["τtrue",15],["τfalse",16],["τnull",17],["θstr",18],["θnum",19],["[",20],["{",108],["τfunction",39],["τclass",38],["(",21],["τsuper",22],["τawait",23],["...",135],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["]",295],[",",295],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",296],["[",296],[".",296],["(",296],["++",296],["--",296],["**",296],["*",296],["/",296],["%",296],["+",296],["-",296],["<<",296],[">>",296],[">>>",296],["<",296],[">",296],["<=",296],[">=",296],["τinstanceof",296],["τin",296],["==",296],["!=",296],["===",296],["!==",296],["&",296],["^",296],["|",296],["&&",296],["||",296],["?",296],["=>",296],["=",296],["*=",296],["/=",296],["%=",296],["+=",296],["-=",296],["<<=",296],[">>=",296],[">>>=",296],["&=",296],["^=",296],["|=",296],["**=",296],[",",296],["]",296],[")",296],[":",296],["τof",296],["{",296],["}",296],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[")",297],["...",298],["τdelete",3],["τvoid",4],["τtypeof",5],["+",6],["-",7],["~",8],["!",9],["++",10],["--",11],["τnew",12],["τthis",13],["θid",14],["τtrue",15],["τfalse",16],["τnull",17],["θstr",18],["θnum",19],["[",20],["{",108],["τfunction",39],["τclass",38],["(",21],["τsuper",22],["τawait",23],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[")",299],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[")",300],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[".",301],["[",301],[";",301],["(",301],["++",301],["--",301],["**",301],["*",301],["/",301],["%",301],["+",301],["-",301],["<<",301],[">>",301],[">>>",301],["<",301],[">",301],["<=",301],[">=",301],["τinstanceof",301],["τin",301],["==",301],["!=",301],["===",301],["!==",301],["&",301],["^",301],["|",301],["&&",301],["||",301],["?",301],["=",301],["*=",301],["/=",301],["%=",301],["+=",301],["-=",301],["<<=",301],[">>=",301],[">>>=",301],["&=",301],["^=",301],["|=",301],["**=",301],[",",301],["]",301],[")",301],[":",301],["τof",301],["{",301],["}",301],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["]",302],[",",51],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",303],[",",303],["]",303],[")",303],[":",303],["}",303],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",304],[",",304],["]",304],[")",304],[":",304],["}",304],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["$",305],["{",305],["τthis",305],["θid",305],["τtrue",305],["τfalse",305],["τnull",305],["θstr",305],["θnum",305],["[",305],["τfunction",305],["τclass",305],["(",305],["τsuper",305],["τnew",305],["++",305],["--",305],["τdelete",305],["τvoid",305],["τtypeof",305],["+",305],["-",305],["~",305],["τawait",305],["τvar",305],[";",305],["τif",305],["τdo",305],["τwhile",305],["τfor",305],["τswitch",305],["τcontinue",305],["τbreak",305],["τreturn",305],["τwith",305],["τthrow",305],["τtry",305],["τdebugger",305],["τlet",305],["τconst",305],["}",305],["τelse",305],["τcase",305],["τdefault",305],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["$",306],["{",306],["τthis",306],["θid",306],["τtrue",306],["τfalse",306],["τnull",306],["θstr",306],["θnum",306],["[",306],["τfunction",306],["τclass",306],["(",306],["τsuper",306],["τnew",306],["++",306],["--",306],["τdelete",306],["τvoid",306],["τtypeof",306],["+",306],["-",306],["~",306],["τawait",306],["τvar",306],[";",306],["τif",306],["τdo",306],["τwhile",306],["τfor",306],["τswitch",306],["τcontinue",306],["τbreak",306],["τreturn",306],["τwith",306],["τthrow",306],["τtry",306],["τdebugger",306],["τlet",306],["τconst",306],["}",306],["τelse",306],["τcase",306],["τdefault",306],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["$",307],["{",307],["τthis",307],["θid",307],["τtrue",307],["τfalse",307],["τnull",307],["θstr",307],["θnum",307],["[",307],["τfunction",307],["τclass",307],["(",307],["τsuper",307],["τnew",307],["++",307],["--",307],["τdelete",307],["τvoid",307],["τtypeof",307],["+",307],["-",307],["~",307],["τawait",307],["τvar",307],[";",307],["τif",307],["τdo",307],["τwhile",307],["τfor",307],["τswitch",307],["τcontinue",307],["τbreak",307],["τreturn",307],["τwith",307],["τthrow",307],["τtry",307],["τdebugger",307],["τlet",307],["τconst",307],["}",307],["τelse",307],["τcase",307],["τdefault",307],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",308],[",",308],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["=",309],[")",309],["]",309],[",",309],["τin",309],["τof",309],["}",309],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["}",310],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["}",311],[",",312],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["}",313],[",",313],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["}",314],[",",314],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[":",315],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["}",316],[",",316],["=",212],["]",316],[")",316],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["=",317],[")",317],["]",317],[",",317],["τin",317],["τof",317],["}",317],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["]",318],[",",196],["...",217],["θid",14],["{",144],["[",145],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["]",319],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["]",320],[",",321],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["]",322],[",",322],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["]",323],[",",323],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["]",324],[",",324],[")",324],["}",324],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["]",324],[",",324],["=",212],[")",324],["}",324],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[")",325],[",",51],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["(",326],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[")",327],[",",51],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",328],[",",51],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",329],["τdelete",3],["τvoid",4],["τtypeof",5],["+",6],["-",7],["~",8],["!",9],["++",10],["--",11],["τnew",12],["τthis",13],["θid",14],["τtrue",15],["τfalse",16],["τnull",17],["θstr",18],["θnum",19],["[",20],["{",108],["τfunction",39],["τclass",38],["(",21],["τsuper",22],["τawait",23],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",330],["τdelete",3],["τvoid",4],["τtypeof",5],["+",6],["-",7],["~",8],["!",9],["++",10],["--",11],["τnew",12],["τthis",13],["θid",14],["τtrue",15],["τfalse",16],["τnull",17],["θstr",18],["θnum",19],["[",20],["{",108],["τfunction",39],["τclass",38],["(",21],["τsuper",22],["τawait",23],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["τin",331],["τof",332],["=",54],[";",55],["++",56],["--",57],["**",55],["*",55],["/",55],["%",55],["+",55],["-",55],["<<",55],[">>",55],[">>>",55],["<",55],[">",55],["<=",55],[">=",55],["τinstanceof",55],["==",55],["!=",55],["===",55],["!==",55],["&",55],["^",55],["|",55],["&&",55],["||",55],["?",55],[",",55],["*=",58],["/=",59],["%=",60],["+=",61],["-=",62],["<<=",63],[">>=",64],[">>>=",65],["&=",66],["^=",67],["|=",68],["**=",69],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["τin",333],["τof",334],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["τvar",335],["τnew",12],["τthis",13],["θid",14],["τtrue",15],["τfalse",16],["τnull",17],["θstr",18],["θnum",19],["[",20],["{",108],["τfunction",39],["τclass",38],["(",21],["τsuper",22],["τlet",40],["τconst",41],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[")",336],[",",51],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["$",337],["{",337],["τthis",337],["θid",337],["τtrue",337],["τfalse",337],["τnull",337],["θstr",337],["θnum",337],["[",337],["τfunction",337],["τclass",337],["(",337],["τsuper",337],["τnew",337],["++",337],["--",337],["τdelete",337],["τvoid",337],["τtypeof",337],["+",337],["-",337],["~",337],["τawait",337],["τvar",337],[";",337],["τif",337],["τdo",337],["τwhile",337],["τfor",337],["τswitch",337],["τcontinue",337],["τbreak",337],["τreturn",337],["τwith",337],["τthrow",337],["τtry",337],["τdebugger",337],["τlet",337],["τconst",337],["}",337],["τelse",337],["τcase",337],["τdefault",337],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["$",338],["{",338],["τthis",338],["θid",338],["τtrue",338],["τfalse",338],["τnull",338],["θstr",338],["θnum",338],["[",338],["τfunction",338],["τclass",338],["(",338],["τsuper",338],["τnew",338],["++",338],["--",338],["τdelete",338],["τvoid",338],["τtypeof",338],["+",338],["-",338],["~",338],["τawait",338],["τvar",338],[";",338],["τif",338],["τdo",338],["τwhile",338],["τfor",338],["τswitch",338],["τcontinue",338],["τbreak",338],["τreturn",338],["τwith",338],["τthrow",338],["τtry",338],["τdebugger",338],["τlet",338],["τconst",338],["}",338],["τelse",338],["τcase",338],["τdefault",338],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["$",339],["{",339],["τthis",339],["θid",339],["τtrue",339],["τfalse",339],["τnull",339],["θstr",339],["θnum",339],["[",339],["τfunction",339],["τclass",339],["(",339],["τsuper",339],["τnew",339],["++",339],["--",339],["τdelete",339],["τvoid",339],["τtypeof",339],["+",339],["-",339],["~",339],["τawait",339],["τvar",339],[";",339],["τif",339],["τdo",339],["τwhile",339],["τfor",339],["τswitch",339],["τcontinue",339],["τbreak",339],["τreturn",339],["τwith",339],["τthrow",339],["τtry",339],["τdebugger",339],["τlet",339],["τconst",339],["}",339],["τelse",339],["τcase",339],["τdefault",339],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[")",340],[",",51],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["$",341],["{",341],["τthis",341],["θid",341],["τtrue",341],["τfalse",341],["τnull",341],["θstr",341],["θnum",341],["[",341],["τfunction",341],["τclass",341],["(",341],["τsuper",341],["τnew",341],["++",341],["--",341],["τdelete",341],["τvoid",341],["τtypeof",341],["+",341],["-",341],["~",341],["τawait",341],["τvar",341],[";",341],["τif",341],["τdo",341],["τwhile",341],["τfor",341],["τswitch",341],["τcontinue",341],["τbreak",341],["τreturn",341],["τwith",341],["τthrow",341],["τtry",341],["τdebugger",341],["τlet",341],["τconst",341],["}",341],["τelse",341],["τcase",341],["τdefault",341],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["$",342],["{",342],["τthis",342],["θid",342],["τtrue",342],["τfalse",342],["τnull",342],["θstr",342],["θnum",342],["[",342],["τfunction",342],["τclass",342],["(",342],["τsuper",342],["τnew",342],["++",342],["--",342],["τdelete",342],["τvoid",342],["τtypeof",342],["+",342],["-",342],["~",342],["τawait",342],["τvar",342],[";",342],["τif",342],["τdo",342],["τwhile",342],["τfor",342],["τswitch",342],["τcontinue",342],["τbreak",342],["τreturn",342],["τwith",342],["τthrow",342],["τtry",342],["τdebugger",342],["τlet",342],["τconst",342],["τfinally",230],["}",342],["τelse",342],["τcase",342],["τdefault",342],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["$",343],["{",343],["τthis",343],["θid",343],["τtrue",343],["τfalse",343],["τnull",343],["θstr",343],["θnum",343],["[",343],["τfunction",343],["τclass",343],["(",343],["τsuper",343],["τnew",343],["++",343],["--",343],["τdelete",343],["τvoid",343],["τtypeof",343],["+",343],["-",343],["~",343],["τawait",343],["τvar",343],[";",343],["τif",343],["τdo",343],["τwhile",343],["τfor",343],["τswitch",343],["τcontinue",343],["τbreak",343],["τreturn",343],["τwith",343],["τthrow",343],["τtry",343],["τdebugger",343],["τlet",343],["τconst",343],["}",343],["τelse",343],["τcase",343],["τdefault",343],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["(",344],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["$",345],["{",345],["τthis",345],["θid",345],["τtrue",345],["τfalse",345],["τnull",345],["θstr",345],["θnum",345],["τfunction",345],["τclass",345],["τsuper",345],["τnew",345],["τdelete",345],["τvoid",345],["τtypeof",345],["~",345],["τawait",345],["τvar",345],["τif",345],["τdo",345],["τwhile",345],["τfor",345],["τswitch",345],["τcontinue",345],["τbreak",345],["τreturn",345],["τwith",345],["τthrow",345],["τtry",345],["τdebugger",345],["τlet",345],["τconst",345],["}",345],[";",345],["[",345],[".",345],["(",345],["++",345],["--",345],["*",345],["/",345],["%",345],["+",345],["-",345],["<<",345],[">>",345],[">>>",345],["<",345],[">",345],["<=",345],[">=",345],["τinstanceof",345],["τin",345],["==",345],["!=",345],["===",345],["!==",345],["&",345],["^",345],["|",345],["&&",345],["||",345],["?",345],[",",345],["**",345],["=",345],["*=",345],["/=",345],["%=",345],["+=",345],["-=",345],["<<=",345],[">>=",345],[">>>=",345],["&=",345],["^=",345],["|=",345],["**=",345],["]",345],[")",345],[":",345],["τof",345],["τcase",345],["τdefault",345],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["}",346],["τstatic",235],[";",236],["τget",176],["τset",177],["θid",14],["θstr",18],["θnum",19],["[",175],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["}",347],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["$",348],["{",348],["τthis",348],["θid",348],["τtrue",348],["τfalse",348],["τnull",348],["θstr",348],["θnum",348],["τfunction",348],["τclass",348],["τsuper",348],["τnew",348],["τdelete",348],["τvoid",348],["τtypeof",348],["~",348],["τawait",348],["τvar",348],["τif",348],["τdo",348],["τwhile",348],["τfor",348],["τswitch",348],["τcontinue",348],["τbreak",348],["τreturn",348],["τwith",348],["τthrow",348],["τtry",348],["τdebugger",348],["τlet",348],["τconst",348],["}",348],[";",348],["[",348],[".",348],["(",348],["++",348],["--",348],["*",348],["/",348],["%",348],["+",348],["-",348],["<<",348],[">>",348],[">>>",348],["<",348],[">",348],["<=",348],[">=",348],["τinstanceof",348],["τin",348],["==",348],["!=",348],["===",348],["!==",348],["&",348],["^",348],["|",348],["&&",348],["||",348],["?",348],[",",348],["**",348],["=",348],["*=",348],["/=",348],["%=",348],["+=",348],["-=",348],["<<=",348],[">>=",348],[">>>=",348],["&=",348],["^=",348],["|=",348],["**=",348],["]",348],[")",348],[":",348],["τof",348],["τcase",348],["τdefault",348],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["}",349],["τstatic",235],[";",236],["τget",176],["τset",177],["θid",14],["θstr",18],["θnum",19],["[",175],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["}",350],["θid",350],["θstr",350],["θnum",350],["[",350],["τget",350],["τset",350],["τstatic",350],[";",350],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["}",351],["θid",351],["θstr",351],["θnum",351],["[",351],["τget",351],["τset",351],["τstatic",351],[";",351],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["τget",176],["τset",177],["θid",14],["θstr",18],["θnum",19],["[",175],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["(",276],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["(",279],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["{",352],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[")",353],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[")",354],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[")",354],[",",355],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[")",356],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[")",357],[",",357],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[")",358],[",",358],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["$",359],["{",359],["τthis",359],["θid",359],["τtrue",359],["τfalse",359],["τnull",359],["θstr",359],["θnum",359],["[",359],["τfunction",359],["τclass",359],["(",359],["τsuper",359],["τnew",359],["++",359],["--",359],["τdelete",359],["τvoid",359],["τtypeof",359],["+",359],["-",359],["~",359],["τawait",359],["τvar",359],[";",359],["τif",359],["τdo",359],["τwhile",359],["τfor",359],["τswitch",359],["τcontinue",359],["τbreak",359],["τreturn",359],["τwith",359],["τthrow",359],["τtry",359],["τdebugger",359],["τlet",359],["τconst",359],["}",359],["τcase",359],["τdefault",359],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",360],[",",360],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",361],["[",361],[".",361],["(",361],["++",361],["--",361],["*",361],["/",361],["%",361],["+",361],["-",361],["<<",361],[">>",361],[">>>",361],["<",361],[">",361],["<=",361],[">=",361],["τinstanceof",361],["τin",361],["==",361],["!=",361],["===",361],["!==",361],["&",361],["^",361],["|",361],["&&",361],["||",361],["?",361],[",",361],["**",361],["=",361],["*=",361],["/=",361],["%=",361],["+=",361],["-=",361],["<<=",361],[">>=",361],[">>>=",361],["&=",361],["^=",361],["|=",361],["**=",361],["]",361],[")",361],[":",361],["τof",361],["{",361],["}",361],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["}",362],["...",174],["θid",14],["θstr",18],["θnum",19],["[",175],["τget",176],["τset",177],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["}",363],[",",363],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["}",364],[",",364],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["}",365],[",",365],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["]",366],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["(",367],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["(",368],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",369],[".",369],["(",369],["[",369],["++",369],["--",369],["**",369],["*",369],["/",369],["%",369],["+",369],["-",369],["<<",369],[">>",369],[">>>",369],["<",369],[">",369],["<=",369],[">=",369],["τinstanceof",369],["τin",369],["==",369],["!=",369],["===",369],["!==",369],["&",369],["^",369],["|",369],["&&",369],["||",369],["?",369],["=",369],["*=",369],["/=",369],["%=",369],["+=",369],["-=",369],["<<=",369],[">>=",369],[">>>=",369],["&=",369],["^=",369],["|=",369],["**=",369],[",",369],["]",369],[")",369],[":",369],["τof",369],["{",369],["}",369],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",370],[".",370],["(",370],["[",370],["++",370],["--",370],["**",370],["*",370],["/",370],["%",370],["+",370],["-",370],["<<",370],[">>",370],[">>>",370],["<",370],[">",370],["<=",370],[">=",370],["τinstanceof",370],["τin",370],["==",370],["!=",370],["===",370],["!==",370],["&",370],["^",370],["|",370],["&&",370],["||",370],["?",370],["=",370],["*=",370],["/=",370],["%=",370],["+=",370],["-=",370],["<<=",370],[">>=",370],[">>>=",370],["&=",370],["^=",370],["|=",370],["**=",370],[",",370],["]",370],[")",370],[":",370],["τof",370],["{",370],["}",370],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[")",371],["...",372],["τdelete",3],["τvoid",4],["τtypeof",5],["+",6],["-",7],["~",8],["!",9],["++",10],["--",11],["τnew",12],["τthis",13],["θid",14],["τtrue",15],["τfalse",16],["τnull",17],["θstr",18],["θnum",19],["[",20],["{",108],["τfunction",39],["τclass",38],["(",21],["τsuper",22],["τawait",23],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[")",373],[",",373],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",374],["[",374],[".",374],["(",374],["++",374],["--",374],["**",374],["*",374],["/",374],["%",374],["+",374],["-",374],["<<",374],[">>",374],[">>>",374],["<",374],[">",374],["<=",374],[">=",374],["τinstanceof",374],["τin",374],["==",374],["!=",374],["===",374],["!==",374],["&",374],["^",374],["|",374],["&&",374],["||",374],["?",374],["=",374],["*=",374],["/=",374],["%=",374],["+=",374],["-=",374],["<<=",374],[">>=",374],[">>>=",374],["&=",374],["^=",374],["|=",374],["**=",374],[",",374],["]",374],[")",374],[":",374],["τof",374],["{",374],["}",374],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",375],["[",375],[".",375],["(",375],["++",375],["--",375],["**",375],["*",375],["/",375],["%",375],["+",375],["-",375],["<<",375],[">>",375],[">>>",375],["<",375],[">",375],["<=",375],[">=",375],["τinstanceof",375],["τin",375],["==",375],["!=",375],["===",375],["!==",375],["&",375],["^",375],["|",375],["&&",375],["||",375],["?",375],["=",375],["*=",375],["/=",375],["%=",375],["+=",375],["-=",375],["<<=",375],[">>=",375],[">>>=",375],["&=",375],["^=",375],["|=",375],["**=",375],[",",375],["]",375],[")",375],[":",375],["τof",375],["{",375],["}",375],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["]",376],[",",376],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[",",196],["τdelete",3],["τvoid",4],["τtypeof",5],["+",6],["-",7],["~",8],["!",9],["++",10],["--",11],["τnew",12],["τthis",13],["θid",14],["τtrue",15],["τfalse",16],["τnull",17],["θstr",18],["θnum",19],["[",20],["{",108],["τfunction",39],["τclass",38],["(",21],["τsuper",22],["τawait",23],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",377],["[",377],[".",377],["(",377],["++",377],["--",377],["**",377],["*",377],["/",377],["%",377],["+",377],["-",377],["<<",377],[">>",377],[">>>",377],["<",377],[">",377],["<=",377],[">=",377],["τinstanceof",377],["τin",377],["==",377],["!=",377],["===",377],["!==",377],["&",377],["^",377],["|",377],["&&",377],["||",377],["?",377],["=>",377],["=",377],["*=",377],["/=",377],["%=",377],["+=",377],["-=",377],["<<=",377],[">>=",377],[">>>=",377],["&=",377],["^=",377],["|=",377],["**=",377],[",",377],["]",377],[")",377],[":",377],["τof",377],["{",377],["}",377],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",378],["[",378],[".",378],["(",378],["++",378],["--",378],["**",378],["*",378],["/",378],["%",378],["+",378],["-",378],["<<",378],[">>",378],[">>>",378],["<",378],[">",378],["<=",378],[">=",378],["τinstanceof",378],["τin",378],["==",378],["!=",378],["===",378],["!==",378],["&",378],["^",378],["|",378],["&&",378],["||",378],["?",378],["=>",378],["=",378],["*=",378],["/=",378],["%=",378],["+=",378],["-=",378],["<<=",378],[">>=",378],[">>>=",378],["&=",378],["^=",378],["|=",378],["**=",378],[",",378],["]",378],[")",378],[":",378],["τof",378],["{",378],["}",378],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[".",379],["[",379],[";",379],["(",379],["++",379],["--",379],["**",379],["*",379],["/",379],["%",379],["+",379],["-",379],["<<",379],[">>",379],[">>>",379],["<",379],[">",379],["<=",379],[">=",379],["τinstanceof",379],["τin",379],["==",379],["!=",379],["===",379],["!==",379],["&",379],["^",379],["|",379],["&&",379],["||",379],["?",379],["=",379],["*=",379],["/=",379],["%=",379],["+=",379],["-=",379],["<<=",379],[">>=",379],[">>>=",379],["&=",379],["^=",379],["|=",379],["**=",379],[",",379],["]",379],[")",379],[":",379],["τof",379],["{",379],["}",379],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["}",380],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["}",381],["{",2],["τdelete",3],["τvoid",4],["τtypeof",5],["+",6],["-",7],["~",8],["!",9],["++",10],["--",11],["τnew",12],["τthis",13],["θid",14],["τtrue",15],["τfalse",16],["τnull",17],["θstr",18],["θnum",19],["[",20],["(",21],["τsuper",22],["τawait",23],["τvar",24],[";",25],["τif",26],["τdo",27],["τwhile",28],["τfor",29],["τswitch",30],["τcontinue",31],["τbreak",32],["τreturn",33],["τwith",34],["τthrow",35],["τtry",36],["τdebugger",37],["τclass",38],["τfunction",39],["τlet",40],["τconst",41],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",382],[",",382],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",383],[",",383],["}",383],["]",383],[")",383],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["=",384],[")",384],["]",384],[",",384],["τin",384],["τof",384],["}",384],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["}",385],["...",215],["θid",14],["θstr",18],["θnum",19],["[",175],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["}",386],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["}",387],[",",387],["]",387],[")",387],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["]",388],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["=",389],[")",389],["]",389],[",",389],["τin",389],["τof",389],["}",389],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["]",390],[",",390],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["]",391],[",",134],["...",217],["θid",14],["{",144],["[",145],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["]",392],[")",392],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["]",393],[",",393],[")",393],["}",393],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",394],["τdelete",3],["τvoid",4],["τtypeof",5],["+",6],["-",7],["~",8],["!",9],["++",10],["--",11],["τnew",12],["τthis",13],["θid",14],["τtrue",15],["τfalse",16],["τnull",17],["θstr",18],["θnum",19],["[",20],["{",108],["τfunction",39],["τclass",38],["(",21],["τsuper",22],["τawait",23],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",395],[",",51],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[")",396],["τdelete",3],["τvoid",4],["τtypeof",5],["+",6],["-",7],["~",8],["!",9],["++",10],["--",11],["τnew",12],["τthis",13],["θid",14],["τtrue",15],["τfalse",16],["τnull",17],["θstr",18],["θnum",19],["[",20],["{",108],["τfunction",39],["τclass",38],["(",21],["τsuper",22],["τawait",23],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",397],[",",209],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["τin",398],["τof",399],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",211],[",",211],["τin",400],["τof",400],["=",212],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["τin",400],["τof",400],["=",212],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",401],[",",51],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[")",402],["τdelete",3],["τvoid",4],["τtypeof",5],["+",6],["-",7],["~",8],["!",9],["++",10],["--",11],["τnew",12],["τthis",13],["θid",14],["τtrue",15],["τfalse",16],["τnull",17],["θstr",18],["θnum",19],["[",20],["{",108],["τfunction",39],["τclass",38],["(",21],["τsuper",22],["τawait",23],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["τin",403],["τof",403],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["τof",404],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["τof",405],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["{",406],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["$",407],["{",407],["τthis",407],["θid",407],["τtrue",407],["τfalse",407],["τnull",407],["θstr",407],["θnum",407],["[",407],["τfunction",407],["τclass",407],["(",407],["τsuper",407],["τnew",407],["++",407],["--",407],["τdelete",407],["τvoid",407],["τtypeof",407],["+",407],["-",407],["~",407],["τawait",407],["τvar",407],[";",407],["τif",407],["τdo",407],["τwhile",407],["τfor",407],["τswitch",407],["τcontinue",407],["τbreak",407],["τreturn",407],["τwith",407],["τthrow",407],["τtry",407],["τdebugger",407],["τlet",407],["τconst",407],["}",407],["τelse",407],["τcase",407],["τdefault",407],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["$",408],["{",408],["τthis",408],["θid",408],["τtrue",408],["τfalse",408],["τnull",408],["θstr",408],["θnum",408],["[",408],["τfunction",408],["τclass",408],["(",408],["τsuper",408],["τnew",408],["++",408],["--",408],["τdelete",408],["τvoid",408],["τtypeof",408],["+",408],["-",408],["~",408],["τawait",408],["τvar",408],[";",408],["τif",408],["τdo",408],["τwhile",408],["τfor",408],["τswitch",408],["τcontinue",408],["τbreak",408],["τreturn",408],["τwith",408],["τthrow",408],["τtry",408],["τdebugger",408],["τlet",408],["τconst",408],["}",408],["τelse",408],["τcase",408],["τdefault",408],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["}",409],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["$",410],["{",410],["τthis",410],["θid",410],["τtrue",410],["τfalse",410],["τnull",410],["θstr",410],["θnum",410],["τfunction",410],["τclass",410],["τsuper",410],["τnew",410],["τdelete",410],["τvoid",410],["τtypeof",410],["~",410],["τawait",410],["τvar",410],["τif",410],["τdo",410],["τwhile",410],["τfor",410],["τswitch",410],["τcontinue",410],["τbreak",410],["τreturn",410],["τwith",410],["τthrow",410],["τtry",410],["τdebugger",410],["τlet",410],["τconst",410],["}",410],[";",410],["[",410],[".",410],["(",410],["++",410],["--",410],["*",410],["/",410],["%",410],["+",410],["-",410],["<<",410],[">>",410],[">>>",410],["<",410],[">",410],["<=",410],[">=",410],["τinstanceof",410],["τin",410],["==",410],["!=",410],["===",410],["!==",410],["&",410],["^",410],["|",410],["&&",410],["||",410],["?",410],[",",410],["**",410],["=",410],["*=",410],["/=",410],["%=",410],["+=",410],["-=",410],["<<=",410],[">>=",410],[">>>=",410],["&=",410],["^=",410],["|=",410],["**=",410],["]",410],[")",410],[":",410],["τof",410],["τcase",410],["τdefault",410],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["$",411],["{",411],["τthis",411],["θid",411],["τtrue",411],["τfalse",411],["τnull",411],["θstr",411],["θnum",411],["τfunction",411],["τclass",411],["τsuper",411],["τnew",411],["τdelete",411],["τvoid",411],["τtypeof",411],["~",411],["τawait",411],["τvar",411],["τif",411],["τdo",411],["τwhile",411],["τfor",411],["τswitch",411],["τcontinue",411],["τbreak",411],["τreturn",411],["τwith",411],["τthrow",411],["τtry",411],["τdebugger",411],["τlet",411],["τconst",411],["}",411],[";",411],["[",411],[".",411],["(",411],["++",411],["--",411],["*",411],["/",411],["%",411],["+",411],["-",411],["<<",411],[">>",411],[">>>",411],["<",411],[">",411],["<=",411],[">=",411],["τinstanceof",411],["τin",411],["==",411],["!=",411],["===",411],["!==",411],["&",411],["^",411],["|",411],["&&",411],["||",411],["?",411],[",",411],["**",411],["=",411],["*=",411],["/=",411],["%=",411],["+=",411],["-=",411],["<<=",411],[">>=",411],[">>>=",411],["&=",411],["^=",411],["|=",411],["**=",411],["]",411],[")",411],[":",411],["τof",411],["τcase",411],["τdefault",411],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["}",412],["θid",412],["θstr",412],["θnum",412],["[",412],["τget",412],["τset",412],["τstatic",412],[";",412],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["}",413],["θid",413],["θstr",413],["θnum",413],["[",413],["τget",413],["τset",413],["τstatic",413],[";",413],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["{",414],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[")",415],["...",217],["θid",14],["{",144],["[",145],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[")",416],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",417],[",",417],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",418],[",",418],["]",418],[")",418],[":",418],["}",418],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",419],["[",419],[".",419],["(",419],["++",419],["--",419],["*",419],["/",419],["%",419],["+",419],["-",419],["<<",419],[">>",419],[">>>",419],["<",419],[">",419],["<=",419],[">=",419],["τinstanceof",419],["τin",419],["==",419],["!=",419],["===",419],["!==",419],["&",419],["^",419],["|",419],["&&",419],["||",419],["?",419],[",",419],["**",419],["=",419],["*=",419],["/=",419],["%=",419],["+=",419],["-=",419],["<<=",419],[">>=",419],[">>>=",419],["&=",419],["^=",419],["|=",419],["**=",419],["]",419],[")",419],[":",419],["τof",419],["{",419],["}",419],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["}",420],[",",420],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[")",421],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[")",422],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["}",423],[",",423],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[":",424],["(",424],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[")",425],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",426],[".",426],["(",426],["[",426],["++",426],["--",426],["**",426],["*",426],["/",426],["%",426],["+",426],["-",426],["<<",426],[">>",426],[">>>",426],["<",426],[">",426],["<=",426],[">=",426],["τinstanceof",426],["τin",426],["==",426],["!=",426],["===",426],["!==",426],["&",426],["^",426],["|",426],["&&",426],["||",426],["?",426],["=",426],["*=",426],["/=",426],["%=",426],["+=",426],["-=",426],["<<=",426],[">>=",426],[">>>=",426],["&=",426],["^=",426],["|=",426],["**=",426],[",",426],["]",426],[")",426],[":",426],["τof",426],["{",426],["}",426],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[")",427],[",",427],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["]",428],[",",428],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[")",429],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[")",430],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",431],[",",431],["]",431],[")",431],[":",431],["}",431],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["}",432],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["=",433],[")",433],["]",433],[",",433],["τin",433],["τof",433],["}",433],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["}",434],[",",434],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["}",435],[",",435],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["=",436],[")",436],["]",436],[",",436],["τin",436],["τof",436],["}",436],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["]",437],[",",196],["...",217],["θid",14],["{",144],["[",145],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["]",438],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["]",439],[",",439],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["τelse",440],["$",441],["{",441],["τthis",441],["θid",441],["τtrue",441],["τfalse",441],["τnull",441],["θstr",441],["θnum",441],["[",441],["τfunction",441],["τclass",441],["(",441],["τsuper",441],["τnew",441],["++",441],["--",441],["τdelete",441],["τvoid",441],["τtypeof",441],["+",441],["-",441],["~",441],["τawait",441],["τvar",441],[";",441],["τif",441],["τdo",441],["τwhile",441],["τfor",441],["τswitch",441],["τcontinue",441],["τbreak",441],["τreturn",441],["τwith",441],["τthrow",441],["τtry",441],["τdebugger",441],["τlet",441],["τconst",441],["}",441],["τcase",441],["τdefault",441],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[")",442],[",",51],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["$",443],["{",443],["τthis",443],["θid",443],["τtrue",443],["τfalse",443],["τnull",443],["θstr",443],["θnum",443],["[",443],["τfunction",443],["τclass",443],["(",443],["τsuper",443],["τnew",443],["++",443],["--",443],["τdelete",443],["τvoid",443],["τtypeof",443],["+",443],["-",443],["~",443],["τawait",443],["τvar",443],[";",443],["τif",443],["τdo",443],["τwhile",443],["τfor",443],["τswitch",443],["τcontinue",443],["τbreak",443],["τreturn",443],["τwith",443],["τthrow",443],["τtry",443],["τdebugger",443],["τlet",443],["τconst",443],["}",443],["τelse",443],["τcase",443],["τdefault",443],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",444],[",",51],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[")",445],["τdelete",3],["τvoid",4],["τtypeof",5],["+",6],["-",7],["~",8],["!",9],["++",10],["--",11],["τnew",12],["τthis",13],["θid",14],["τtrue",15],["τfalse",16],["τnull",17],["θstr",18],["θnum",19],["[",20],["{",108],["τfunction",39],["τclass",38],["(",21],["τsuper",22],["τawait",23],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[")",446],[",",51],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",447],["τdelete",3],["τvoid",4],["τtypeof",5],["+",6],["-",7],["~",8],["!",9],["++",10],["--",11],["τnew",12],["τthis",13],["θid",14],["τtrue",15],["τfalse",16],["τnull",17],["θstr",18],["θnum",19],["[",20],["{",108],["τfunction",39],["τclass",38],["(",21],["τsuper",22],["τawait",23],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[")",448],["τdelete",3],["τvoid",4],["τtypeof",5],["+",6],["-",7],["~",8],["!",9],["++",10],["--",11],["τnew",12],["τthis",13],["θid",14],["τtrue",15],["τfalse",16],["τnull",17],["θstr",18],["θnum",19],["[",20],["{",108],["τfunction",39],["τclass",38],["(",21],["τsuper",22],["τawait",23],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[")",449],[",",51],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[")",450],[",",51],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[")",451],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[")",452],[",",51],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[")",453],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["τof",454],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["τof",400],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["$",455],["{",455],["τthis",455],["θid",455],["τtrue",455],["τfalse",455],["τnull",455],["θstr",455],["θnum",455],["[",455],["τfunction",455],["τclass",455],["(",455],["τsuper",455],["τnew",455],["++",455],["--",455],["τdelete",455],["τvoid",455],["τtypeof",455],["+",455],["-",455],["~",455],["τawait",455],["τvar",455],[";",455],["τif",455],["τdo",455],["τwhile",455],["τfor",455],["τswitch",455],["τcontinue",455],["τbreak",455],["τreturn",455],["τwith",455],["τthrow",455],["τtry",455],["τdebugger",455],["τlet",455],["τconst",455],["}",455],["τelse",455],["τcase",455],["τdefault",455],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["}",456],["τcase",457],["τdefault",458],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["$",459],["{",459],["τthis",459],["θid",459],["τtrue",459],["τfalse",459],["τnull",459],["θstr",459],["θnum",459],["[",459],["τfunction",459],["τclass",459],["(",459],["τsuper",459],["τnew",459],["++",459],["--",459],["τdelete",459],["τvoid",459],["τtypeof",459],["+",459],["-",459],["~",459],["τawait",459],["τvar",459],[";",459],["τif",459],["τdo",459],["τwhile",459],["τfor",459],["τswitch",459],["τcontinue",459],["τbreak",459],["τreturn",459],["τwith",459],["τthrow",459],["τtry",459],["τdebugger",459],["τlet",459],["τconst",459],["}",459],["τelse",459],["τcase",459],["τdefault",459],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[")",460],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[")",461],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["$",462],["{",462],["τthis",462],["θid",462],["τtrue",462],["τfalse",462],["τnull",462],["θstr",462],["θnum",462],["τfunction",462],["τclass",462],["τsuper",462],["τnew",462],["τdelete",462],["τvoid",462],["τtypeof",462],["~",462],["τawait",462],["τvar",462],["τif",462],["τdo",462],["τwhile",462],["τfor",462],["τswitch",462],["τcontinue",462],["τbreak",462],["τreturn",462],["τwith",462],["τthrow",462],["τtry",462],["τdebugger",462],["τlet",462],["τconst",462],["}",462],[";",462],["[",462],[".",462],["(",462],["++",462],["--",462],["*",462],["/",462],["%",462],["+",462],["-",462],["<<",462],[">>",462],[">>>",462],["<",462],[">",462],["<=",462],[">=",462],["τinstanceof",462],["τin",462],["==",462],["!=",462],["===",462],["!==",462],["&",462],["^",462],["|",462],["&&",462],["||",462],["?",462],[",",462],["**",462],["=",462],["*=",462],["/=",462],["%=",462],["+=",462],["-=",462],["<<=",462],[">>=",462],[">>>=",462],["&=",462],["^=",462],["|=",462],["**=",462],["]",462],[")",462],[":",462],["τof",462],["τcase",462],["τdefault",462],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["}",463],["{",2],["τdelete",3],["τvoid",4],["τtypeof",5],["+",6],["-",7],["~",8],["!",9],["++",10],["--",11],["τnew",12],["τthis",13],["θid",14],["τtrue",15],["τfalse",16],["τnull",17],["θstr",18],["θnum",19],["[",20],["(",21],["τsuper",22],["τawait",23],["τvar",24],[";",25],["τif",26],["τdo",27],["τwhile",28],["τfor",29],["τswitch",30],["τcontinue",31],["τbreak",32],["τreturn",33],["τwith",34],["τthrow",35],["τtry",36],["τdebugger",37],["τclass",38],["τfunction",39],["τlet",40],["τconst",41],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[")",464],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[")",465],[",",465],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["{",466],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["{",467],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["{",468],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[")",469],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[")",470],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[")",471],[",",471],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",472],["[",472],[".",472],["(",472],["++",472],["--",472],["**",472],["*",472],["/",472],["%",472],["+",472],["-",472],["<<",472],[">>",472],[">>>",472],["<",472],[">",472],["<=",472],[">=",472],["τinstanceof",472],["τin",472],["==",472],["!=",472],["===",472],["!==",472],["&",472],["^",472],["|",472],["&&",472],["||",472],["?",472],["=>",472],["=",472],["*=",472],["/=",472],["%=",472],["+=",472],["-=",472],["<<=",472],[">>=",472],[">>>=",472],["&=",472],["^=",472],["|=",472],["**=",472],[",",472],["]",472],[")",472],[":",472],["τof",472],["{",472],["}",472],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["=",473],[")",473],["]",473],[",",473],["τin",473],["τof",473],["}",473],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["=",474],[")",474],["]",474],[",",474],["τin",474],["τof",474],["}",474],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["]",475],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",476],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[")",477],["τdelete",3],["τvoid",4],["τtypeof",5],["+",6],["-",7],["~",8],["!",9],["++",10],["--",11],["τnew",12],["τthis",13],["θid",14],["τtrue",15],["τfalse",16],["τnull",17],["θstr",18],["θnum",19],["[",20],["{",108],["τfunction",39],["τclass",38],["(",21],["τsuper",22],["τawait",23],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[")",478],[",",51],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[")",479],[",",51],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["$",480],["{",480],["τthis",480],["θid",480],["τtrue",480],["τfalse",480],["τnull",480],["θstr",480],["θnum",480],["[",480],["τfunction",480],["τclass",480],["(",480],["τsuper",480],["τnew",480],["++",480],["--",480],["τdelete",480],["τvoid",480],["τtypeof",480],["+",480],["-",480],["~",480],["τawait",480],["τvar",480],[";",480],["τif",480],["τdo",480],["τwhile",480],["τfor",480],["τswitch",480],["τcontinue",480],["τbreak",480],["τreturn",480],["τwith",480],["τthrow",480],["τtry",480],["τdebugger",480],["τlet",480],["τconst",480],["}",480],["τelse",480],["τcase",480],["τdefault",480],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[";",481],[",",51],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[")",482],["τdelete",3],["τvoid",4],["τtypeof",5],["+",6],["-",7],["~",8],["!",9],["++",10],["--",11],["τnew",12],["τthis",13],["θid",14],["τtrue",15],["τfalse",16],["τnull",17],["θstr",18],["θnum",19],["[",20],["{",108],["τfunction",39],["τclass",38],["(",21],["τsuper",22],["τawait",23],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[")",483],[",",51],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[")",484],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[")",485],[",",51],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["$",486],["{",486],["τthis",486],["θid",486],["τtrue",486],["τfalse",486],["τnull",486],["θstr",486],["θnum",486],["[",486],["τfunction",486],["τclass",486],["(",486],["τsuper",486],["τnew",486],["++",486],["--",486],["τdelete",486],["τvoid",486],["τtypeof",486],["+",486],["-",486],["~",486],["τawait",486],["τvar",486],[";",486],["τif",486],["τdo",486],["τwhile",486],["τfor",486],["τswitch",486],["τcontinue",486],["τbreak",486],["τreturn",486],["τwith",486],["τthrow",486],["τtry",486],["τdebugger",486],["τlet",486],["τconst",486],["}",486],["τelse",486],["τcase",486],["τdefault",486],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[")",487],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[")",488],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["$",489],["{",489],["τthis",489],["θid",489],["τtrue",489],["τfalse",489],["τnull",489],["θstr",489],["θnum",489],["[",489],["τfunction",489],["τclass",489],["(",489],["τsuper",489],["τnew",489],["++",489],["--",489],["τdelete",489],["τvoid",489],["τtypeof",489],["+",489],["-",489],["~",489],["τawait",489],["τvar",489],[";",489],["τif",489],["τdo",489],["τwhile",489],["τfor",489],["τswitch",489],["τcontinue",489],["τbreak",489],["τreturn",489],["τwith",489],["τthrow",489],["τtry",489],["τdebugger",489],["τlet",489],["τconst",489],["}",489],["τelse",489],["τcase",489],["τdefault",489],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["}",490],["τdefault",458],["τcase",457],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["}",491],["τcase",457],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["τdefault",492],["τcase",492],["}",492],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[":",493],["τcase",494],["}",494],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["}",495],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["}",496],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["{",497],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["=",498],[")",498],["]",498],[",",498],["τin",498],["τof",498],["}",498],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["$",499],["{",499],["τthis",499],["θid",499],["τtrue",499],["τfalse",499],["τnull",499],["θstr",499],["θnum",499],["[",499],["τfunction",499],["τclass",499],["(",499],["τsuper",499],["τnew",499],["++",499],["--",499],["τdelete",499],["τvoid",499],["τtypeof",499],["+",499],["-",499],["~",499],["τawait",499],["τvar",499],[";",499],["τif",499],["τdo",499],["τwhile",499],["τfor",499],["τswitch",499],["τcontinue",499],["τbreak",499],["τreturn",499],["τwith",499],["τthrow",499],["τtry",499],["τdebugger",499],["τlet",499],["τconst",499],["}",499],["τelse",499],["τcase",499],["τdefault",499],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["$",500],["{",500],["τthis",500],["θid",500],["τtrue",500],["τfalse",500],["τnull",500],["θstr",500],["θnum",500],["[",500],["τfunction",500],["τclass",500],["(",500],["τsuper",500],["τnew",500],["++",500],["--",500],["τdelete",500],["τvoid",500],["τtypeof",500],["+",500],["-",500],["~",500],["τawait",500],["τvar",500],[";",500],["τif",500],["τdo",500],["τwhile",500],["τfor",500],["τswitch",500],["τcontinue",500],["τbreak",500],["τreturn",500],["τwith",500],["τthrow",500],["τtry",500],["τdebugger",500],["τlet",500],["τconst",500],["}",500],["τelse",500],["τcase",500],["τdefault",500],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[")",501],[",",51],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["$",502],["{",502],["τthis",502],["θid",502],["τtrue",502],["τfalse",502],["τnull",502],["θstr",502],["θnum",502],["[",502],["τfunction",502],["τclass",502],["(",502],["τsuper",502],["τnew",502],["++",502],["--",502],["τdelete",502],["τvoid",502],["τtypeof",502],["+",502],["-",502],["~",502],["τawait",502],["τvar",502],[";",502],["τif",502],["τdo",502],["τwhile",502],["τfor",502],["τswitch",502],["τcontinue",502],["τbreak",502],["τreturn",502],["τwith",502],["τthrow",502],["τtry",502],["τdebugger",502],["τlet",502],["τconst",502],["}",502],["τelse",502],["τcase",502],["τdefault",502],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["$",503],["{",503],["τthis",503],["θid",503],["τtrue",503],["τfalse",503],["τnull",503],["θstr",503],["θnum",503],["[",503],["τfunction",503],["τclass",503],["(",503],["τsuper",503],["τnew",503],["++",503],["--",503],["τdelete",503],["τvoid",503],["τtypeof",503],["+",503],["-",503],["~",503],["τawait",503],["τvar",503],[";",503],["τif",503],["τdo",503],["τwhile",503],["τfor",503],["τswitch",503],["τcontinue",503],["τbreak",503],["τreturn",503],["τwith",503],["τthrow",503],["τtry",503],["τdebugger",503],["τlet",503],["τconst",503],["}",503],["τelse",503],["τcase",503],["τdefault",503],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[")",504],["τdelete",3],["τvoid",4],["τtypeof",5],["+",6],["-",7],["~",8],["!",9],["++",10],["--",11],["τnew",12],["τthis",13],["θid",14],["τtrue",15],["τfalse",16],["τnull",17],["θstr",18],["θnum",19],["[",20],["{",108],["τfunction",39],["τclass",38],["(",21],["τsuper",22],["τawait",23],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[")",505],[",",51],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["$",506],["{",506],["τthis",506],["θid",506],["τtrue",506],["τfalse",506],["τnull",506],["θstr",506],["θnum",506],["[",506],["τfunction",506],["τclass",506],["(",506],["τsuper",506],["τnew",506],["++",506],["--",506],["τdelete",506],["τvoid",506],["τtypeof",506],["+",506],["-",506],["~",506],["τawait",506],["τvar",506],[";",506],["τif",506],["τdo",506],["τwhile",506],["τfor",506],["τswitch",506],["τcontinue",506],["τbreak",506],["τreturn",506],["τwith",506],["τthrow",506],["τtry",506],["τdebugger",506],["τlet",506],["τconst",506],["}",506],["τelse",506],["τcase",506],["τdefault",506],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["$",507],["{",507],["τthis",507],["θid",507],["τtrue",507],["τfalse",507],["τnull",507],["θstr",507],["θnum",507],["[",507],["τfunction",507],["τclass",507],["(",507],["τsuper",507],["τnew",507],["++",507],["--",507],["τdelete",507],["τvoid",507],["τtypeof",507],["+",507],["-",507],["~",507],["τawait",507],["τvar",507],[";",507],["τif",507],["τdo",507],["τwhile",507],["τfor",507],["τswitch",507],["τcontinue",507],["τbreak",507],["τreturn",507],["τwith",507],["τthrow",507],["τtry",507],["τdebugger",507],["τlet",507],["τconst",507],["}",507],["τelse",507],["τcase",507],["τdefault",507],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["$",508],["{",508],["τthis",508],["θid",508],["τtrue",508],["τfalse",508],["τnull",508],["θstr",508],["θnum",508],["[",508],["τfunction",508],["τclass",508],["(",508],["τsuper",508],["τnew",508],["++",508],["--",508],["τdelete",508],["τvoid",508],["τtypeof",508],["+",508],["-",508],["~",508],["τawait",508],["τvar",508],[";",508],["τif",508],["τdo",508],["τwhile",508],["τfor",508],["τswitch",508],["τcontinue",508],["τbreak",508],["τreturn",508],["τwith",508],["τthrow",508],["τtry",508],["τdebugger",508],["τlet",508],["τconst",508],["}",508],["τelse",508],["τcase",508],["τdefault",508],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["$",509],["{",509],["τthis",509],["θid",509],["τtrue",509],["τfalse",509],["τnull",509],["θstr",509],["θnum",509],["[",509],["τfunction",509],["τclass",509],["(",509],["τsuper",509],["τnew",509],["++",509],["--",509],["τdelete",509],["τvoid",509],["τtypeof",509],["+",509],["-",509],["~",509],["τawait",509],["τvar",509],[";",509],["τif",509],["τdo",509],["τwhile",509],["τfor",509],["τswitch",509],["τcontinue",509],["τbreak",509],["τreturn",509],["τwith",509],["τthrow",509],["τtry",509],["τdebugger",509],["τlet",509],["τconst",509],["}",509],["τelse",509],["τcase",509],["τdefault",509],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[")",510],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["}",511],["τcase",457],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["$",512],["{",512],["τthis",512],["θid",512],["τtrue",512],["τfalse",512],["τnull",512],["θstr",512],["θnum",512],["[",512],["τfunction",512],["τclass",512],["(",512],["τsuper",512],["τnew",512],["++",512],["--",512],["τdelete",512],["τvoid",512],["τtypeof",512],["+",512],["-",512],["~",512],["τawait",512],["τvar",512],[";",512],["τif",512],["τdo",512],["τwhile",512],["τfor",512],["τswitch",512],["τcontinue",512],["τbreak",512],["τreturn",512],["τwith",512],["τthrow",512],["τtry",512],["τdebugger",512],["τlet",512],["τconst",512],["}",512],["τelse",512],["τcase",512],["τdefault",512],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["τdefault",513],["τcase",513],["}",513],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["}",514],["τcase",457],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[":",515],[",",51],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["$",516],["τfinally",516],["{",516],["τthis",516],["θid",516],["τtrue",516],["τfalse",516],["τnull",516],["θstr",516],["θnum",516],["[",516],["τfunction",516],["τclass",516],["(",516],["τsuper",516],["τnew",516],["++",516],["--",516],["τdelete",516],["τvoid",516],["τtypeof",516],["+",516],["-",516],["~",516],["τawait",516],["τvar",516],[";",516],["τif",516],["τdo",516],["τwhile",516],["τfor",516],["τswitch",516],["τcontinue",516],["τbreak",516],["τreturn",516],["τwith",516],["τthrow",516],["τtry",516],["τdebugger",516],["τlet",516],["τconst",516],["}",516],["τelse",516],["τcase",516],["τdefault",516],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["$",517],["{",517],["τthis",517],["θid",517],["τtrue",517],["τfalse",517],["τnull",517],["θstr",517],["θnum",517],["τfunction",517],["τclass",517],["τsuper",517],["τnew",517],["τdelete",517],["τvoid",517],["τtypeof",517],["~",517],["τawait",517],["τvar",517],["τif",517],["τdo",517],["τwhile",517],["τfor",517],["τswitch",517],["τcontinue",517],["τbreak",517],["τreturn",517],["τwith",517],["τthrow",517],["τtry",517],["τdebugger",517],["τlet",517],["τconst",517],["}",517],[";",517],["[",517],[".",517],["(",517],["++",517],["--",517],["*",517],["/",517],["%",517],["+",517],["-",517],["<<",517],[">>",517],[">>>",517],["<",517],[">",517],["<=",517],[">=",517],["τinstanceof",517],["τin",517],["==",517],["!=",517],["===",517],["!==",517],["&",517],["^",517],["|",517],["&&",517],["||",517],["?",517],[",",517],["**",517],["=",517],["*=",517],["/=",517],["%=",517],["+=",517],["-=",517],["<<=",517],[">>=",517],[">>>=",517],["&=",517],["^=",517],["|=",517],["**=",517],["]",517],[")",517],[":",517],["τof",517],["τelse",517],["τcase",517],["τdefault",517],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["}",518],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["}",519],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["}",520],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["$",521],["{",521],["τthis",521],["θid",521],["τtrue",521],["τfalse",521],["τnull",521],["θstr",521],["θnum",521],["[",521],["τfunction",521],["τclass",521],["(",521],["τsuper",521],["τnew",521],["++",521],["--",521],["τdelete",521],["τvoid",521],["τtypeof",521],["+",521],["-",521],["~",521],["τawait",521],["τvar",521],[";",521],["τif",521],["τdo",521],["τwhile",521],["τfor",521],["τswitch",521],["τcontinue",521],["τbreak",521],["τreturn",521],["τwith",521],["τthrow",521],["τtry",521],["τdebugger",521],["τlet",521],["τconst",521],["}",521],["τelse",521],["τcase",521],["τdefault",521],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["$",522],["{",522],["τthis",522],["θid",522],["τtrue",522],["τfalse",522],["τnull",522],["θstr",522],["θnum",522],["[",522],["τfunction",522],["τclass",522],["(",522],["τsuper",522],["τnew",522],["++",522],["--",522],["τdelete",522],["τvoid",522],["τtypeof",522],["+",522],["-",522],["~",522],["τawait",522],["τvar",522],[";",522],["τif",522],["τdo",522],["τwhile",522],["τfor",522],["τswitch",522],["τcontinue",522],["τbreak",522],["τreturn",522],["τwith",522],["τthrow",522],["τtry",522],["τdebugger",522],["τlet",522],["τconst",522],["}",522],["τelse",522],["τcase",522],["τdefault",522],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["$",523],["{",523],["τthis",523],["θid",523],["τtrue",523],["τfalse",523],["τnull",523],["θstr",523],["θnum",523],["[",523],["τfunction",523],["τclass",523],["(",523],["τsuper",523],["τnew",523],["++",523],["--",523],["τdelete",523],["τvoid",523],["τtypeof",523],["+",523],["-",523],["~",523],["τawait",523],["τvar",523],[";",523],["τif",523],["τdo",523],["τwhile",523],["τfor",523],["τswitch",523],["τcontinue",523],["τbreak",523],["τreturn",523],["τwith",523],["τthrow",523],["τtry",523],["τdebugger",523],["τlet",523],["τconst",523],["}",523],["τelse",523],["τcase",523],["τdefault",523],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([[")",524],[",",51],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["$",525],["{",525],["τthis",525],["θid",525],["τtrue",525],["τfalse",525],["τnull",525],["θstr",525],["θnum",525],["[",525],["τfunction",525],["τclass",525],["(",525],["τsuper",525],["τnew",525],["++",525],["--",525],["τdelete",525],["τvoid",525],["τtypeof",525],["+",525],["-",525],["~",525],["τawait",525],["τvar",525],[";",525],["τif",525],["τdo",525],["τwhile",525],["τfor",525],["τswitch",525],["τcontinue",525],["τbreak",525],["τreturn",525],["τwith",525],["τthrow",525],["τtry",525],["τdebugger",525],["τlet",525],["τconst",525],["}",525],["τelse",525],["τcase",525],["τdefault",525],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["$",526],["{",526],["τthis",526],["θid",526],["τtrue",526],["τfalse",526],["τnull",526],["θstr",526],["θnum",526],["[",526],["τfunction",526],["τclass",526],["(",526],["τsuper",526],["τnew",526],["++",526],["--",526],["τdelete",526],["τvoid",526],["τtypeof",526],["+",526],["-",526],["~",526],["τawait",526],["τvar",526],[";",526],["τif",526],["τdo",526],["τwhile",526],["τfor",526],["τswitch",526],["τcontinue",526],["τbreak",526],["τreturn",526],["τwith",526],["τthrow",526],["τtry",526],["τdebugger",526],["τlet",526],["τconst",526],["}",526],["τelse",526],["τcase",526],["τdefault",526],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["$",527],["{",527],["τthis",527],["θid",527],["τtrue",527],["τfalse",527],["τnull",527],["θstr",527],["θnum",527],["[",527],["τfunction",527],["τclass",527],["(",527],["τsuper",527],["τnew",527],["++",527],["--",527],["τdelete",527],["τvoid",527],["τtypeof",527],["+",527],["-",527],["~",527],["τawait",527],["τvar",527],[";",527],["τif",527],["τdo",527],["τwhile",527],["τfor",527],["τswitch",527],["τcontinue",527],["τbreak",527],["τreturn",527],["τwith",527],["τthrow",527],["τtry",527],["τdebugger",527],["τlet",527],["τconst",527],["}",527],["τelse",527],["τcase",527],["τdefault",527],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["$",528],["{",528],["τthis",528],["θid",528],["τtrue",528],["τfalse",528],["τnull",528],["θstr",528],["θnum",528],["[",528],["τfunction",528],["τclass",528],["(",528],["τsuper",528],["τnew",528],["++",528],["--",528],["τdelete",528],["τvoid",528],["τtypeof",528],["+",528],["-",528],["~",528],["τawait",528],["τvar",528],[";",528],["τif",528],["τdo",528],["τwhile",528],["τfor",528],["τswitch",528],["τcontinue",528],["τbreak",528],["τreturn",528],["τwith",528],["τthrow",528],["τtry",528],["τdebugger",528],["τlet",528],["τconst",528],["}",528],["τelse",528],["τcase",528],["τdefault",528],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["$",529],["{",529],["τthis",529],["θid",529],["τtrue",529],["τfalse",529],["τnull",529],["θstr",529],["θnum",529],["[",529],["τfunction",529],["τclass",529],["(",529],["τsuper",529],["τnew",529],["++",529],["--",529],["τdelete",529],["τvoid",529],["τtypeof",529],["+",529],["-",529],["~",529],["τawait",529],["τvar",529],[";",529],["τif",529],["τdo",529],["τwhile",529],["τfor",529],["τswitch",529],["τcontinue",529],["τbreak",529],["τreturn",529],["τwith",529],["τthrow",529],["τtry",529],["τdebugger",529],["τlet",529],["τconst",529],["}",529],["τelse",529],["τcase",529],["τdefault",529],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["}",530],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["$",531],["{",531],["τthis",531],["θid",531],["τtrue",531],["τfalse",531],["τnull",531],["θstr",531],["θnum",531],["[",531],["τfunction",531],["τclass",531],["(",531],["τsuper",531],["τnew",531],["++",531],["--",531],["τdelete",531],["τvoid",531],["τtypeof",531],["+",531],["-",531],["~",531],["τawait",531],["τvar",531],[";",531],["τif",531],["τdo",531],["τwhile",531],["τfor",531],["τswitch",531],["τcontinue",531],["τbreak",531],["τreturn",531],["τwith",531],["τthrow",531],["τtry",531],["τdebugger",531],["τlet",531],["τconst",531],["}",531],["τelse",531],["τcase",531],["τdefault",531],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["τdefault",532],["τcase",532],["}",532],["{",2],["τdelete",3],["τvoid",4],["τtypeof",5],["+",6],["-",7],["~",8],["!",9],["++",10],["--",11],["τnew",12],["τthis",13],["θid",14],["τtrue",15],["τfalse",16],["τnull",17],["θstr",18],["θnum",19],["[",20],["(",21],["τsuper",22],["τawait",23],["τvar",24],[";",25],["τif",26],["τdo",27],["τwhile",28],["τfor",29],["τswitch",30],["τcontinue",31],["τbreak",32],["τreturn",33],["τwith",34],["τthrow",35],["τtry",36],["τdebugger",37],["τclass",38],["τfunction",39],["τlet",40],["τconst",41],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["τcase",533],["}",533],["{",2],["τdelete",3],["τvoid",4],["τtypeof",5],["+",6],["-",7],["~",8],["!",9],["++",10],["--",11],["τnew",12],["τthis",13],["θid",14],["τtrue",15],["τfalse",16],["τnull",17],["θstr",18],["θnum",19],["[",20],["(",21],["τsuper",22],["τawait",23],["τvar",24],[";",25],["τif",26],["τdo",27],["τwhile",28],["τfor",29],["τswitch",30],["τcontinue",31],["τbreak",32],["τreturn",33],["τwith",34],["τthrow",35],["τtry",36],["τdebugger",37],["τclass",38],["τfunction",39],["τlet",40],["τconst",41],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["$",534],["{",534],["τthis",534],["θid",534],["τtrue",534],["τfalse",534],["τnull",534],["θstr",534],["θnum",534],["τfunction",534],["τclass",534],["τsuper",534],["τnew",534],["τdelete",534],["τvoid",534],["τtypeof",534],["~",534],["τawait",534],["τvar",534],["τif",534],["τdo",534],["τwhile",534],["τfor",534],["τswitch",534],["τcontinue",534],["τbreak",534],["τreturn",534],["τwith",534],["τthrow",534],["τtry",534],["τdebugger",534],["τlet",534],["τconst",534],["}",534],[";",534],["[",534],[".",534],["(",534],["++",534],["--",534],["*",534],["/",534],["%",534],["+",534],["-",534],["<<",534],[">>",534],[">>>",534],["<",534],[">",534],["<=",534],[">=",534],["τinstanceof",534],["τin",534],["==",534],["!=",534],["===",534],["!==",534],["&",534],["^",534],["|",534],["&&",534],["||",534],["?",534],[",",534],["**",534],["=",534],["*=",534],["/=",534],["%=",534],["+=",534],["-=",534],["<<=",534],[">>=",534],[">>>=",534],["&=",534],["^=",534],["|=",534],["**=",534],["]",534],[")",534],[":",534],["τof",534],["τelse",534],["τcase",534],["τdefault",534],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["}",535],[",",535],["θid",535],["θstr",535],["θnum",535],["[",535],["τget",535],["τset",535],["τstatic",535],[";",535],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["}",536],[",",536],["θid",536],["θstr",536],["θnum",536],["[",536],["τget",536],["τset",536],["τstatic",536],[";",536],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["}",537],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["$",538],["{",538],["τthis",538],["θid",538],["τtrue",538],["τfalse",538],["τnull",538],["θstr",538],["θnum",538],["[",538],["τfunction",538],["τclass",538],["(",538],["τsuper",538],["τnew",538],["++",538],["--",538],["τdelete",538],["τvoid",538],["τtypeof",538],["+",538],["-",538],["~",538],["τawait",538],["τvar",538],[";",538],["τif",538],["τdo",538],["τwhile",538],["τfor",538],["τswitch",538],["τcontinue",538],["τbreak",538],["τreturn",538],["τwith",538],["τthrow",538],["τtry",538],["τdebugger",538],["τlet",538],["τconst",538],["}",538],["τelse",538],["τcase",538],["τdefault",538],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["$",539],["{",539],["τthis",539],["θid",539],["τtrue",539],["τfalse",539],["τnull",539],["θstr",539],["θnum",539],["[",539],["τfunction",539],["τclass",539],["(",539],["τsuper",539],["τnew",539],["++",539],["--",539],["τdelete",539],["τvoid",539],["τtypeof",539],["+",539],["-",539],["~",539],["τawait",539],["τvar",539],[";",539],["τif",539],["τdo",539],["τwhile",539],["τfor",539],["τswitch",539],["τcontinue",539],["τbreak",539],["τreturn",539],["τwith",539],["τthrow",539],["τtry",539],["τdebugger",539],["τlet",539],["τconst",539],["}",539],["τelse",539],["τcase",539],["τdefault",539],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["$",540],["{",540],["τthis",540],["θid",540],["τtrue",540],["τfalse",540],["τnull",540],["θstr",540],["θnum",540],["[",540],["τfunction",540],["τclass",540],["(",540],["τsuper",540],["τnew",540],["++",540],["--",540],["τdelete",540],["τvoid",540],["τtypeof",540],["+",540],["-",540],["~",540],["τawait",540],["τvar",540],[";",540],["τif",540],["τdo",540],["τwhile",540],["τfor",540],["τswitch",540],["τcontinue",540],["τbreak",540],["τreturn",540],["τwith",540],["τthrow",540],["τtry",540],["τdebugger",540],["τlet",540],["τconst",540],["}",540],["τelse",540],["τcase",540],["τdefault",540],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["$",541],["{",541],["τthis",541],["θid",541],["τtrue",541],["τfalse",541],["τnull",541],["θstr",541],["θnum",541],["[",541],["τfunction",541],["τclass",541],["(",541],["τsuper",541],["τnew",541],["++",541],["--",541],["τdelete",541],["τvoid",541],["τtypeof",541],["+",541],["-",541],["~",541],["τawait",541],["τvar",541],[";",541],["τif",541],["τdo",541],["τwhile",541],["τfor",541],["τswitch",541],["τcontinue",541],["τbreak",541],["τreturn",541],["τwith",541],["τthrow",541],["τtry",541],["τdebugger",541],["τlet",541],["τconst",541],["}",541],["τelse",541],["τcase",541],["τdefault",541],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["$",542],["{",542],["τthis",542],["θid",542],["τtrue",542],["τfalse",542],["τnull",542],["θstr",542],["θnum",542],["[",542],["τfunction",542],["τclass",542],["(",542],["τsuper",542],["τnew",542],["++",542],["--",542],["τdelete",542],["τvoid",542],["τtypeof",542],["+",542],["-",542],["~",542],["τawait",542],["τvar",542],[";",542],["τif",542],["τdo",542],["τwhile",542],["τfor",542],["τswitch",542],["τcontinue",542],["τbreak",542],["τreturn",542],["τwith",542],["τthrow",542],["τtry",542],["τdebugger",542],["τlet",542],["τconst",542],["}",542],["τelse",542],["τcase",542],["τdefault",542],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["τdefault",543],["τcase",543],["}",543],["{",2],["τdelete",3],["τvoid",4],["τtypeof",5],["+",6],["-",7],["~",8],["!",9],["++",10],["--",11],["τnew",12],["τthis",13],["θid",14],["τtrue",15],["τfalse",16],["τnull",17],["θstr",18],["θnum",19],["[",20],["(",21],["τsuper",22],["τawait",23],["τvar",24],[";",25],["τif",26],["τdo",27],["τwhile",28],["τfor",29],["τswitch",30],["τcontinue",31],["τbreak",32],["τreturn",33],["τwith",34],["τthrow",35],["τtry",36],["τdebugger",37],["τclass",38],["τfunction",39],["τlet",40],["τconst",41],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["}",544],[",",544],["θid",544],["θstr",544],["θnum",544],["[",544],["τget",544],["τset",544],["τstatic",544],[";",544],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["$",545],["{",545],["τthis",545],["θid",545],["τtrue",545],["τfalse",545],["τnull",545],["θstr",545],["θnum",545],["[",545],["τfunction",545],["τclass",545],["(",545],["τsuper",545],["τnew",545],["++",545],["--",545],["τdelete",545],["τvoid",545],["τtypeof",545],["+",545],["-",545],["~",545],["τawait",545],["τvar",545],[";",545],["τif",545],["τdo",545],["τwhile",545],["τfor",545],["τswitch",545],["τcontinue",545],["τbreak",545],["τreturn",545],["τwith",545],["τthrow",545],["τtry",545],["τdebugger",545],["τlet",545],["τconst",545],["}",545],["τelse",545],["τcase",545],["τdefault",545],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]])],
state = [sm[0],
sm[1],
sm[2],
sm[3],
sm[4],
sm[5],
sm[6],
sm[6],
sm[7],
sm[7],
sm[7],
sm[7],
sm[7],
sm[7],
sm[7],
sm[7],
sm[7],
sm[7],
sm[7],
sm[7],
sm[7],
sm[7],
sm[8],
sm[9],
sm[10],
sm[11],
sm[12],
sm[12],
sm[13],
sm[14],
sm[15],
sm[16],
sm[17],
sm[18],
sm[19],
sm[20],
sm[21],
sm[22],
sm[23],
sm[24],
sm[25],
sm[26],
sm[27],
sm[27],
sm[27],
sm[27],
sm[27],
sm[27],
sm[27],
sm[28],
sm[27],
sm[27],
sm[29],
sm[30],
sm[31],
sm[32],
sm[33],
sm[33],
sm[33],
sm[34],
sm[35],
sm[35],
sm[36],
sm[35],
sm[35],
sm[37],
sm[38],
sm[39],
sm[40],
sm[41],
sm[41],
sm[41],
sm[41],
sm[42],
sm[42],
sm[43],
sm[44],
sm[45],
sm[46],
sm[47],
sm[48],
sm[49],
sm[50],
sm[50],
sm[27],
sm[51],
sm[52],
sm[53],
sm[54],
sm[55],
sm[56],
sm[57],
sm[57],
sm[58],
sm[59],
sm[60],
sm[61],
sm[62],
sm[63],
sm[64],
sm[65],
sm[27],
sm[66],
sm[67],
sm[68],
sm[68],
sm[68],
sm[69],
sm[70],
sm[71],
sm[54],
sm[72],
sm[73],
sm[74],
sm[75],
sm[76],
sm[27],
sm[27],
sm[27],
sm[77],
sm[78],
sm[79],
sm[79],
sm[79],
sm[79],
sm[79],
sm[79],
sm[79],
sm[79],
sm[79],
sm[79],
sm[79],
sm[79],
sm[27],
sm[27],
sm[27],
sm[27],
sm[27],
sm[27],
sm[27],
sm[27],
sm[27],
sm[27],
sm[27],
sm[27],
sm[27],
sm[27],
sm[27],
sm[27],
sm[27],
sm[27],
sm[27],
sm[27],
sm[27],
sm[27],
sm[27],
sm[27],
sm[27],
sm[80],
sm[28],
sm[81],
sm[82],
sm[83],
sm[84],
sm[85],
sm[86],
sm[87],
sm[88],
sm[89],
sm[90],
sm[91],
sm[92],
sm[93],
sm[94],
sm[95],
sm[96],
sm[97],
sm[27],
sm[98],
sm[27],
sm[96],
sm[99],
sm[100],
sm[31],
sm[101],
sm[102],
sm[103],
sm[104],
sm[105],
sm[106],
sm[107],
sm[107],
sm[108],
sm[27],
sm[109],
sm[110],
sm[54],
sm[96],
sm[27],
sm[111],
sm[112],
sm[113],
sm[114],
sm[115],
sm[116],
sm[117],
sm[118],
sm[119],
sm[120],
sm[121],
sm[121],
sm[122],
sm[123],
sm[27],
sm[124],
sm[27],
sm[125],
sm[126],
sm[27],
sm[127],
sm[128],
sm[129],
sm[130],
sm[131],
sm[132],
sm[133],
sm[27],
sm[134],
sm[135],
sm[136],
sm[137],
sm[138],
sm[139],
sm[140],
sm[141],
sm[142],
sm[143],
sm[144],
sm[145],
sm[119],
sm[119],
sm[146],
sm[147],
sm[148],
sm[148],
sm[149],
sm[150],
sm[151],
sm[152],
sm[153],
sm[154],
sm[155],
sm[156],
sm[157],
sm[158],
sm[159],
sm[160],
sm[161],
sm[162],
sm[163],
sm[164],
sm[165],
sm[166],
sm[167],
sm[168],
sm[169],
sm[170],
sm[171],
sm[172],
sm[173],
sm[174],
sm[175],
sm[176],
sm[177],
sm[178],
sm[179],
sm[178],
sm[27],
sm[180],
sm[181],
sm[181],
sm[182],
sm[183],
sm[183],
sm[27],
sm[184],
sm[184],
sm[185],
sm[186],
sm[187],
sm[188],
sm[189],
sm[27],
sm[190],
sm[191],
sm[192],
sm[193],
sm[194],
sm[195],
sm[196],
sm[196],
sm[197],
sm[198],
sm[199],
sm[200],
sm[201],
sm[202],
sm[203],
sm[204],
sm[205],
sm[206],
sm[207],
sm[208],
sm[9],
sm[209],
sm[210],
sm[210],
sm[211],
sm[54],
sm[212],
sm[27],
sm[212],
sm[213],
sm[214],
sm[215],
sm[96],
sm[216],
sm[217],
sm[218],
sm[219],
sm[220],
sm[221],
sm[222],
sm[223],
sm[54],
sm[224],
sm[225],
sm[226],
sm[227],
sm[228],
sm[229],
sm[230],
sm[231],
sm[232],
sm[54],
sm[233],
sm[234],
sm[235],
sm[54],
sm[236],
sm[237],
sm[238],
sm[239],
sm[240],
sm[241],
sm[242],
sm[243],
sm[244],
sm[245],
sm[66],
sm[246],
sm[247],
sm[248],
sm[249],
sm[250],
sm[251],
sm[252],
sm[253],
sm[252],
sm[254],
sm[255],
sm[256],
sm[257],
sm[258],
sm[259],
sm[260],
sm[261],
sm[262],
sm[142],
sm[263],
sm[54],
sm[264],
sm[264],
sm[27],
sm[265],
sm[266],
sm[267],
sm[268],
sm[269],
sm[142],
sm[27],
sm[270],
sm[271],
sm[272],
sm[273],
sm[274],
sm[275],
sm[276],
sm[277],
sm[278],
sm[279],
sm[279],
sm[280],
sm[281],
sm[54],
sm[282],
sm[282],
sm[283],
sm[284],
sm[285],
sm[286],
sm[287],
sm[288],
sm[288],
sm[289],
sm[290],
sm[54],
sm[291],
sm[292],
sm[293],
sm[294],
sm[293],
sm[293],
sm[295],
sm[296],
sm[296],
sm[297],
sm[58],
sm[27],
sm[58],
sm[298],
sm[299],
sm[300],
sm[301],
sm[302],
sm[303],
sm[304],
sm[305],
sm[306],
sm[27],
sm[27],
sm[27],
sm[27],
sm[307],
sm[304],
sm[304],
sm[308],
sm[54],
sm[309],
sm[54],
sm[310],
sm[58],
sm[311],
sm[54],
sm[312],
sm[313],
sm[314],
sm[315],
sm[316],
sm[317],
sm[318],
sm[319],
sm[320],
sm[321],
sm[322],
sm[323],
sm[324],
sm[325],
sm[326],
sm[327],
sm[328],
sm[329],
sm[54],
sm[330],
sm[331],
sm[27],
sm[332],
sm[333],
sm[334],
sm[335],
sm[336],
sm[337],
sm[338],
sm[339],
sm[340],
sm[340],
sm[341],
sm[342],
sm[343],
sm[344],
sm[345],
sm[346],
sm[347],
sm[348],
sm[27],
sm[349],
sm[58],
sm[350],
sm[27],
sm[27],
sm[351],
sm[352],
sm[58],
sm[353],
sm[354],
sm[355],
sm[356],
sm[27],
sm[357],
sm[358],
sm[358],
sm[27],
sm[359],
sm[360],
sm[361],
sm[362],
sm[363],
sm[363],
sm[364],
sm[365],
sm[366],
sm[367],
sm[368],
sm[369],
sm[370],
sm[371],
sm[372],
sm[373],
sm[374],
sm[374],
sm[375],
sm[376],
sm[377],
sm[376],
sm[58],
sm[378],
sm[379],
sm[380],
sm[58],
sm[381],
sm[58],
sm[382],
sm[383],
sm[384],
sm[385],
sm[386],
sm[387],
sm[58],
sm[58],
sm[388],
sm[58],
sm[58],
sm[58],
sm[58],
sm[389],
sm[27],
sm[390],
sm[391],
sm[392],
sm[393],
sm[394],
sm[27],
sm[395],
sm[66],
sm[396],
sm[397],
sm[365],
sm[365],
sm[365],
sm[398],
sm[399],
sm[400],
sm[401],
sm[402],
sm[58],
sm[58],
sm[403],
sm[58],
sm[404],
sm[405],
sm[406],
sm[58],
sm[58],
sm[58],
sm[58],
sm[407],
sm[408],
sm[409],
sm[410],
sm[409],
sm[410],
sm[58],
sm[411],
sm[58],
sm[412],
sm[413],
sm[414],
sm[415],
sm[413],
sm[416],
sm[9],
sm[417],
sm[418],
sm[419],
sm[420],
sm[421],
sm[365],
sm[58],
sm[422],
sm[423],
sm[424],
sm[425],
sm[58],
sm[58],
sm[426],
sm[427],
sm[428],
sm[429],
sm[430],
sm[58],
sm[430],
sm[431],
sm[432],
sm[432],
sm[433],
sm[434],
sm[435],
sm[436],
sm[437],
sm[438],
sm[439],
sm[58],
sm[440],
sm[441],
sm[442],
sm[443],
sm[444],
sm[445],
sm[446]],
re = new Set(["import","as","from","export","default","if","else","do","while","for","var","in","of","await","continue","break","return","throw","with","switch","case","try","catch","finally","debugger","let","const","function","async","class","extends","static","get","set","new","super","target","this","instanceof","delete","void","typeof","null","true","false"]),
throw_ = ()=>{debugger},
types$1 = {"num":1,"number":1,"id":2,"identifier":2,"str":4,"string":4,"ws":8,"white_space":8,"ob":16,"open_bracket":16,"cb":32,"close_bracket":32,"op":64,"operator":64,"sym":128,"symbol":128,"nl":256,"new_line":256,"dl":512,"data_link":512,"alpha_numeric":3,"white_space_new_line":264};

function getToken(l, reserved) {
    if (l.END) return "$";

    switch (l.ty) {
        case types$1.id:
            if (reserved.has(l.tx)) return "τ" + l.tx;
            return "θid";
        case types$1.num:
            return "θnum";
        case types$1.string:
            return "θstr";
        case types$1.new_line:
            return "θnl";
        case types$1.ws:
            return "θws";
        case types$1.data_link:
            return "θdl";
        default:
            return l.tx;
    }
}

 function parser(l, e = {}){
    l.IWS = false;

    if(symbols.length > 0){
        symbols.forEach(s=> {l.addSymbol(s);});
        l.tl = 0;
        l.next();
    }

    const o = [], ss = [0,0];
    
    let time = 10000, RECOVERING = 1,
        tk = getToken(l, re), p = l.copy(), sp = 1, len = 0, off= 0;
    
    outer:

    while(time-- > 0){
        
        let fn = state[ss[sp]].get(tk) || 0, r, st = 0, gt = -1, c = 0;

        if(fn == 0xFFFFFFFF){
            //Ignore the token
            l.next();
            tk = getToken(l, re, state[ss[sp]]);
            continue;
        }

        if(fn > 0){
            r = sf[fn-1](tk, e, o, l, ss[sp-1]);
        } else {
            //Error Encountered 
            r = re[ss[sp]];
            
            const recovery_token = eh[ss[sp]](tk, e, o, l, p, ss[sp]);
            
            if(RECOVERING > 1 && typeof(recovery_token) == "string"){
                RECOVERING = 0; // To prevent infinite recursion
                tk = recovery_token;
                //reset current token
                l.tl = 0;
                continue;
            }
        }

        st = r >> 2;

        switch(r & 3){
            case 0: // ERROR
                
                if(tk == "$")
                    l.throw("Unexpected end of input");

                l.throw(`Unexpected token [${RECOVERING ? l.next().tx : l.tx}]`); 

                return [null];

            case 1: // ACCEPT
                break outer;

            case 2: //SHIFT
                o.push((tk[0] == "θ") ? l.tx : tk); 
                ss.push(off, r >> 2); 
                sp+=2; 
                p.sync(l);
                l.next(); 
                off = l.off; 
                tk = getToken(l, re, state[ss[sp]]); 
                RECOVERING++;
                break;

            case 3: // REDUCE

                len = (r & 0x3FC) >> 1;

                ss.length -= len;   
                sp -= len; 

                gt = goto[ss[sp]](r >> 10);

                if(gt < 0)
                    l.throw("Invalid state reached!");
                
                ss.push(off, gt); sp+=2; 
                break;
        }  
    }
    console.log(time);
    return o[0];
}

class base{
	constructor(){

	}
	getRootIds(ids) {}
	*traverseDepthFirst (){ return this }
	spin(trvs){
        let val = trvs.next().value;
        while(val !== undefined && val !== this ){val = trvs.next().value;}
     }
}

/** FOR **/

class for_stmt extends base{
	constructor(set,bool,iter, body){super();this.set = set; this.bool = bool, this.iter=iter, this.body = body;}
	
	getRootIds(ids, closure){
		
		closure = new Set([...closure.values()]);

		if(this.bool) this.bool.getRootIds(ids,closure);
		if(this.iter) this.iter.getRootIds(ids,closure);
		if(this.body) this.body.getRootIds(ids,closure);
	}

	*traverseDepthFirst (){ 
	 	yield this;
	 	yield * this.bool.traverseDepthFirst();
	 	yield * this.iter.traverseDepthFirst();
	 	yield * this.body.traverseDepthFirst();
	 	return this;
	 }
}

/** IDENTIFIER **/

class identifier$1 extends base{
	 constructor (sym){super(); this.val = sym[0];}
	 getRootIds(ids, closuere){if(!closuere.has(this.val))ids.add(this.val);}
	 *traverseDepthFirst (){ 
	 	return this;
	 }
}

class call_expr extends base {
    constructor(sym) {
        super();
        this.id = sym[0];
        this.args = sym[1];
    }

    getRootIds(ids, closure) {
        this.id.getRootIds(ids,closure);
        this.args.forEach(e => e.getRootIds(ids,closure));
    }

    *traverseDepthFirst (){ 
	 	yield this;
	 	yield * this.id.traverseDepthFirst();
        for(let arg of this.args)
            yield * arg.traverseDepthFirst();
	 	return this;
	 }
}

/** CATCH **/

class catch_stmt extends base {
    constructor(sym) {
        super();
        this.param = sym[2];
        this.body = sym[4];
    }

    getRootIds(ids,closure) {
        if (this.body) this.body.getRootIds(ids,closure);
    }

    *traverseDepthFirst (){ 
	 	yield this;
	 	yield * this.param.traverseDepthFirst();
	 	yield * this.body.traverseDepthFirst();
	 	return this;
	 }
}

/** TRY **/

class try_stmt extends base {
    constructor(body, _catch, _finally) {
        super();
        this.catch = _catch;
        this.body = body;
        this.finally = _finally;
    }

    getRootIds(ids,clsr) {
        this.body.getRootIds(ids,clsr);
        if (this.catch) this.catch.getRootIds(ids,clsr);
        if (this.finally) this.finally.getRootIds(ids,clsr);
    }

    *traverseDepthFirst (){ 
        yield this;
        if(this.catch) yield * this.catch.traverseDepthFirst();
        if(this.body) yield * this.body.traverseDepthFirst();
        if(this.finally) yield * this.finally.traverseDepthFirst();
        return this;
     }
}

/** STATEMENTS **/

class stmts extends base {
    constructor(sym) {
        super();
        this.stmts = sym[0];
    }

    getRootIds(ids, closure) {
        this.stmts.forEach(s=>s.getRootIds(ids, closure));
    }

    *traverseDepthFirst (){ 
	 	yield this;
	 	for(let stmt of this.stmts)
	 		yield * stmt.traverseDepthFirst();
	 	return this;
	 }
}

/** BLOCK **/

class block extends stmts {

    constructor(sym,clsr) {
        super([sym[1]]);
    }

    getRootIds(ids, closure) {
    	super.getRootIds(ids, new Set([...closure.values()]));
    }
}

/** LEXICAL DECLARATION **/

class lexical extends base {
    constructor(sym) {

    	super();
    	this.type = sym[0];
        this.bindings = sym[1];
    }

    getRootIds(ids, closure) {
    	this.bindings.forEach(b=>b.getRootIds(ids, closure));
    }
}

/** BINDING DECLARATION **/

class binding extends base {
    constructor(sym) {
    	super();
    	this.id = sym[0];
        this.init = sym[1] ? sym[1] : null;
    }

    getRootIds(ids, closure) {
    	this.id.getRootIds(closure, closure);
    	if(this.init) this.init.getRootIds(ids, closure);
    }

    *traverseDepthFirst (){ 
	 	yield this;
	 	yield * this.id.traverseDepthFirst();
	 	yield * this.init.traverseDepthFirst();
	 	return this;
	 }
}

/** IDENTIFIER **/

class member extends base{
	 constructor (sym){super(); this.id = sym[0];  this.mem = sym[2];}
	 getRootIds(ids, closuere){
	 	this.id.getRootIds(ids, closuere);
	 }

	 *traverseDepthFirst (){ 
	 	yield this;
	 	yield * this.id.traverseDepthFirst();
	 	yield * this.mem.traverseDepthFirst();
	 	return this;
	 }
}

/** ASSIGNEMENT EXPRESSION **/

class assign extends base {
    constructor(sym) {
        super();
        this.id = sym[0];
        this.op = sym[1];
        this.expr = sym[2];
    }

    getRootIds(ids, closure) {
    	this.id.getRootIds(ids, closure);
    	this.expr.getRootIds(ids, closure);
    }

    *traverseDepthFirst (){ 
        yield this;
        yield * this.id.traverseDepthFirst();
        yield * this.expr.traverseDepthFirst();
        return this;
     }

     
}

/** OPERATOR **/

class operator$1 extends base {

    constructor(sym) {
        super();
        this.left = sym[0];
        this.right = sym[2];
    }

    *traverseDepthFirst (){ 
	 	yield this;
	 	yield * this.left.traverseDepthFirst();
	 	yield * this.right.traverseDepthFirst();
	 	return this;
	 }
}

/** MULTIPLY **/

class add extends operator$1 {

    constructor(sym) {
        super(sym);
    }
}

/** MULTIPLY **/

class sub extends operator$1 {

    constructor(sym) {
        super(sym);
    }
}

/** MULTIPLY **/

class div extends operator$1 {

    constructor(sym) {
        super(sym);
    }
}

/** MULTIPLY **/

class mult extends operator$1 {

    constructor(sym) {
        super(sym);
    }
}

/** ASSIGNEMENT EXPRESSION **/

class object extends base {
    constructor(sym) {
        super();
        this.props = sym[0] || [];
    }

    * traverseDepthFirst (){ 
	 	yield this;
	 	for(let prop of this.props)
	 		yield * prop.traverseDepthFirst();
	 	return this;
	 }
}

/** STRING **/

class string$2 extends base{
	 constructor (sym){super(); this.val = sym[0];}
	 getRootIds(ids, closuere){if(!closuere.has(this.val))ids.add(this.val);}
}

/** NULL **/

class null_ extends base{
	 constructor (sym){super();}
}

/** NUMBER **/

class number$2 extends base{
	 constructor (sym){super();this.val = parseFloat(sym); this.ty = "num";}
}

/** BOOLEAN **/

class bool$1 extends base{
	 constructor (sym){super();this.val = sym[0].slice(1) == "true";}
}

const env =  {
	table:{},
	ASI:true,
	functions:{
		for_stmt,
		call_expr,
		identifier: identifier$1,
		catch_stmt,
		try_stmt,
		stmts,
		lexical,
		binding,
		member,
		block,
		assign,
		object,
		add,
		sub,
		div,
		mult,
		if_stmt:function(sym){this.bool = sym[2]; this.body = sym[4]; this.else = sym[6];},
		while_stmt:function(sym){this.bool = sym[1]; this.body = sym[3];},
		return_stmt:function(sym){this.expr = sym[1];},
		class_stmt: function(sym){this.id = sym[1], this.tail= sym[2];},
		class_tail:function(sym){this.heritage = sym[0]; this.body = sym[2];},
		debugger_stmt: base,
		lex_stmt: function(sym){this.ty = sym[0]; this.declarations = sym[1];},
		var_stmt: function(sym){this.declarations = sym[1], console.log(sym);},
		member_expr: function(sym){this.id = sym[0]; this.expr = sym[2];},
		add_expr : function (sym){this.le = sym[0]; this.re=sym[2]; this.ty = "ADD";},
		or_expr : function (sym){this.le = sym[0]; this.re=sym[2]; this.ty = "OR";},
		and_expr : function (sym){this.le = sym[0]; this.re=sym[2]; this.ty = "AND";},
		sub_expr : function (sym){this.le = sym[0]; this.re=sym[2]; this.ty = "SUB";},
		mult_expr : function (sym){this.le = sym[0]; this.re=sym[2]; this.ty = "MUL";},
		div_expr : function (sym){this.le = sym[0]; this.re=sym[2]; this.ty = "DIV";},
		mod_expr : function (sym){this.le = sym[0]; this.re=sym[2]; this.ty = "MOD";},
		lt_expr : function (sym){this.le = sym[0]; this.re=sym[2]; this.ty = "LT";},
		gt_expr : function (sym){this.le = sym[0]; this.re=sym[2]; this.ty = "GT";},
		lte_expr : function (sym){this.le = sym[0]; this.re=sym[2]; this.ty = "LTE";},
		gte_expr : function (sym){this.le = sym[0]; this.re=sym[2]; this.ty = "GTE";},
		eq_expr : function (sym){this.le = sym[0]; this.re=sym[2]; this.ty = "EQ";},
		seq_expr : function (sym){this.le = sym[0]; this.re=sym[2]; this.ty = "STRICT_EQ";},
		neq_expr : function (sym){this.le = sym[0]; this.re=sym[2]; this.ty = "NEQ";},
		sneq_expr : function (sym){this.le = sym[0]; this.re=sym[2]; this.ty = "STRICT_NEQ";},
		unary_not_expr : function (sym){this.expr = sym[1]; this.ty = "NOT";},
		unary_plus : function (sym){this.expr = sym[1]; this.ty = "PRE INCR";},
		unary_minus : function (sym){this.expr = sym[1]; this.ty = "PRE INCR";},
		pre_inc_expr : function (sym){this.expr = sym[1]; this.ty = "PRE INCR";},
		pre_dec_expr : function (sym){this.expr = sym[1]; this.ty = "PRE DEC";},
		post_inc_expr : function (sym){this.expr = sym[0]; this.ty = "POST INCR";},
		post_dec_expr : function (sym){this.expr = sym[0]; this.ty = "POST DEC";},
		condition_expr : function (sym){this.condition = sym[0]; this.le = sym[2]; this.re = sym[4];},
		null_literal :null_,
		numeric_literal : number$2,
		bool_literal : bool$1,
		string_literal : string$2,
		label_stmt : function(sym){this.label =sym[0]; this.stmt = sym[1];},
		funct_decl: function(id,args,body){this.id = id || "Anonymous"; this.args = args; this.body = body, this.scope = false;},
		this_expr: function(){},
		defaultError: (tk, env, output, lex, prv_lex) => {
            /*USED for ASI*/
            if (env.ASI && lex.tx !== ")" && !lex.END) {
                let ENCOUNTERED_NL = (lex.tx == "}" || lex.END);

                while (!ENCOUNTERED_NL && !prv_lex.END && prv_lex.off < lex.off) {
                    prv_lex.next();
                    if (prv_lex.ty == prv_lex.types.nl)
                        ENCOUNTERED_NL = true;
                }

	            if (ENCOUNTERED_NL)
	                return ";";
            }

            if(lex.END)
            	return ";";

            return null;
        }

	},


	options : {
		integrate : false,
		onstart : ()=>{
			console.log("SDFS");
			env.table = {};
        	env.ASI = true;	
        }
	}
};

var JSTools = {
	validate(lex){
		let l = lex.copy();

		console.log(l.slice());
		try{
			let result = parser(lex, env);
			console.log(result);
			return true;
		}catch(e){
			console.error(e);
			return false;
		}
	},

	getRootVariables(lex){
		let l = lex.copy();
		
		let ids = new Set();
		let closure = new Set();

		try{
			let result = parser(lex, env)[0];

			if(result instanceof identifier$1){
				ids.add(result.val);
			}else
				result.getRootIds(ids, closure);

			console.log(ids);

			return {ids, ast:result, SUCCESS : true}
		}catch(e){
			console.error(e);
			return {ids, ast:null, SUCCESS : false};
		}
	}
};

const BannedIdentifiers = { "true": true, "false": 1, "class": 1, "function": 1, "return": 1, "for": 1, "new": 1, "let": 1, "var": 1, "const": 1, "Date": 1, "null": 1, "parseFloat": 1, "parseInt": 1 };

function setIdentifier(id, store, cache) {
    if (!cache[id] && !BannedIdentifiers[id]) {
        store.push(id);
        cache[id] = true;
    }
}

function processExpression(lex, binds) {



    /* 
     * The token after the second sentinel does not cover the entire bind range.
     * So the text with in the bind range should be a multi token token JS expression. 
     * We should extract all identifiers and use them to create bind points for an ExpressionIO.
     * 
     * The expression should work with a function return statement, as in:
     * ```javasript
     * "return (implied)" name ? "User has a name!" : "User does not have a name!"
     * ```
     */

    const bind_ids = [];

    const function_string = lex.slice();

    const existing_names = {};

    /**TODO? - This could be replaced by a plugin to ensure proper Javascript expressions. Perhaps producing a JS AST */
    let args = JSExpressionIdentifiers(lex), funct;


    for (let i = 0, l = args.length; i < l; i++)
        setIdentifier(args[i], bind_ids, existing_names);

    bind_ids.push(`return ${function_string}`);

    try{
        funct = (Function).apply(null, bind_ids);
    }catch(e){
        console.error(bind_ids[bind_ids.length -1]);
        console.error(e);
        return;
    }

    const bindings = [];

    for (let i = 0, l = bind_ids.length - 1; i < l; i++) {
        let binding = new DynamicBinding();
        binding.tap_name = bind_ids[i];
        bindings.push(binding);
    }

    binds.push(new ExpressionBinding(bindings, funct));
}

/**
 * { function_description }
 * @memberof   module:wick~internals.compiler
 * @param      {Lexer}  lex     The lex
 * @return     {Array}   an
 */
function evaluate(lex, EVENT$$1 = false) {
    let binds = [];
    lex.IWS = false;
    let start = lex.pos;

    while (!lex.END && lex.ty !== lex.types.str) {
        switch (lex.ch) {
            case barrier_a_start:
                if (lex.pk.ch == barrier_b_start || lex.p.ch == barrier_a_start) {

                    let sentinel = (lex.p.ch == barrier_a_start) ? barrier_a_end : barrier_b_end;

                    let pk2 = lex.p.pk;


                    if (pk2.ch == barrier_b_start) {
                        sentinel = barrier_b_end;
                        if (start < lex.p.pos)
                            binds.push(new RawValueBinding(lex.p.slice(start)));

                        lex.p.sync();
                    } else if (start < lex.pos) {

                        binds.push(new RawValueBinding(lex.slice(start)));
                    } //create text node


                    lex.sync().n;
                    lex.IWS = true; // Do not produce white space tokens during this portion.
                    let pk = lex.pk;
                    let Message = false;


                    while (!pk.END && (pk.ch !== sentinel || (pk.pk.ch !== barrier_a_end && pk.p.ch !== barrier_a_start) || (pk.p.n.ch === barrier_a_end))) {
                        let prev = pk.ch;
                        pk.n;
                        if (pk.ch == barrier_a_start && prev == barrier_a_end)
                            Message = true;
                    }


                    if (lex.tl < pk.off - lex.off - 1 && !Message) {
                        /***** Start Expression *******/

                        const elex = lex.copy(); //The expression Lexer

                        elex.fence(pk);

                        lex.sync();

                        if (pk.END) //Should still have `))` or `|)` in the input string
                            throw new Error("Should be more to this!");

                        processExpression(elex, binds);

                        lex.a(sentinel);
                        /***** End Expression ********/
                    } else {

                        /************************** Start Single Identifier Binding *******************************/
                        if(lex.pk.END) // binding is not closed
                            break; 

                        let id = lex.tx;

                        let binding = new DynamicBinding();
                        binding.tap_name = id;
                        let index = binds.push(binding) - 1;


                        lex.n.a(sentinel);

                        /***************************** Looking for Event Bindings ******************************************/

                        if (lex.ch == barrier_a_start || lex.ch == barrier_b_start) {

                            if(EVENT$$1){
                                binding = new EventBinding(binding); 
                                binds[index] = binding;
                            }

                            let sentinel = (lex.ch == barrier_a_start) ? barrier_a_end : barrier_b_end;

                            lex.IWS = true; // Do not produce white space tokens during this portion.

                            let pk = lex.pk;

                            while (!pk.END && (pk.ch !== sentinel || (pk.pk.ch !== barrier_a_end))) { pk.n; }

                            lex.n;

                            if (lex.tl < pk.off - lex.off || BannedIdentifiers[lex.tx]) {

                                const elex = lex.copy(); //The expression Lexer

                                elex.fence(pk);

                                lex.sync();

                                if (pk.END) //Should still have `))` or `|)` in the input string
                                    throw new Error("Should be more to this!");

                                const event_binds = [];

                                processExpression(elex, event_binds);

                                binding.argument = event_binds[0];

                                lex.a(sentinel);

                            } else {

                                if (lex.ch !== sentinel) {
                                    let id = lex.tx, arg_binding = null;
                                    if (lex.ty !== lex.types.id) {
                                        switch (lex.ty) {
                                            case lex.types.num:
                                                arg_binding = new RawValueBinding(parseFloat(id));
                                                break;
                                            case lex.types.str:
                                                arg_binding = new RawValueBinding(id.slice(1, -1));
                                                break;
                                            default:
                                                arg_binding = new RawValueBinding(id.slice);
                                        }
                                    } else {
                                        arg_binding = new DynamicBinding();
                                        arg_binding.tap_name = id;
                                    }
                                    binding.argument = arg_binding;
                                    lex.n;
                                }
                                lex.a(sentinel);
                            }
                        }
                    }

                    lex.IWS = false;

                    start = lex.off + 1; //Should at the sentinel.

                    lex.a(barrier_a_end);

                    continue;
                }

                break;
        }

        lex.next();
    }

    if (start < lex.off) {
        lex.off = start;
        lex.END = false;
        lex.tl = 0;
        lex.END = false;

        let DATA_END = start;

        while (!lex.n.END)
            if (!(lex.ty & (lex.types.ws | lex.types.nl)))
                DATA_END = lex.off + lex.tl;

        if (DATA_END > start) {
            lex.sl = DATA_END;
            //Need to replace HTML escaped values back to actuall character values. 
            binds.push(new RawValueBinding(lex.slice(start)));
        }
    }
    return binds;
}

function Template(lex, FOR_EVENT) {
    let binds = evaluate(lex, FOR_EVENT);
    if (binds.length > 0) {
    if (binds.length == 1)
            return binds[0];
        return new OutTemplate(binds);
    }
    return null;
}

function OutTemplate(binds = []) {
    this.bindings = binds;
}

OutTemplate.prototype = {
    method: 0,

    attr: "",

    bindings: null,

    _bind_: function(scope, errors, taps, element, attr) {

        if (this.method == ATTRIB || this.method == INPUT)
            return new AttribTemplate(scope, errors, taps, attr, element, this.bindings);
        return new TemplateString(scope, errors, taps, element, this.bindings);
    },

    _appendText_: function(string) {
        let binding = this.bindings[this.bindings.length - 1];

        if (binding && binding.type == RAW_VALUEbindingID) {
            binding.val += string;
        } else {
            this.bindings.push(new RawValueBinding(string));
        }
    },

    set type(v) {},
    get type() {
        return TEMPLATEbindingID;
    },

    toString(){
        let str = "";
        for(let i = 0; i < this.bindings.length; i++)
            str += this.bindings[i];
        return str;
    }
};


function StyleTemplate(lex) {

    const style = new OutStyleTemplate();
    if(lex){

    }
    return style;
}

class OutStyleTemplate {

    constructor() {
        this._css_props_ = [];
    }

    get bindings() {
        if (this._template_)
            return this._template_.bindings;
        return [];
    }
    set bindings(v) {}

    get type() {
        return TEMPLATEbindingID;
    }
    set type(v) {}

    clear(){
        this._css_props_ = [];
    }

    _addRule_(rule) {

        let props = rule.props;

        for (let name in props) {
            let prop = props[name];

            if(prop == null) continue;

            if (prop._wick_type_ > 0)
                this._css_props_.push(prop);
            else 
                this._css_props_.push(new CSSRawValue(name, prop));
        }
    }

    _bind_(scope, errors, taps, element) {
        return new StyleIO(scope, errors, taps, element, this._css_props_);
    }
}

function CSSRuleTemplate(lex, prop_name) {
    return new OutCSSRuleTemplate(lex, prop_name);
}

class OutCSSRuleTemplate {
    constructor(lex = null, prop_name = "") {
        let bindings = evaluate(lex);

        this.binding = null;

        this.prop_name = prop_name;

        this.bindings = bindings;
    }

    get _wick_type_() {
        return 1;
    }
    set _wick_type_(v) {}

    _bind_(scope, errors, taps, io) {
        let binding = new CSSRuleTemplateString(scope, errors, taps, this.bindings, this.prop_name);
        binding.addIO(io);
        return binding;
    }
}

const par_list = [];

class BindingCSSRoot extends CSSRootNode {
    getPropertyHook(value_lex, prop_name, rule) {

        //looking for binding points
        let pk = value_lex.copy();
        while (!pk.END && ((pk.ch != barrier_a_start || (pk.n.ch != barrier_a_start && pk.ch != barrier_b_start)))) {
            pk.n;
        }

        if (pk.END)
            return false;

        rule.props[prop_name] = CSSRuleTemplate(value_lex, prop_name);

        return true;
    }
}

class RootText extends TextNode {
    constructor(binding) {
        super("");
        binding.method = TEXT$1;
        this.binding = binding;
    }

    build(element, scope, presets, errors, taps, statics) {
        let ele = document.createTextNode(this.txt);
        this.binding._bind_(scope, errors, taps, ele, "", this, statics);
        appendChild$1(element, ele);
    }

    linkCSS() {}

    toString(off = 0) {
        return `${("    ").repeat(off)}${this.binding}\n`;
    }
}

var M$1 = null;
/**
 * Class for Root HTML AST Node.
 *@memberof module:wick~internals.templateCompiler
 *@alias Root
 */
class RootNode extends HTMLNode {

    constructor() {
        super();
        this.HAS_TAPS = false;

        this.tap_list = [];
        this.bindings = [];

        this.css = null;

        this.merged = false;
        this.SLOTED = false;

        this._badge_name_ = "";

        this.__presets__ = null;
        this.__statics__ = null;
    }

    /******************************************* ERROR ****************************************************/

    getURL(index) {
        if (this.url)
            return this.url;
        if (par_list[index])
            return par_list[index].getURL(index - 1);
        return null;
    }

    /******************************************* STATICS ****************************************************/

    get statics() {

        if (this.__statics__) return this.__statics__;

        if (this.par)
            return (this.__statics__ = Object.assign({}, this.par.statics, { slots: {} }));
        return (this.__statics__ = { slots: {} });
    }

    set statics(statics) {
        //this.__statics__ = statics;
    }

    /******************************************* PRESETS ****************************************************/

    get presets() {
        if (this.__presets__) return this.__presets__;
        return this.par.presets;
    }

    set presets(preset) {
        this.__presets__ = preset;
    }

    /****************************************** COMPONENTIZATION *****************************************/

    mergeComponent() {

        if (this.presets.components) {
            let component = this.presets.components[this.tag];

            if (component) {
                return component.merge(this);
            }
        }

        return this;
    }

    merge(node) {

        const merged_node = new this.constructor();
        merged_node.line = this.line;
        merged_node.char = this.char;
        merged_node.offset = this.offset;
        merged_node.single = this.single;
        merged_node.url = this.url;
        merged_node.tag = this.tag;
        merged_node.fch = (node.fch || this.fch) ? new MergerNode(this.children, node.children) : null;
        merged_node.css = this.css;
        merged_node.HAS_TAPS = this.HAS_TAPS;
        merged_node.merged = true;
        merged_node._badge_name_ = node._badge_name_;
        merged_node.__presets__ = this.presets;
        merged_node.par = node.par;

        if (this.tap_list)
            merged_node.tap_list = this.tap_list.map(e => Object.assign({}, e));


        this.attributes.forEach(e => {
            if(e.name == "component") return; //Prevent this from changing the global static value.
            merged_node.processAttributeHook(e.name, whind$1(e.value));
        });

        node.attributes.forEach(e => merged_node.processAttributeHook(e.name, whind$1(e.value)));
        merged_node.attributes = merged_node.attributes.concat(this.attributes, node.attributes);

        merged_node.__statics__ = node.__statics__;

        //merged_node.attributes = this.attributes.slice();
        return merged_node;
    }

    /******************************************* CSS ****************************************************/

    linkCSS(css, win = window) {

        if (this.css)
            css = this.css;

        if (css) {

            let rule;


            for (let i = 0; i < css.length; i++)
                rule = css[i].getApplicableRules(this, rule, win);


            //parse rules and createBindings.
            if (rule && rule.LOADED) {


                //Link into the binding for style. if there is no binding, create one. 
                //Link in the rule properties to the tap system. 
                let HAVE_BINDING = false;

                for (let i = 0, l = this.bindings.length; i < l; i++) {
                    let binding = this.bindings[i];

                    if (binding.name == "css") {
                        binding.binding.clear();
                        HAVE_BINDING = (binding.binding._addRule_(rule), true);
                    }
                }

                if (!HAVE_BINDING) {
                    let binding = StyleTemplate();
                    binding._addRule_(rule);
                    let vals = {
                        name: "css",
                        value: "",
                        binding
                    };
                    this.bindings.push(vals);

                }

                this.css = css;
            }
        }

        for (let node = this.fch; node; node = this.getNextChild(node))
            node.linkCSS(css, win);
    }

    setPendingCSS(css, par = this.par) {
        if (par)
            par.setPendingCSS(css, par.par);
        else {
            if (!this.css)
                this.css = [];
            this.css.push(css);
        }
    }

    getCSS(par = this.par) {

        let css = new BindingCSSRoot();

        this.setPendingCSS(css, par);

        return css;
    }

    get classList() {
        let classes = this.getAttrib("class");
        if (classes) {
            if (typeof(classes.value) == "string")
                return classes.value.split(" ");
            else
                return classes.value.val.split(" ");
        }
        return [];
    }

    /******************************************* TAPS ****************************************************/


    getTap(tap_name) {
        this.HAS_TAPS = true;
        const l = this.tap_list.length;
        for (let i = 0; i < l; i++)
            if (this.tap_list[i].name == tap_name)
                return this.tap_list[i];
        const tap = {
            name: tap_name,
            id: l,
            modes: 0
        };
        this.tap_list.push(tap);
        return tap;
    }

    checkTapMethod(name, lex, OVERRIDE = false) {
        if (this.par && !OVERRIDE) return false;

        let tap_mode = KEEP; // Puts

        let SET_TAP_METHOD = false;

        switch (name[0]) {
            case "i": // Imports data updates, messages - valid on scope and top level objects.
                if (name === "import") {
                    SET_TAP_METHOD = true;
                    tap_mode |= IMPORT;
                }
                break;
            case "e": // Exports data updates, messages - valid on scopes and top level objects.
                if (name === "export") {
                    SET_TAP_METHOD = true;
                    tap_mode |= EXPORT;
                }
                break;
            case "p": // Pushes updates to model
                if (name === "put") {
                    SET_TAP_METHOD = true;
                    tap_mode |= PUT;
                }
        }

        if (SET_TAP_METHOD) {

            while (!lex.END) {

                this.getTap(lex.tx).modes |= tap_mode;

                lex.n;
            }

            return true;
        }
    }

    checkTapMethodGate(name, lex) {

        if (!this.par)
            return this.checkTapMethod(name, lex);

        return false;
    }

    linkTapBinding(binding) {

        binding.tap_id = this.getTap(binding.tap_name).id;
    }

    delegateTapBinding(binding, tap_mode) {

        if (this.par)
            return this.par.processTapBinding(binding, tap_mode);

        return null;
    }

    processTapBinding(binding, tap_mode = 0) {

        if (this.delegateTapBinding(binding, tap_mode)) return binding;

        if (binding.type === TEMPLATEbindingID) {

            let bindings = binding.bindings;

            for (let i = 0, l = bindings.length; i < l; i++)
                if (bindings[i].type === DYNAMICbindingID)
                    this.linkTapBinding(bindings[i]);

        } else if (binding.type === DYNAMICbindingID)
            this.linkTapBinding(binding);

        return binding;
    }



    /******************************************* BUILD ****************************************************/

    getCachedScope() {
        if (this.par)
            return this.par.getCachedScope();
        return null;
    }

    setScope(scope) {
        scope.ast = this;
    }

    /**
     * Builds Scope Graph and Dom Tree.
     */
    build(element, scope, presets, errors, taps, statics, RENDER_ALL = false) {

        let out_statics = statics;

        if (this.url || this.__statics__){
            out_statics = Object.assign({}, statics, this.__statics__, { url: this.getURL(par_list.length - 1) });
        }

        const own_element = this.createElement(presets, scope);

        if (!scope)
            scope = new Scope(null, presets || this.__presets__ || this.presets, own_element, this);

        if (this.HAS_TAPS)
            taps = scope.linkTaps(this.tap_list);

        if (own_element) {

            if (!scope.ele) scope.ele = own_element;

            if (this._badge_name_)
                scope.badges[this._badge_name_] = own_element;

            if (element) appendChild$1(element, own_element);

            for (let i = 0, l = this.bindings.length; i < l; i++) {
                let attr = this.bindings[i];
                attr.binding._bind_(scope, errors, taps, own_element, attr.name, this, statics);
            }
        }

        const ele = own_element ? own_element : element;

        par_list.push(this);

        for (let node = this.fch; node; node = this.getNextChild(node))
            node.build(ele, scope, presets, errors, taps, out_statics, RENDER_ALL);

        par_list.pop();

        return scope;
    }


    /******************************************* HOOKS ****************************************************/

    /**
     * Override this method to tell the parser that `tag` is self closing and to not look for a matching close tag by returning `true`.
     * @param      {string}  tag     The HTML tag
     */
    selfClosingTagHook(tag) {
        switch (tag) {
            case "input":
            case "br":
            case "img":
            case "import":
            case "link":
            case "f":
            case "filter":
                return true;
        }

        return false;
    }

    createElement() {
        return createElement(this.tag);
    }

    async endOfElementHook() {
        await super.endOfElementHook();
        return this.mergeComponent();
    }


    /**
     * This will create TAP binding references and methods, binding points, and regular attribute nodes.
     * @param      {<type>}  name    The Attribute name
     * @param      {Lexer}  lex     The lexer containing the attribute value.
     * @return     {Object}  `null` or an object to store in this nodes attributes
     * @private
     */
    processAttributeHook(name, lex) {
        
        if (!name) return null;

        let start = lex.off,
            basic = {
                IGNORE: true,
                name,
                value: lex.slice(start)
            };

        let bind_method = ATTRIB,
            FOR_EVENT = false;

        switch (name[0]) {

            case "#": //Static values
                let key = name.slice(1);

                if (key.length > 0) {
                    if (lex.tl == lex.sl - lex.off && lex.ty == lex.types.num)
                        this.statics[key] = parseFloat(lex.slice());
                    else
                        this.statics[key] = lex.slice();
                }

                return basic;

            case "v": //Input
                if (name == "value")
                    bind_method = INPUT;
                break;


            case "o": // Event Messaging linking
                if (name[1] == "n") {
                    FOR_EVENT = true;
                    bind_method = EVENT;
                }
                break;

            case "c":
                if (name == "component") {
                    let component_name = lex.tx;

                    if (this.presets.components)
                        this.presets.components[component_name] = this;

                    return basic;
                }
                break;
            case "b":
                if (name == "badge") {
                    this._badge_name_ = lex.tx;
                    return basic;
                }
            case "s":
                if (name == "showif") {
                    bind_method = BOOL;
                    break;
                }

                if (name == "slot" && this.par) {
                    this.par.statics.slots[basic.value] = this;
                    return basic;
                }
        }

        if (this.checkTapMethodGate(name, lex))
            return basic.IGNORE = false, basic;

        basic.IGNORE = false;

        if ((lex.sl - lex.off) > 0) {
            let binding = Template(lex, FOR_EVENT);
            if (!binding) {
                return basic;
            }

            binding.attrib = name;
            binding.method = bind_method;
            let attr = {
                IGNORE: false,
                name,
                value: (start < lex.off) ? lex.slice(start) : true,
                binding: this.processTapBinding(binding)
            };
            this.bindings.push(attr);
            return attr;
        }

        return basic;
    }



    /**
     * Hooks into the Text Node creation context and looks for binding points. 
     * If they are found, the text node will be made dynamic.
     * @param      {Lexer}    
     * @return     {TextNode}  
     */
    async processTextNodeHook(lex) {
        if (lex.sl - lex.pos > 0) {
            //let binding = Template(lex.trim());

            //lex = whind(await Plugin.parseInnerHTMLonTag(this.tag, lex.trim(1).slice()), true)

            let binding = Template(lex);
            if (binding)
                return new RootText(this.processTapBinding(binding));
        }

        return null;
    }
}


//Node that allows the combination of two sets of children from separate nodes that are merged together
class MergerNode extends RootNode {
    constructor(...children_arrays) {
        super();

        this.c = [];

        for (let i=0,l = children_arrays.length; i<l; i++)
            if(Array.isArray(children_arrays))
                this.c = this.c.concat(children_arrays[i]);
    }

    build(element, scope, presets, errors, taps, statics, RENDER_ONLY) {
        for (let i=0,l = this.c.length; i<l; i++){
            if(this.c[i].SLOTED == true) continue;
            this.c[i].build(element, scope, presets, errors, taps, statics, RENDER_ONLY);
        }

        return scope;
    }


    linkCSS() {}

    toString(off = 0) {
        return `${("    ").repeat(off)}${this.binding}\n`;
    }
}

/**
 * Void elements don't exist, they evaporate into the void.
 * Element children of VoidNodes are appended to the last element created.
 */
class VoidNode$1 extends RootNode {

    //createElement() { return null; }

    /******************************************* HOOKS ****************************************************/

    endOfElementHook() { return this }

    processTextNodeHook() {}

    /******************************************* BUILD ****************************************************/

    build(a, b, c, d, e, f, g = false) {
        if (g)
            return super.build(a, b, c, d, e, f, g)
    }

    /******************************************* CSS ****************************************************/

    linkCSS() {}
}

class ScriptNode$1 extends VoidNode$1 {
    constructor() {
        super();
        this.script_text = "";
        this.binding = null;
    }

    processTextNodeHook(lex) {
        
        this.script_text = lex.slice();
        
    
        const {ids, ast} = JSTools.getRootVariables(lex);

        console.log(ast);
        let tvrs = ast.traverseDepthFirst();
        let node = tvrs.next().value;
        while(node !== undefined){
            console.log(node);
            node = tvrs.next().value;
        }
        
        if (this.binding){
            this.binding.ids = [...ids.values()];
            this.binding.val = this.script_text;
        }
    }

    processAttributeHook(name, lex) {
        switch (name) {
            case "on":
                let binding = Template(lex, false);
                if (binding.type == DYNAMICbindingID) {
                    binding.method = SCRIPT;
                    this.binding = this.processTapBinding(binding);
                }
                return null;
        }
        return super.processAttributeHook(name, lex);
    }

    build(element, scope, presets, errors, taps, statics = {}, RENDER_ALL = false) {
        if(RENDER_ALL)
            return super.build(element, scope, presets, errors, taps, statics, RENDER_ALL);
        
        if(this.url){
            statics = Object.assign({}, statics);
            statics.url = this.url;
        }
        
        if (this.binding)
            this.binding._bind_(scope, errors, taps, element, "", this, statics);        
    }
}

/**
 * Scope nodes are used to hook into specific Models, and respond to `update` events from that model.
 * @class      ScopeNode (name)
 */
class ScopeNode$1 extends RootNode {
    constructor() {
        super();
        this._model_name_ = "";
        this._schema_name_ = "";
        this._cached_ = [];
    }

    merge(node) {
        const merged_node = super.merge(node);
        merged_node._model_name_ = this._model_name_;
        merged_node._schema_name_ = this._schema_name_;
        merged_node._cached_ = this._cached_;
        return merged_node;
    }

    pushChached(scope) {
        this._cached_.push(scope);
    }

    popCached() {
        this._cached_.pop();
    }

    getCachedScope() {
        return this._cached_[this._cached_.length - 1];
    }

    delegateTapBinding() {
        return null;
    }

    getCSS() {

        if (this.css)
            return this.css;

        this.css = new BindingCSSRoot();

        this.setPendingCSS(this.css);

        return this.css;
    }

    checkTapMethodGate(name, lex) {
        return this.checkTapMethod(name, lex, true);
    }



    /******************************************* BUILD ****************************************************/
    createElement() {
        let attr = this.getAttrib("element", true);
        return createElement(attr ? attr.value : "div");
    }

    build(element, scope, presets, errors, taps = null, statics = {},  RENDER_ALL = false) {

        let data = {};

        let out_taps = [];

        let me = new Scope(scope, this.__presets__ || presets || this.presets, element, this);

        this.pushChached(me);

        me._model_name_ = this._model_name_;
        me._schema_name_ = this._schema_name_;

        let tap_list = this.tap_list;

        for (let i = 0, l = tap_list.length; i < l; i++) {
            let tap = tap_list[i],
                name = tap.name;

            let bool = name == "update";

            me.taps[name] = bool ? new UpdateTap(me, name, tap.modes) : new Tap(me, name, tap.modes);

            if (bool)
                me.update_tap = me.taps[name];

            out_taps.push(me.taps[name]);
        }

        /**
         * To keep the layout of the output HTML predictable, Wick requires that a "real" HTMLElement be defined before a scope object is created. 
         * If this is not the case, then a new element, defined by the "element" attribute of the scope virtual tag (defaulted to a "div"), 
         * will be created to allow the scope object to bind to an actual HTMLElement. 
         */

        if (!element || this.getAttrib("element", true)) {

            let ele = this.createElement();

            this.class.split(" ").map(c => c ? ele.classList.add(c) : {});

            if (this.getAttribute("id"))
                ele.id = this.getAttribute("id");

            if (this.getAttribute("style"))
                ele.style = this.getAttribute("style");

            me.ele = ele;

            if (element) {
                appendChild$1(element, ele);
            }

            element = ele;

            if (this._badge_name_)
                me.badges[this._badge_name_] = element;

            let hook = {
                attr: this.attributes,
                bindings: [],
                style: null,
                ele: element
            };

            for (let i = 0, l = this.bindings.length; i < l; i++) {
                let attr = this.bindings[i];
                let bind = attr.binding._bind_(me, errors, out_taps, element, attr.name);

                if (hook) {
                    if (attr.name == "style" || attr.name == "css")
                        hook.style = bind;

                    hook.bindings.push(bind);
                }
            }

            me.hooks.push(hook);
        }

        for (let i = 0, l = this.attributes.length; i < l; i++) {
            let attr = this.attributes[i];

            if (!attr.value) {
                //let value = this.par.importAttrib()
                //if(value) data[attr.name];
            } else
                data[attr.name] = attr.value;
        }

        if (this.url || this.__statics__) {
            statics = Object.assign(statics, this.__statics__);
            statics.url = this.url;
        }

        par_list.push(this);

        for (let node = this.fch; node; node = this.getNextChild(node))
            node.build(element, me, presets, errors, out_taps, statics, null, RENDER_ALL);

        par_list.pop();


        if (statics || this.__statics__) {
            let s = Object.assign({}, statics ? statics : {}, this.__statics__);
            me.statics = s;
            me.update(me.statics);
        }

        this.popCached(me);

        return me;
    }

    /******************************************* HOOKS ****************************************************/

    endOfElementHook() { if(!this.__presets__) {this.presets = this.presets; } return this }

    /**
     * Pulls Schema, Model, or tap method information from the attributes of the tag. 
     * All other attributes are passed through without any other consideration.
     * @param      {string}  name    The name
     * @param      {Lexer}  lex     The lex
     * @return     {Object}  Key value pair.
     */
    processAttributeHook(name, lex, value) {

        let start = lex.off,
            basic = {
                IGNORE: true,
                name,
                value: lex.slice(start)
            };

        switch (name[0]) {
            case "#":
                let key = name.slice(1);

                if (key.length > 0) {
                    if (lex.tl == lex.sl - lex.off && lex.ty == lex.types.num)
                        this.statics[key] = parseFloat(lex.slice());
                    else
                        this.statics[key] = lex.slice();
                }

                return {
                    name,
                    value: lex.slice(start)
                };
            case "m":
                if (name == "model") {
                    this._model_name_ = lex.slice();
                    lex.n;
                    return basic;
                }
                break;
            case "s":
                if (name == "schema") {
                    this._schema_name_ = lex.slice();
                    lex.n;
                    return basic;
                }



                if (name == "slot" && this.par) {
                    this.par.statics.slots[basic.value] = this;
                    return basic;
                }
                break;
            case "c":
                if (name == "component") {
                    
                    let component_name = lex.tx;
                    let components = this.presets.components;
                    if (components)
                        components[component_name] = this;
                    return basic;
                }
                break;

            case "b":
                if (name == "badge") {
                    this._badge_name_ = lex.tx;
                    return basic;
                }
                break;

            case "e":
                if (name == "element") 
                    return basic;

            default:
                if (this.checkTapMethodGate(name, lex))
                    return basic;
        }

        //return { name, value: lex.slice() };
        //return super.processAttributeHook(name, lex, value);
        basic.IGNORE = false;

        if ((lex.sl - lex.off) > 0) {
            let binding = Template(lex, true);

            if (!binding)
                return basic;



            //}
            //binding.val = name;
            binding.attrib = name;
            binding.method = ATTRIB;

            let attr = {
                IGNORE: false,
                name,
                value: (start < lex.off) ? lex.slice(start) : true,
                binding: this.processTapBinding(binding)
            };

            this.bindings.push(attr);

            return attr;
        }

        return basic;

    }
}

class LinkNode$1 extends RootNode {
    createElement(presets, scope){
        let element = document.createElement("a");
        presets.processLink(element, scope);
        return element;
    }

    build(...s){
    	super.build(...s);
    }
}

let expr_check = (expr) => {
    return (expr.type == 2 && typeof(expr.func) == "function");
};



class FilterIO extends IOBase {
    constructor(scope, errors, taps, container, activation, sort, filter, limit, offset, scrub, shift) {
        super(container, errors);

        this.container = container;
        this._activation_function_ = null;
        this._sort_function_ = null;
        this.filter_function = null;
        this.CAN_USE = false;
        this.CAN_FILTER = false;
        this._CAN_LIMIT_ = false;
        this._CAN_OFFSET_ = false;
        this.CAN_SORT = false;
        this._SCHD_ = 0;

        if (activation && activation.binding) {
            this._activation_function_ = activation.binding._bind_(scope, errors, taps, this);
        } else {
            this.CAN_USE = true;
        }

        if (sort && sort.binding) {
            let expr = sort.binding;
            if (expr_check(expr)) {
                this._sort_function_ = (m1, m2) => expr.func(m1.model, m2.model);
                this.CAN_SORT = true;
            }
        } else

        if (filter && filter.binding) {
            let expr = filter.binding;
            if (expr_check(expr)) {
                this.filter_function = expr._bind_(scope, errors, taps, this);
                this.filter_function._IS_A_FILTER_ = true;
                this.CAN_FILTER = true;
            }
        } else

        if (limit && limit.binding) {
            let expr = limit.binding;
            expr.method = (expr.method == 1) ? -1 : expr.method;
            this._limit_function_ = expr._bind_(scope, errors, taps, this);
            this._CAN_LIMIT_ = true;
        } else

        if (offset && offset.binding) {
            this._CAN_OFFSET_ = true;
            if (offset.binding.type == 1) {
                this._value_ = parseInt(offset.binding.val);
            } else {
                let expr = offset.binding;
                expr.method = (expr.method == 1) ? -1 : expr.method;
                this._offset_function_ = expr._bind_(scope, errors, taps, this);
            }
        } else

        if (scrub && scrub.binding) {
            let expr = scrub.binding;
            expr.method = (expr.method == 1) ? -1 : expr.method;
            this._scrub_function_ = expr._bind_(scope, errors, taps, this);
            this._CAN_SCRUB_ = true;
        } else

        if (shift && shift.binding) {
            let expr = shift.binding;
            expr.method = (expr.method == 1) ? -1 : expr.method;
            this._page_function_ = expr._bind_(scope, errors, taps, this);
            this._CAN_SHIFT_ = true;
        }
    }

    scheduledUpdate() {}

    update() {
        if (this.CAN_SORT || this.CAN_FILTER) {
            this.container.UPDATE_FILTER = true;
            spark.queueUpdate(this.container);
        }
    }

    destroy() {
        if (this._sort_function_)
            this._sort_function_.destroy();
        if (this._activation_function_)
            this._activation_function_.destroy();
        if (this.filter_function)
            this.filter_function.destroy();
        this._sort_function_ = null;
        this._activation_function_ = null;
        this.filter_function = null;
        this.container = null;
    }

    get data() {}
    set data(v) {

        this.CAN_USE = false;
        if (v) this.CAN_USE = true;
        this._value_ = v;

        if (this._CAN_SCRUB_)
            return this.container.scrub(parseFloat(this._value_), false);

        if (this.CAN_SORT || this.CAN_FILTER || this._CAN_SHIFT_)
            this.container.UPDATE_FILTER = true;

        spark.queueUpdate(this.container);
    }
}

class FilterNode extends VoidNode$1 {

    /******************************************* HOOKS ****************************************************/

    endOfElementHook() {}

    /**
     * This node only needs to assess attribute values. InnerHTML will be ignored. 
     * @return     {boolean}  { description_of_the_return_value }
     */
    selfClosingTagHook() { return true; }

}

class PackageNode extends VoidNode$1 {

    constructor(start) {
        super();
        this._start_ = start;
        this.url = this.getURL();
        this.tag = "package";
    }

    /******************************************* HOOKS ****************************************************/

    /**
     * Binds new laxer to boundaries starting from open tag to close tag. Applies Lexer to new ScopePackage.
     * @param      {Lexer}  lex     The lex
     * @private
     */
    processTextNodeHook(lex) {}

    _ignoreTillHook_() { return true; }

    endOfElementHook(lex) {
        let own_lex = lex.copy();

        own_lex.off = this._start_;
        own_lex.tl = 0;
        own_lex.n.sl = lex.off;
        
        this.par.package = new this.ScopePackage(own_lex, this.presets, false);

        if (!this.fch)
            this.mergeComponent();

        return this;
    }

    mergeComponent() {
        
        let component = this.presets.components[this.tag];

        if (component)
            this.par.package = new this.ScopePackage(component, this.presets, false);

        return component
    }
}

/**
 * Slot Node. 
 */
class SlotNode extends RootNode {
    constructor() {
        super();
        this.name = "";
    }

    delegateTapBinding() {
        return null;
    }

    build(element, scope, presets, errors, taps, statics, RENDER_ONLY = false) {

        return (statics.slots && statics.slots[this.name]) ?
            (statics.slots[this.name].SLOTED = true,
            statics.slots[this.name].build(
                element,
                statics.slots[this.name].getCachedScope() || scope,
                /*statics.slots[this.name].getPresets() || */presets,
                errors,
                taps,
                statics,
                RENDER_ONLY
            )) :
            scope;
    }

    processAttributeHook(name, lex) {

        if (!name) return null;

        let start = lex.off,
            basic = {
                IGNORE: true,
                name,
                value: lex.slice(start)
            };

        let bind_method = ATTRIB,
            FOR_EVENT = false;

        if (name == "name")
            this.name = basic.value;

        return basic;
    }

}

function getColumnRow(index, offset, set_size) {
    const adjusted_index = index - offset * set_size;
    const row = Math.floor(adjusted_index / set_size);
    const col = (index) % (set_size);
    return { row, col };
}

/**
 * ScopeContainer provide the mechanisms for dealing with lists and sets of components. 
 *
 * @param      {Scope}  parent   The Scope parent object.
 * @param      {Object}  data     The data object hosting attribute properties from the HTML template. 
 * @param      {Object}  presets  The global presets object.
 * @param      {HTMLElement}  element  The element that the Scope will _bind_ to. 
 */
class ScopeContainer extends View {

    constructor(parent, presets, element) {

        super();

        this.ele = element;
        this.parent = null;
        this.activeScopes = [];
        this.dom_scopes = [];
        this.filters = [];
        this.ios = [];
        this.terms = [];
        this.scopes = [];
        this.range = null;
        this._SCHD_ = 0;
        this.prop = null;
        this.package = null;
        this.transition_in = 0;
        this.limit = 0;
        this.shift_amount = 1;
        this.dom_dn = [];
        this.dom_up = [];
        this.trs_ascending = null;
        this.trs_descending = null;
        this.UPDATE_FILTER = false;
        this.dom_up_appended = false;
        this.dom_dn_appended = false;
        this.root = 0;
        this.AUTO_SCRUB = false;
        this.taps = {};

        this.scrub_velocity = 0;

        this.offset = 0;
        this.offset_diff = 0;
        this.offset_fractional = 0;

        parent.addTemplate(this);
    }

    get data() {}
    set data(container) {
        if (container instanceof ModelContainerBase) {
            container.pin();
            container.addView(this);
            return;
        }
        if (!container) return;
        if (Array.isArray(container)) this.cull(container);
        else this.cull(container.data);
    }

    update(container) {
        if (container instanceof ModelContainerBase) container = container.get();
        if (!container) return;
        //let results = container.get(this.getTerms());
        // if (container.length > 0) {
        if (Array.isArray(container)) this.cull(container);
        else this.cull(container.data);
        // }
    }


    /**
     * Called by Spark when a change is made to the Template HTML structure. 
     * 
     * @protected
     */
    scheduledUpdate() {

        if (this.SCRUBBING) {

            if (!this.AUTO_SCRUB) {
                this.SCRUBBING = false;
                return;
            }

            if (
                Math.abs(this.scrub_velocity) > 0.0001
            ) {
                if (this.scrub(this.scrub_velocity)) {

                    this.scrub_velocity *= (this.drag);

                    let pos = this.offset + this.scrub_velocity;

                    if (pos < 0 || pos > this.max)
                        this.scrub_velocity = 0;

                    spark.queueUpdate(this);
                }

            } else {
                this.scrub_velocity = 0;
                this.scrub(Infinity);
                this.SCRUBBING = false;
            }
        } else if (this.UPDATE_FILTER) {
            this.filterUpdate();
            this.render();
        } else {
            let offset = this.offset;
            this.limitUpdate();
            let a = this.offset;
            this.offset = offset;
            this.forceMount();
            this.arrange();
            this.offset = a;
            this.render();
            this.offset_diff = 0;
        }
    }

    forceMount() {
        const active_window_size = this.limit;
        const offset = this.offset;


        const min = Math.min(offset + this.offset_diff, offset) * this.shift_amount;
        const max = Math.max(offset + this.offset_diff, offset) * this.shift_amount + active_window_size;


        let i = min;

        this.ele.innerHTML = "";
        const output_length = this.activeScopes.length;
        this.dom_scopes.length = 0;

        while (i < max && i < output_length) {
            let node = this.activeScopes[i++];
            this.dom_scopes.push(node);
            node.appendToDOM(this.ele);
        }
    }

    /**
     * Scrub provides a mechanism to scroll through components of a container that have been limited through the limit filter.
     * @param  {Number} scrub_amount [description]
     */
    scrub(scrub_delta, SCRUBBING = true) {
        // scrub_delta is the relative ammunt of change from the previous offset. 

        if(!this.SCRUBBING) 
            this.render(null, this.activeScopes, true);

        this.SCRUBBING = true;

        if (this.AUTO_SCRUB && !SCRUBBING && scrub_delta != Infinity) {
            this.scrub_velocity = 0;
            this.AUTO_SCRUB = false;
        }

        let delta_offset = scrub_delta + this.offset_fractional;
        if (scrub_delta !== Infinity) {

            if (Math.abs(delta_offset) > 1) {
                if (delta_offset > 1) {

                    delta_offset = delta_offset % 1;
                    this.offset_fractional = delta_offset;
                    this.scrub_velocity = scrub_delta;

                    if (this.offset < this.max)
                        this.trs_ascending.play(1);

                    this.offset++;
                    this.offset_diff = 1;
                    this.render(null, this.activeScopes, true).play(1);
                } else {
                    delta_offset = delta_offset % 1;
                    this.offset_fractional = delta_offset;
                    this.scrub_velocity = scrub_delta;

                    if (this.offset >= 1)
                        this.trs_descending.play(1);
                    this.offset--;
                    this.offset_diff = -1;

                    this.render(null, this.activeScopes, true).play(1);
                }

            } else {
                
            }

            //Make Sure the the transition animation is completed before moving on to new animation sequences.

            if (delta_offset > 0) {

                if (this.offset + delta_offset >= this.max - 1) delta_offset = 0;

                if (!this.dom_up_appended) {

                    for (let i = 0; i < this.dom_up.length; i++) {
                        this.dom_up[i].appendToDOM(this.ele);
                        this.dom_up[i].index = -1;
                        this.dom_scopes.push(this.dom_up[i]);
                    }

                    this.dom_up_appended = true;
                }

                this.trs_ascending.play(delta_offset);
            } else {

                if (this.offset < 1) delta_offset = 0;

                if (!this.dom_dn_appended) {

                    for (let i = 0; i < this.dom_dn.length; i++) {
                        this.dom_dn[i].appendToDOM(this.ele, this.dom_scopes[0].ele);
                        this.dom_dn[i].index = -1;
                    }

                    this.dom_scopes = this.dom_dn.concat(this.dom_scopes);

                    this.dom_dn_appended = true;
                }

                this.trs_descending.play(-delta_offset);
            }

            this.offset_fractional = delta_offset;
            this.scrub_velocity = scrub_delta;

            return true;
        } else {

            if (Math.abs(this.scrub_velocity) > 0.0001) {
                const sign = Math.sign(this.scrub_velocity);

                if (Math.abs(this.scrub_velocity) < 0.1) this.scrub_velocity = 0.1 * sign;
                if (Math.abs(this.scrub_velocity) > 0.5) this.scrub_velocity = 0.5 * sign;

                this.AUTO_SCRUB = true;

                //Determine the distance traveled with normal drag decay of 0.5
                let dist = this.scrub_velocity * (1 / (-0.5 + 1));
                //get the distance to nearest page given the distance traveled
                let nearest = (this.offset + this.offset_fractional + dist);
                nearest = (this.scrub_velocity > 0) ? Math.min(this.max, Math.ceil(nearest)) : Math.max(0, Math.floor(nearest));
                //get the ratio of the distance from the current position and distance to the nearest 
                let nearest_dist = nearest - (this.offset + this.offset_fractional);
                let drag = Math.abs(1 - (1 / (nearest_dist / this.scrub_velocity)));

                this.drag = drag;
                this.scrub_velocity = this.scrub_velocity;
                this.SCRUBBING = true;
                spark.queueUpdate(this);
                return true;
            } else {
                this.offset += Math.round(this.offset_fractional);
                this.scrub_velocity = 0;
                this.offset_fractional = 0;
                this.render(null, this.activeScopes, true).play(1);
                this.SCRUBBING = false;
                return false;
            }
        }

        return true;
    }

    arrange(output = this.activeScopes) {



        //Arranges active scopes according to their arrange handler.
        const
            limit = this.limit,
            offset = this.offset,
            transition = Animation.createTransition(),
            output_length = output.length,
            shift_points = Math.ceil(output_length / this.shift_amount),
            active_window_start = offset * this.shift_amount;

        let i = 0;

        //Scopes on the ascending edge of the transition window
        while (i < active_window_start && i < output_length)
            output[i].update({ trs_asc_out: { trs: transition.in, pos: getColumnRow(i, offset, this.shift_amount) } }), i++;

        //Scopes in the transtion window
        while (i < active_window_start + limit && i < output_length)
            output[i].update({ arrange: { trs: transition.in, pos: getColumnRow(i, offset, this.shift_amount) } }), i++;

        //Scopes on the descending edge of the transition window
        while (i < output_length)
            output[i].update({ trs_dec_out: { trs: transition.in, pos: getColumnRow(i, offset, this.shift_amount) } }), i++;
        
        transition.play(1);
        
    }

    render(transition, output = this.activeScopes, NO_TRANSITION = false) {


        let
            active_window_size = this.limit,
            offset = this.offset,
            j = 0,
            output_length = output.length,
            active_length = this.dom_scopes.length,
            direction = 1,
            OWN_TRANSITION = false,
            trs_obj = { trs: null, pos: null };

        if (!transition) transition = Animation.createTransition(), OWN_TRANSITION = true;

        offset = Math.max(0, offset);

        const active_window_start = offset * this.shift_amount;

        direction = Math.sign(this.offset_diff);
        let prv = null;
        if (active_window_size > 0) {

            this.shift_amount = Math.max(1, Math.min(active_window_size, this.shift_amount));

            let
                i = 0,
                ip = 0,
                oa = 0,
                ein = [],
                shift_points = Math.ceil(output_length / this.shift_amount);

            this.max = shift_points - 1;
            this.offset = Math.max(0, Math.min(shift_points - 1, offset));

            //Two transitions to support scrubbing from an offset in either direction
            this.trs_ascending = Animation.createTransition(false);
            this.trs_descending = Animation.createTransition(false);

            this.dom_dn.length = 0;
            this.dom_up.length = 0;
            this.dom_up_appended = false;
            this.dom_dn_appended = false;

            //Scopes preceeding the transition window
            while (i < active_window_start - this.shift_amount) output[i++].index = -2;

            //Scopes entering the transition window ascending
            while (i < active_window_start) {
                this.dom_dn.push(output[i]);
                output[i].update({ trs_dec_in: { trs: this.trs_descending.in, pos: getColumnRow(i, this.offset - 1, this.shift_amount) } });
                output[i++].index = -2;
            }

            //Scopes in the transtion window
            while (i < active_window_start + active_window_size && i < output_length) {
                //Scopes on the descending edge of the transition window
                if (oa < this.shift_amount && ++oa) {
                    //console.log("pos",i, getColumnRow(i, this.offset+1, this.shift_amount), output[i].scopes[0].ele.style.transform)
                    output[i].update({ trs_asc_out: { trs: this.trs_ascending.out, pos: getColumnRow(i, this.offset + 1, this.shift_amount) } });
                } else
                    output[i].update({ arrange: { trs: this.trs_ascending.in, pos: getColumnRow(i, this.offset + 1, this.shift_amount) } });


                //Scopes on the ascending edge of the transition window
                if (i >= active_window_start + active_window_size - this.shift_amount)
                    output[i].update({ trs_dec_out: { trs: this.trs_descending.out, pos: getColumnRow(i, this.offset - 1, this.shift_amount) } });
                else
                    output[i].update({ arrange: { trs: this.trs_descending.in, pos: getColumnRow(i, this.offset - 1, this.shift_amount) } });


                output[i].index = i;
                ein.push(output[i++]);
            }

            //Scopes entering the transition window while offset is descending
            while (i < active_window_start + active_window_size + this.shift_amount && i < output_length) {
                this.dom_up.push(output[i]);
                output[i].update({
                    trs_asc_in: {
                        pos: getColumnRow(i, this.offset + 1, this.shift_amount),
                        trs: this.trs_ascending.in
                    }
                });
                output[i++].index = -3;
            }

            //Scopes following the transition window
            while (i < output_length) output[i++].index = -3;

            output = ein;
            output_length = ein.length;
        } else {
            this.max = 0;
            this.limit = 0;
        }

        let trs_in = { trs: transition.in, index: 0 };
        let trs_out = { trs: transition.out, index: 0 };

        for (let i = 0; i < output_length; i++) output[i].index = i;

        for (let i = 0; i < active_length; i++) {
            let as = this.dom_scopes[i];

            if (as.index > j) {
                while (j < as.index && j < output_length) {

                    let os = output[j];
                    os.index = j;
                    trs_in.pos = getColumnRow(j, this.offset, this.shift_amount);
                    os.appendToDOM(this.ele, as.element);
                    os.transitionIn(trs_in, (direction) ? "trs_asc_in" : "trs_dec_in");
                    j++;
                }
            } else if (as.index < 0) {
                trs_out.pos = getColumnRow(i, 0, this.shift_amount);
                if (!NO_TRANSITION) {
                    switch (as.index) {
                        case -2:
                        case -3:
                            as.transitionOut(trs_out, (direction > 0) ? "trs_asc_out" : "trs_dec_out");
                            break;
                        default:
                            as.transitionOut(trs_out);
                    }
                } else {

                    as.transitionOut();
                }

                continue;
            }
            trs_in.pos = getColumnRow(j++, 0, this.shift_amount);
            as.update({ arrange: trs_in });
            as._TRANSITION_STATE_ = true;
            as.index = -1;
        }

        while (j < output.length) {
            output[j].appendToDOM(this.ele);
            output[j].index = -1;
            trs_in.pos = getColumnRow(j, this.offset, this.shift_amount);

            output[j].transitionIn(trs_in, (direction) ? "arrange" : "arrange");
            j++;
        }

        this.ele.style.position = this.ele.style.position;
        this.dom_scopes = output;

        this.parent.upImport("template_count_changed", {
            displayed: output_length,
            offset: offset,
            count: this.activeScopes.length,
            pages: this.max,
            ele: this.ele,
            template: this,
            trs: transition.in
        });

        if (OWN_TRANSITION) {
            if (NO_TRANSITION)
                return transition;
            transition.start();
        }

        return transition;
    }

    // Reduces the compenents that are mounted and displayed to the ones determined by current filter parameters.
    limitUpdate() {
        let offset = this.offset;
        for (let i = 0, l = this.filters.length; i < l; i++) {
            let filter = this.filters[i];
            if (filter.CAN_USE) {
                if (filter._CAN_LIMIT_) this.limit = parseInt(filter._value_); // Make sure we are dealing with integers. 
                // Value could be string debinding on the type of 
                // binding. Applies to other values. 
                if (filter._CAN_OFFSET_) offset = parseInt(filter._value_);
                if (filter._CAN_SHIFT_) this.shift_amount = parseInt(filter._value_);
            }
        }

        this.offset_diff = offset - this.offset;
        this.offset = offset;
    }

    /**
     * Filters stored Scopes with search terms and outputs the matching Scopes to the DOM.
     * 
     * @protected
     */
    filterUpdate() {

        let output = this.scopes.slice();

        if (output.length < 1) return;
        for (let i = 0, l = this.filters.length; i < l; i++) {
            let filter = this.filters[i];
            if (filter.CAN_USE) {
                if (filter.CAN_FILTER) output = output.filter(filter.filter_function._filter_expression_);
                if (filter.CAN_SORT) output = output.sort(filter._sort_function_);
            }
        }
        this.activeScopes = output;
        this.UPDATE_FILTER = false;

        return output;
    }
    /**
     * Removes stored Scopes that do not match the ModelContainer contents. 
     *
     * @param      {Array}  new_items  Array of Models that are currently stored in the ModelContainer. 
     * 
     * @protected
     */
    cull(new_items = []) {
        const transition = Animation.createTransition();

        if (new_items.length == 0) {
            let sl = this.scopes.length;
            for (let i = 0; i < sl; i++) this.scopes[i].transitionOut(transition, "", true);
            this.scopes.length = 0;
            this.parent.upImport("template_count_changed", {
                displayed: 0,
                offset: 0,
                count: 0,
                pages: 0,
                ele: this.ele,
                template: this,
                trs: transition.in
            });
        } else {

            const
                exists = new Map(new_items.map(e => [e, true])),
                out = [];

            for (let i = 0, l = this.activeScopes.length; i < l; i++)
                if (exists.has(this.activeScopes[i].model)) 
                    exists.set(this.activeScopes[i].model, false);
                

            for (let i = 0, l = this.scopes.length; i < l; i++)
                if (!exists.has(this.scopes[i].model)) {
                    this.scopes[i].transitionOut(transition, "dismounting", true);
                    this.scopes[i].index = -1;
                    this.scopes.splice(i, 1);
                    l--;
                    i--;
                } else
                    exists.set(this.scopes[i].model, false);

            exists.forEach((v, k, m) => { if (v) out.push(k); });

            if (out.length > 0) {
                // Wrap models into components
                this.added(out, transition);

                // Update offset, limit, and shift variables.
                this.limitUpdate();

                // Filter the current components. 
                this.filterUpdate(out);

                //Preset the positions of initial components. 
                this.arrange();

                this.render(transition);
            } else {
                for (let i = 0, j = 0, l = this.activeScopes.length; i < l; i++, j++) {

                    if (this.activeScopes[i]._TRANSITION_STATE_) {
                        if (j !== i) {
                            this.activeScopes[i].update({
                                arrange: {
                                    pos: getColumnRow(i, this.offset, this.shift_amount),
                                    trs: transition.in
                                }
                            });
                        }
                    } else
                        this.activeScopes.splice(i, 1), i--, l--;
                }

                const c = this.filterUpdate(transition);
                this.limitUpdate(transition);
                this.arrange();
                this.render(transition);
            }
        }

        // If scrubbing is currently occuring, if the transition were to auto play then the results 
        // would interfere with the expected behavior of scrubbing. So the transition
        // is instead set to it's end state, and scrub is called to set intermittent 
        // position. 
        //*
        if (this.SCRUBBING) {
            //transition.play(1);
            //this.scrub(0);
        } else
            transition.start();
    
    }
    /**
     * Called by the ModelContainer when Models have been removed from its set.
     *
     * @param      {Array}  items   An array of items no longer stored in the ModelContainer. 
     */
    removed(items, transition = Animation.createTransition()) {
        for (let i = 0; i < items.length; i++) {
            let item = items[i];
            for (let j = 0; j < this.scopes.length; j++) {
                let Scope = this.scopes[j];
                if (Scope.model == item) {
                    this.scopes.splice(j, 1);
                    Scope.transitionOut(transition, "", true);
                    break;
                }
            }
        }

        this.limitUpdate();
        this.filterUpdate(transition);
        //this.arrange();
        this.render(transition);
    }
    /**
     * Called by the ModelContainer when Models have been added to its set.
     *
     * @param      {Array}  items   An array of new items now stored in the ModelContainer. 
     */
    added(items, transition) {
        let OWN_TRANSITION = false;

        if (!transition)
            transition = Animation.createTransition(), OWN_TRANSITION = true;

        for (let i = 0; i < items.length; i++) {
            let mgr = this.package.mount(null, items[i], false, undefined, this.parent);
            this.scopes.push(mgr);
        }

        if (OWN_TRANSITION) {
            this.limitUpdate();
            this.filterUpdate(transition);
            //this.arrange();
            this.render(transition);
            transition.play();
        }
    }

    revise() {
        if (this.cache) this.update(this.cache);
    }
    getTerms() {
        let out_terms = [];
        for (let i = 0, l = this.terms.length; i < l; i++) {
            let term = this.terms[i].term;
            if (term) out_terms.push(term);
        }
        if (out_terms.length == 0) return null;
        return out_terms;
    }
    get() {
        if (this.model instanceof MultiIndexedContainer) {
            if (this.data.index) {
                let index = this.data.index;
                let query = {};
                query[index] = this.getTerms();
                return this.model.get(query)[index];
            } else console.warn("No index value provided for MultiIndexedContainer!");
        } else {
            let scope = this.model.scope;
            let terms = this.getTerms();
            if (scope) {
                this.model.destroy();
                let model = scope.get(terms, null);
                model.pin();
                model.addView(this);
            }
            return this.model.get(terms);
        }
        return [];
    }
    down(data, changed_values) {
        for (let i = 0, l = this.activeScopes.length; i < l; i++) this.activeScopes[i].down(data, changed_values);
    }
    transitionIn(transition) {
        return;
        for (let i = 0, l = this.activeScopes.length; i < l; i++) {
            this.ele.appendChild(this.activeScopes[i].element);
            this.activeScopes[i].transitionIn(transition);
            this.activeScopes[i].update({
                arrange: {
                    index: i,
                    trs: transition.trs_in
                }
            });
        }
    }

    transitionOut(transition) {
        return;
        for (let i = 0, l = this.activeScopes.length; i < l; i++) this.activeScopes[i].transitionOut(transition);
    }
}

ScopeContainer.prototype.removeIO = Tap.prototype.removeIO;
ScopeContainer.prototype.addIO = Tap.prototype.addIO;

class ScopeManager {

    constructor(model, element) {
        this.scopes = [];
        this.model = model;
        this.ele = element;
        this.index = -1;
        this._APPEND_STATE_ = false;
        this._TRANSITION_STATE_ = false;
        this._DESTROYED_ = false;
        this.parent = null;
    }

    get element() {
        if (!this.ele)
            this.ele = this.scopes[0].ele;
        return this.ele;
    }

    destroy() {
        this.update({dismounted:true});

        for (let i = 0; i < this.scopes.length; i++){
            this.scopes[i].destroy();
        }
        this.scope = null;
        this.model = null;
        this.ele = null;
        this._DESTROYED_ = true;
        this.parent = null;
    }

    emit(name, value) {
        for (let i = 0; i < this.scopes.length; i++)
            this.scopes[i].upImport(name, value, {
                event: {}
            });
    }

    appendToDOM(element, before_element) {
        this._APPEND_STATE_ = true;
        this.mount;


        if (before_element)
            element.insertBefore(this.element, before_element);
        else
            element.appendChild(this.element);
    }

    _removeFromDOM_() {
        if (this._APPEND_STATE_ == true) return;

        if (this.ele && this.ele.parentElement)
            this.ele.parentElement.removeChild(this.ele);
    }

    transitionIn(transition, transition_name = "trs_in") {

        if (transition) {
            let data = {};

            data[transition_name] = transition;

            this.update(data);
        }

        this._TRANSITION_STATE_ = true;
    }

    transitionOut(transition, transition_name = "trs_out", DESTROY_ON_REMOVE = false) {

        this._APPEND_STATE_ = false;

        if (this._TRANSITION_STATE_ === false) {
            // if (DESTROY_ON_REMOVE && !this._DESTROYED_) this.destroy();
            this._removeFromDOM_();
            return;
        }

        let transition_time = 0;

        if (transition) {
            let data = {[transition_name]:transition};

            this.update(data);

            if (transition.trs)
                transition_time = transition.trs.out_duration;
            else
                transition_time = transition.out_duration;
        }


        this._TRANSITION_STATE_ = false;
        
        if (transition_time > 0)
            setTimeout(() => {
                this._removeFromDOM_();
                if (DESTROY_ON_REMOVE) this.destroy();
            }, transition_time + 2);
        else {
            this._removeFromDOM_();
            if (DESTROY_ON_REMOVE) this.destroy();
        }

        return transition_time;
    }

    upImport(prop_name, data, meta) {
        if (this.parent)
            this.parent.up(prop_name, data, meta, this);
        else
            this.up(prop_name, data, meta);
    }

    up(prop_name, data, meta) {

    }

    down(data, changed_values) {
        for (let i = 0; i < this.scopes.length; i++)
            this.scopes[i].down(data, changed_values);
    }

    update(data, changed_values) {
        for (let i = 0; i < this.scopes.length; i++)
            this.scopes[i].update(data, changed_values);
    }

    bubbleLink() {
        if (this.parent && this.parent.bubbleLink)
            this.parent.bubbleLink(this);
        else
            debugger
    }

    scopeLoaded() {
        this.update({ mounted: true });
    }
}

class BasePackage {
    constructor() {
        /**
         * When set to true indicates that the package is ready to be mounted to the DOM.
         */
        this.READY = false;

        /**
         * An array of AST objects.
         */
        this.asts = [];

        /**
         * An array objects to store pending calls to BasePackage#mount
         */
        this.pms = [];

        /**
         * An Array of error messages received during compilation of template.
         */
        this.errors = [];

        /**
         * An Array of style trees.
         */
        this.styles = [];


        /**
         * Flag to indicate BasePackage was compiled with errors
         */
        this.HAVE_ERRORS = false;

        this.links = [];

    }

    /**
     * Called when template compilation completes.
     *
     * Sets BasePackage#READY to true, send the pending mounts back through BasePackage#mount, and freezes itself.
     *
     * @protected
     */
    complete() {
        this.READY = true;

        for (let m, i = 0, l = this.pms.length; i < l; i++)
            (m = this.pms[i], this.mount(m.e, m.m, m.usd, m.mgr));


        this.pms.length = 0;

        this.freeze();

        return this;
    }


    // Adds Error message to the errors array.
    // ~dissuade-public
    addError(error_message) {
        this.HAVE_ERRORS = true;
        this.errors.push(error_message);
    }

    // Freezes properties.
    // ~dissuade-public
    freeze() {
        return;
        OB.freeze(this.READY);
        OB.freeze(this.asts);
        OB.freeze(this.styles);
        OB.freeze(this.pms);
        OB.freeze(this.errors);
        OB.freeze(this);
    }

    /**
     * Pushes pending mounts to the pms array.
     *
     * @param      {HTMLElement}  element         The element
     * @param      {Model}  model           The model
     * @param      {Boolean}  USE_SHADOW_DOM  The use shadow dom
     * @param      {Object}  manager         The manager
     *
     * @protected
     */
    pushPendingMount(element, model, USE_SHADOW_DOM, manager) {

        if (this.READY)
            return this.mount(element, model, USE_SHADOW_DOM, manager);

        this.pms.push({
            e: element,
            m: model,
            usd: USE_SHADOW_DOM,
            mgr: manager
        });

        return manager;
    }

    /**
     * Generates new instance of component and appends it to the input element. If the compilation of the component is not complete by the time this method is called,
     the arguments are stored in a temporary buffer and later run through this method again when compilation is completed.
     * @param  {HTMLElement} element         - The element
     * @param  {Model}   model           - The model the scope component will bind to. Binding only occurs if `model` or `schema` attributes are undefined in the component decleration, the `schema` attribute type matches the model type, or `schema` is set to "any".
     * @param  {boolean} USE_SHADOW_DOM  - If `true`, appends the component to the element's ShadowDOM.
     * @param  {Object}  manager         - A custom manager that stores built scope components. If not defined then a ScopeManager is created and returned.
     */
    mount(element, model, USE_SHADOW_DOM = false, manager = new ScopeManager(model, element), parent = manager) {

        if (!this.READY)
            return this.pushPendingMount(element, model, USE_SHADOW_DOM, manager);

        //if (!(element instanceof EL)) return null;

        if (this.HAVE_ERRORS) {
            //Process
            console.warn("TODO - Package has errors, pop an error widget on this element!");
        }

        let i = 0,
            l = 0;

        if (!manager.scopes)
            manager.scopes = [];

        if (USE_SHADOW_DOM) {

            let shadow_root = element.attachShadow({
                mode: "open"
            });

            element = shadow_root;

            if (this.styles)
                for (i = 0, l = this.styles.length; i < l; i++) {
                    let style = cloneNode(this.styles[i], true);
                    appendChild(element, style);
                }
        }


        for (i = 0, l = this.asts.length; i < l; i++) {

            let errors = [];

            let scope = this.asts[i].build(element, null, null, errors);

            if (scope) {
                scope.parent = manager;
                                
                scope.load(model);

                manager.scopes.push(scope);
            }
            
            if (errors.length > 0)
                errors.forEach(e => console.log(e));
        }

        if (manager.scopeLoaded) manager.scopeLoaded();

        return manager;
    }

    toString() {
        let str = "";

        for (let i = 0; i < this.links.length; i++)
            str += this.links[i];

        for (let i = 0; i < this.asts.length; i++)
            str += this.asts[i];

        return str;
    }
}

class ScopeContainerNode$1 extends RootNode {

    constructor(lex) {
        super(lex);
        this.BUILD_LIST = [];
        this.filters = [];
        this.property_bind = null;
        this.property_bind_text = "";
        this.package = null;
        this.MERGED = false;
    }

    merge(node) {
        const merged_node = super.merge(node);
        merged_nodes.BUILD_LIST = this.BUILD_LIST;
        merged_nodes.filters = this.filters;
        merged_nodes.property_bind = this.property_bind;
        merged_nodes.property_bind_text = this.property_bind_text;
        merged_nodes.package = this.package;
        merged_nodes.MERGED = true;
        return merged_node;
    }

    build(element, scope, presets, errors, taps, statics) {

        scope = scope || new Scope(null, presets, element, this);

        let
            pckg = this.package,
            HAS_STATIC_SCOPES = false;

        const
            ele = createElement(this.getAttribute("element") || "ul"),
            me = new ScopeContainer(scope, presets, ele);

        appendChild$1(element, ele);
        this.class.split(" ").map(c => c ? ele.classList.add(c) : {});

        if (this.HAS_TAPS)
            taps = scope.linkTaps(this.tap_list);

        if (this._badge_name_)
            scope.badges[this._badge_name_] = ele;

        if (this.property_bind)
            me.prop = this.property_bind._bind_(scope, errors, taps, me);

        for (let node = this.fch; node; node = this.getNextChild(node)) {

            if (node.tag == "f") {
                
                let
                    on = node.getAttrib("on"),
                    sort = node.getAttrib("sort"),
                    filter = node.getAttrib("filter"),
                    limit = node.getAttrib("limit"),
                    offset = node.getAttrib("offset"),
                    scrub = node.getAttrib("scrub"),
                    shift = node.getAttrib("shift");

                if (limit && limit.binding.type == 1) {
                    me.limit = parseInt(limit.value);
                    limit = null;
                }

                if (shift && shift.binding.type == 1) {
                    me.shift_amount = parseInt(shift.value);
                    shift = null;
                }

                if (sort || filter || limit || offset || scrub || shift) //Only create Filter node if it has a sorting bind or a filter bind
                    me.filters.push(new FilterIO(scope, errors, taps, me, on, sort, filter, limit, offset, scrub, shift));

            } else if (node.tag == "slot" && !pckg && statics.slots) {
                if (statics.slots[node.name]) {
                    const ele = statics.slots[node.name];
                    ele.__presets__ = this.presets;
                    pckg = new BasePackage();
                    pckg.asts.push(ele);
                    pckg.READY = true;
                }
            } else {
                //pack node into source manager
                const mgr = new ScopeManager();
                mgr.scopes.push(node.build(null, scope, presets, errors, statics));
                mgr.READY = true;
                me.scopes.push(mgr);
                HAS_STATIC_SCOPES = true;
            }
        }

        if (this.property_bind && pckg) {
            me.package = pckg;

            if (!me.package.asts[0].url)
                me.package.asts[0].url = this.getURL();

        } else if (HAS_STATIC_SCOPES) {
            spark.queueUpdate(me);
        } else {
            if (this.property_bind)
                //If there is no package at all then abort build of this element. TODO, throw an appropriate warning.
                errors.push(new Error(`Missing scope for container bound to "${this.property_bind.bindings[0].tap_name}"`));
            else
                errors.push(new Error(`Missing property binding for this node.`));
        }

        return scope;
    }

    /******************************************* HOOKS ****************************************************/

    endOfElementHook() { return this }

    _ignoreTillHook_() {}


    createHTMLNodeHook(tag, start) {

        switch (tag) {
            case "slot":
                return new SlotNode();
            case "f":
                return new FilterNode(); //This node is used to 
            default:
                if (this.property_bind)
                    return new PackageNode(start); //This node is used to build packages
                return super.createHTMLNodeHook(tag, start);
        }

    }

    processTextNodeHook(lex) {
        if (!this.property_bind) {
            this.property_bind_text = lex.slice().trim();

            let cp = lex.copy().trim();
            cp.IWS = true;
            cp.tl = 0;
            cp.next();


            if (cp.ch == barrier_a_start && (cp.pk.ch == barrier_a_start || cp.pk.ch == barrier_b_start)) {
                let binding = Template(cp);
                if (binding) {
                    this.property_bind = this.processTapBinding(binding);
                }
            }
        }

        return null;
    }

    innerToString(off) {
        //Insert temp child node for the property_bind
        let str = this.property_bind_text;

        str += super.innerToString(off);

        return str;
    }
}

class StyleNode$1 extends VoidNode$1 {
    processTextNodeHook(lex) {
        //Feed the lexer to a new CSS Builder
        let css = this.getCSS();

        lex.IWS = true;
        lex.tl = 0;
        lex.n;

        css.parse(lex).catch((e) => {
            throw e;
        });
    }
}

/**
 * SVG HTMLElements to be created with the svg namespace in order to be rendered correctly.
 * @class      SVGNode (name)
 */
class SVGNode extends RootNode {
    createElement(presets, scope) {
        return document.createElementNS("http://www.w3.org/2000/svg", this.tag);
    }

    createHTMLNodeHook(tag) {
        //jump table.
        switch (tag[0]) {
            case "w":
                switch (tag) {
                    case "w-s":
                        return new ScopeNode(); //This node is used to 
                    case "w-c":
                        return new ScopeContainerNode(); //This node is used to 
                }
                break;
            default:
                switch (tag) {
                    case "a":
                        return new LinkNode();
                        /** void elements **/
                    case "template":
                        return new VoidNode();
                    case "style":
                        return new StyleNode();
                    case "script":
                        return new ScriptNode();
                    case "svg":
                    case "path":
                        return new SVGNode();
                }
        }

        return new SVGNode();
    }
}

class PreNode extends HTMLNode {
    build(element) {
        let ele = document.createElement(this.tag);

        for (let i = 0, l = this.attributes.length; i < l; i++) {
            let attr = this.attributes[i];
            ele.setAttribute(attr.name, attr.value);
        }
        //let passing_element = ele;
        let passing_element = (this.tag == "template") ? ele.content : ele;

        for (let node = this.fch; node;
            (node = this.getNextChild(node))) {
            node.build(passing_element);
        }

        if (element) element.appendChild(ele);

        return ele;
    }

    async processTextNodeHook(lex, IS_INNER_HTML) {

        let t = lex.trim(1);

        if (!IS_INNER_HTML)
            return new TextNode(replaceEscapedHTML(t.slice()));

        let txt = "";

        if (t.string_length > 0)
            return new TextNode(replaceEscapedHTML(t.slice()));

        return null;
    }
}

//Since all nodes extend the RootNode, this needs to be declared here to prevent module cycles. 
async function CreateHTMLNode(tag, offset, lex) {

    if (await Plugin.parseHTMLonTag(tag, this, lex))
        return null;
    //jump table.
    if (tag[0] == "w")
        switch (tag) {
            case "w-s":
            case "w-scope":
                return new ScopeNode$1(); //This node is used to 
            case "w-c":
            case "w-container":
                return new ScopeContainerNode$1(); //This node is used to 
        }
        
    switch (tag) {
        case "a":
            return new LinkNode$1();
            /** void elements **/
        case "template":
            return new VoidNode$1();
        case "css":
        case "style":
            return new StyleNode$1();
        case "js":
        case "script":
            return new ScriptNode$1();
        case "svg":
        case "path":
            return new SVGNode();
        case "container":
            return new ScopeContainerNode$1();
        case "scope":
            return new ScopeNode$1();
        case "slot":
            return new SlotNode();
            //Elements that should not be parsed for binding points.
        case "pre":
        case "code":
            return new PreNode();
    }


    return new RootNode();
}

RootNode.prototype.createHTMLNodeHook = CreateHTMLNode;

// Adding the parseHTMLonTag to the original HTMLNode object. 
HTMLNode.prototype.createHTMLNodeHook = async function(tag, start, lex) { if (await Plugin.parseHTMLonTag(tag, this, lex)) return null; return new HTMLNode(tag); };

// Adding the parseInnerHTMLOnTag plugin to the original HTMLNode object.
HTMLNode.prototype.ignoreTillHook = async function(tag, lex) {
    
    if (await Plugin.parseInnerHTMLOnTag(tag, this, lex)){
        return true;
    }

    if (tag == "script" || tag == "style") // Special character escaping tags.
        return true;

    return false;
};

// Adding replaceEscapedHTML to original HTMLNode object.
HTMLNode.prototype.processTextNodeHook = async function(lex, IS_INNER_HTML) {

    let t = lex.trim(1);

    if (!IS_INNER_HTML)
        return new TextNode(replaceEscapedHTML(t.slice()));

    if (t.string_length > 0)
        return new TextNode(replaceEscapedHTML(t.slice()));

    return null;
};

HTMLNode.prototype.endOfElementHook = async function(){
    return await Plugin.tagHandler(this.tag, this);
};

async function complete(lex, ScopePackage, presets, ast, url, win) {


    //Record URL if present for proper error messaging. 
    if (url && !ast.url)
        ast.url = url;

    /*
     * Only accept certain nodes for mounting to the DOM. 
     * The custom element `import` is simply used to import extra HTML data from network for use with template system. It should not exist otherwise.
     */
    if (ast.tag) {
        if ((ast.tag == "import" || ast.tag == "link")) {
            //add tags to package itself.
            ScopePackage.links.push(ast);
        } else if (ast.tag !== "template") {
            ScopePackage.asts.push(ast);
        }
    }

    lex.IWS = true;

    while (!lex.END && lex.ch != "<") { lex.n; }

    if (!lex.END)
        return await parseText(lex, ScopePackage, presets, url, win);

    ScopePackage.complete();

    return ScopePackage;
}

async function buildCSS(lex, ScopePackage, presets, ast, css_list, index, url, win) {
    await css_list[index].READY();

    if (++index < css_list.length) return await buildCSS(lex, ScopePackage, presets, ast, css_list, index, url, win);

    ast.linkCSS(null, win);

    return await complete(lex, ScopePackage, presets, ast, url, win);
}

async function parseText(lex, ScopePackage, presets, url, win) {
    let start = lex.off;

    while (!lex.END && lex.ch != "<") { lex.n; }

    if (!lex.END) {

        if (lex.pk.ty != lex.types.id)
            lex.throw(`Expecting an Identifier after '<' character, ${lex.str}`);

        let node = await CreateHTMLNode(lex.p.tx);

        node.presets = presets;

        try {
            const ast = await node.parse(lex, url);

            if (ast.css && ast.css.length > 0)
                return await buildCSS(lex, ScopePackage, presets, ast, ast.css, 0, url, win);

            return await complete(lex, ScopePackage, presets, ast, url, win);
        } catch (e) {
            ScopePackage.addError(e);
            ScopePackage.complete();

            return ScopePackage;
        }
    }
    
    ScopePackage.addError(new Error(`Unexpected end of input. ${lex.slice(start)}, ${lex.str}`));
    ScopePackage.complete();
}


/**
 * Compiles an object graph based input into a ScopePackage.
 * @param      {ScopePackage}  ScopePackage     The scope package
 * @param      {Presets}  presets           The global Presets instance
 * @param      {HTMLElement | Lexer | string}  element     The element
 * @memberof module:wick~internals.templateCompiler
 * @alias CompileScope
 */
function HTMLCompiler(ScopePackage, presets, element, url, win = window) {
    
    if(!url)
        url = URL.G;

    let lex;
    if (element instanceof whind$1.constructor) {
        lex = element;
    } else if (typeof(element) == "string")
        lex = whind$1(element);
    else if (element instanceof EL) {
        if (element.tagName == "TEMPLATE") {
            let temp = document.createElement("div");
            temp.appendChild(element.content);
            element = temp;
        }
        lex = whind$1(element.innerHTML);
    } else {
        let e = new Error("Cannot compile component");
        ScopePackage.addError(e);
        ScopePackage.complete();
    }
    return parseText(lex, ScopePackage, presets, url, win);
}

class ScopePackage extends BasePackage {

    constructor(element, presets, RETURN_PROMISE = false, url = "", win = window) {

        //If a package exists for the element already, it will be bound to __wick_package_. That will be returned.
        if (element && element.__wick_package_) {
            if (RETURN_PROMISE)
                return new Promise((res) => res(element.__wick_package_));
            return element.__wick_package_;
        }

        super();

        if (element instanceof Promise) {
            element.then((data) => HTMLCompiler(this, presets, data, url, win));
            if (RETURN_PROMISE) return element;
            return this;
        } else if (element instanceof RootNode) {

            // Already a ComponentASTTree.
            this.asts.push(element);
            this.complete();
            return;
        } else if (!(element instanceof HTMLElement) && typeof(element) !== "string" && !(element instanceof whind$1.constructor)) {
            let err = new Error("Could not create package. element is not an HTMLElement");
            this.addError(err);
            this.complete();
            if (RETURN_PROMISE)
                return new Promise((res, rej) => rej(err));
            return;
        }

        //Start the compiling of the component.
        let promise = HTMLCompiler(this, presets, element, url, win);

        OB$1.seal(this);

        if (RETURN_PROMISE)
            return promise;
        else
            return this;

    }
}

PackageNode.prototype.ScopePackage = ScopePackage;

/** This is the entire object structure of Wick, minus the platform specific outputs found in /scope/root/ */

const model = (data, schema) => new SchemedModel(data, undefined, undefined, schema);
model.scheme = (s, scheme) => (scheme = class extends SchemedModel {}, scheme.schema = s, scheme);
model.constr = SchemedModel;
model.any = (data) => new Model(data);
model.any.constr = Model;
model.container = {
    multi: MultiIndexedContainer,
    array: ArrayModelContainer,
    btree: BTreeModelContainer,
    constr: ModelContainerBase
};
model.store = (data) => new Store(data);

//Construct Schema Exports
const scheme = Object.create(schemes);
scheme.constr = SchemeConstructor;
scheme.constr.bool = BoolSchemeConstructor;
scheme.constr.number = NumberSchemeConstructor;
scheme.constr.string = StringSchemeConstructor;
scheme.constr.date = DateSchemeConstructor;
scheme.constr.time = TimeSchemeConstructor;

const Utils = {
    replaceEscapedHTML
};

Object.freeze(scheme.constr);
Object.freeze(scheme);
Object.freeze(Presets);
Object.freeze(Utils);
Object.freeze(model.container.constr);
Object.freeze(model.container);
Object.freeze(model.any);
Object.freeze(model);

const core = {
    presets: a => new Presets(a),
    scheme: scheme,
    model: model,
    scope: (...a) => new ScopePackage(...a),
    plugin : Plugin,
    utils: Utils
};

core.scope.compiler = HTMLCompiler;

HTMLCompiler.nodes = {
    root: RootNode,
    style: StyleNode$1,
    script: ScriptNode$1,
    text: RootText,
    scope: ScopeNode$1,
    package: PackageNode,
    template: ScopeContainerNode$1,
    svg:SVGNode
};

core.scope.package = ScopePackage;
core.scope.constructor = Scope;

Object.freeze(core.scope);
Object.freeze(core);

const scope = core.scope;

class ScopedNode extends ScriptNode$1 {
    processAttributeHook(name, lex, func) {
        switch (name) {
            case "on":
                let binding = Template(lex, false);
                if (binding.type == DYNAMICbindingID) {
                    binding.method = SCRIPT;
                    this.binding = this.processTapBinding(binding);
                    this.binding.HAVE_CLOSURE = true;
                    this.binding._func_ = func;
                }
                return null;
        }

        return { name, value: lex.slice() };
    }

    toString(){ return  "" };
}

const 
    regFNHead = /([^=]*\=\>\s*\{?)|(function[^\{]*{)/,
    regFNTail = /\}$/,
	getFunctionBodyString = fn => fn.toString().replace(regFNHead, "").replace(regFNTail, "").trim();

const
    UID = () => "$ID" + (Date.now().toString(16).slice(-12) + ((Math.random() * 100000) | 0).toString(16)).slice(-16),

    //Bit offsets for NEED_SCOPE_BITS flag;
    SCOPE_BITS = {
        MODEL: 0,
        SCHEME: 1,
        EXPORT: 2,
        IMPORT: 3,
        PUT: 4,
        ARRAY_MODEL: 5,
        FUNCTION_MODEL: 6,
    };



const JSCompiler = (data, presets) => createComponentWithJSSyntax(data, presets, document.location.toString());

/**
 * This module allows JavaScript to be used to describe wick components. 
 */
async function createComponentWithJSSyntax(data, presets = new Presets(), locale = "", stack = [], async_wait = { waiting: 0 }) {

    const
        base = ++async_wait.waiting,
        rs_base = stack.length,
        DATA_IS_STRING = typeof(data) == "string";

    let url = data;

    if ((DATA_IS_STRING && (url = URL.resolveRelative(data, locale))) || data instanceof URL) {

        const
            //Must be a JavaScript object, based on MIME and extension.
            ext = url.ext;

        if (ext == "js") {

            try {
                //Attempt to load data. If this fails, than data is not a URL or the resource (does not exist / is not accessible).
                const data = await url.fetchText();

                if (url.MIME == "text/javascript");

                await (new Promise(async res => {

                    const out = (data) => createComponentWithJSSyntax(data, presets, url, stack, async_wait);

                    (new Function("wick", "url", data))(Object.assign(out, JSCompiler), url);


                    // Since we have an async function, we need some way to wait for the function to 
                    // return be fore contining this particular execution stack.
                    // setTimeout allows JS to wait without blocking.
                    function e() {
                        if (async_wait.waiting <= base) {
                            res();
                            clearInterval(id);
                        }
                    }

                    let id = setInterval(e, 0);
                }));

                let rvalue = null;

                while (stack.length > rs_base)
                    rvalue = stack.shift();

                async_wait--;

                return rvalue;
            } catch (e) {
                console.log.log(e);
            }
        } else if (ext == "mjs") {
            return; //Todo, parse using import syntax
        } else if (ext == "html") {
            // fold data into itself to take advantage of ScopePackages automatic behavior when 
            // presented with a url
            data = { dom: await url.fetchText() };

            //Make sure we treat the previous fetch as the new url base.
            locale = url;
        }


    }

    if (DATA_IS_STRING || data instanceof HTMLElement)
        data = { dom: data };

    let
        pkg = null,
        NEED_SCOPE_BITS = 0,
        NEED_CONTAINER_BITS = 0,
        tree,
        container,
        container_scope;

    // Every tree root should be a ScopeNode instance if data includes scope node attributes.              
    // Create a bit field of all values that necessitate a ScopeNode. 

    NEED_SCOPE_BITS |= ((typeof(data.model) !== "undefined") | 0) << SCOPE_BITS.MODEL;
    NEED_SCOPE_BITS |= ((typeof(data.scheme) !== "undefined") | 0) << SCOPE_BITS.SCHEME;
    NEED_SCOPE_BITS |= ((typeof(data.export) !== "undefined") | 0) << SCOPE_BITS.EXPORT;
    NEED_SCOPE_BITS |= ((typeof(data.import) !== "undefined") | 0) << SCOPE_BITS.IMPORT;
    NEED_SCOPE_BITS |= ((typeof(data.put) !== "undefined") | 0) << SCOPE_BITS.PUT;
    //NEED_CONTAINER_BITS |= ((typeof(data.model) === "function") | 0) << SCOPE_BITS.FUNCTION_MODEL;
    NEED_CONTAINER_BITS |= (Array.isArray(data.model) | 0) << SCOPE_BITS.ARRAY_MODEL;

    // If the model or scheme is an array, then the resulting component root should be either a 
    // ContainerNode or a ContainerNode wrapped inside a ScopeNode.

    if (data.dom && (typeof(data.dom) == "string" || data.dom.tagName == "TEMPLATE")) {

        let val = data.dom;

        if (typeof(data.dom) == "string") {

            const url = URL.resolveRelative(data.dom, locale);

            if (url && url.ext == "html")
                val = await url.fetchText();
        }

        try {
            pkg = await new ScopePackage(val, presets, true, locale);

            //Throw any errors generated by package creation. 
            //TODO - implement error system.
            if (pkg.HAVE_ERRORS)
                throw pkg.errors[0]

            var { scope_tree, container_tree, container_scope_tree } = EnsureRootScope(pkg, NEED_SCOPE_BITS, NEED_CONTAINER_BITS, presets);
        } catch (e) {
            throw e;
        }

    } else {

        // This object contains other information that can be appended to a component, but the 
        // component itself may not be mountable
        if (NEED_SCOPE_BITS !== 0) {
            let src = new ScriptNode$1();

            src.__presets__ = presets;

            pkg = new BasePackage();

            pkg.asts = [src];

            var scope_tree = src;
        }
    }

    const { injects, model, scheme } = await integrateProperties(scope_tree, container_tree, container_scope_tree, presets, data);


    // TODO: If there is a component property and no Scope attributes defined either 
    // in data or in the compiled tree, then extract the component from the package 
    // and discard package value.

    //Pass throughs are used to inject methods and attributes without affecting the dom. 

    // The default action with this object is to convert component back into a 
    // HTML tree string form that can be injected into the DOM of other components. 
    // Additional data can be added to this object before injection using this method.
    let return_value = (data) => scope_tree.toString();

    return_value.toString = async function(model = {}) {

        if (model) {

            let scope = scope_tree.build(null, null, presets, [], null, null, true);

            scope.load(model);

            //Wait one tick to update any IOs that are dependent on spark
            await (new Promise(res => setTimeout(res, 1)));

            return scope.ele.toString()
        }

        return scope_tree.toString();
    };

    Object.assign(return_value, injects, { model, scheme, get tree() { return scope_tree } });

    //Unashamedly proxying the ScopePackage~mount method
    return_value.mount = (e, m, s, mgr) => pkg.mount(e, m, s, mgr);

    Object.freeze(return_value);


    async_wait.waiting--;

    stack.push(return_value);

    return return_value;
}

function checkFlag(FLAG_BITS, flag_bit_offset) {
    return !!(FLAG_BITS >> flag_bit_offset & 1);
}
// Ensure that if there is a need for a ScopeNode, there is one set as the root of the tree 
// Having multiple node trees also require them to be sub-trees of a ScopeNode, to ensure expected 
// Component results.
function EnsureRootScope(pkg, NEED_SCOPE_BITS, NEED_CONTAINER_BITS, presets) {

    let
        scope_tree = null,
        container_tree = null,
        container_scope_tree = null,
        tree = null;

    if (pkg.asts.length > 1) NEED_SCOPE_BITS |= 0x1000000;

    if (NEED_SCOPE_BITS || NEED_CONTAINER_BITS) {
        if (pkg.asts.length == 1 && pkg.asts[0] instanceof ScopeNode$1)
            scope_tree = pkg.asts[0];
        else {
            let scope = new ScopeNode$1();

            scope.tag = "w-s";

            for (let i = 0; i < pkg.asts.length; i++)
                scope.addChild(pkg.asts[i]);

            scope.__presets__ = presets;

            pkg.asts = [scope];

            scope_tree = scope;
        }
    } else
        scope_tree = pkg.asts[0];

    if (NEED_CONTAINER_BITS) {
        //Wrap existing scope into a container
        container_tree = new ScopeContainerNode$1();
        container_tree.__presets__ = presets;
        container_tree.tag = "w-c";
        container_tree.package = new BasePackage();
        container_tree.package.READY = true;
        container_tree.package.asts = pkg.asts;

        pkg.asts = [container_tree];

        container_scope_tree = container_tree.package.asts[0];
        scope_tree = container_scope_tree;

        /*SCOPE_BITS = {
            MODEL: 0,
            SCHEME: 1,
            EXPORT: 2,
            IMPORT: 3,
            PUT: 4,
            ARRAY_MODEL: 5,
            FUNCTION_MODEL: 6,
        }*/

        if (
            checkFlag(NEED_SCOPE_BITS, SCOPE_BITS.MODEL) ||
            checkFlag(NEED_SCOPE_BITS, SCOPE_BITS.IMPORT) ||
            checkFlag(NEED_SCOPE_BITS, SCOPE_BITS.EXPORT) ||
            checkFlag(NEED_SCOPE_BITS, SCOPE_BITS.PUT)
        ) {
            const scope = new ScopeNode$1();

            scope.tag = "w-s";

            scope.addChild(container_tree);

            scope.__presets__ = presets;

            pkg.asts = [scope];

            scope_tree = scope;
        }
    }


    return { scope_tree, container_tree, container_scope_tree };
}

async function integrateProperties(src, cntr, cntr_src, presets, data) {
    const injects = {};
    let
        scheme = null,
        appending_inject = null;

    //Cycle through 
    for (let name in data) {
        let v = data[name];
        switch (name) {
            case "filter":
                break;
            case "inject":
                if (Array.isArray(v))
                    for (let i = 0; i < v.length; i++)
                        integrateProperties(src, presets, v[i]);
                else
                    integrateProperties(src, presets, v);
                break;
            case "dom":
                break;
            case "element":
                InjectElement(cntr_src || src, v);
                break;
            case "tag":
                InjectTag(src, presets, v);
                break;
            case "model":
                InjectModel(src, cntr, v, presets);
                break;
            case "scheme":
                InjectSchema(cntr_src || src, v, presets);
                break;
            case "import":
                InjectImport(src, v);
                if (cntr_src)
                    InjectImport(cntr_src, v);
                break;
            case "export":
                InjectExport(src, v);
                if (cntr_src)
                    InjectExport(cntr_src, v);
                break;
            case "put":
                InjectPut(src, v);
                if (cntr_src)
                    InjectPut(cntr_src, v);
                break;
            default:
                if (appending_inject = await InjectFunction(src, name, v)) {
                    Object.assign(injects, appending_inject);
                    break;
                }
        }
    }

    return { injects, scheme };
}

function InjectElement(tree, v) {
    if (tree instanceof ScopeNode$1)
        tree.setAttribute("element", whind$1(String(v)));
}

function InjectTag(tree, presets, tag_name) {

    let components = presets.components;
    if (components)
        components[tag_name] = tree;
}

function InjectModel(src_tree, container_tree, model, presets) {
    if (typeof(model) == "string" && presets.models[model]) {
        src_tree._model_name_ = model;
    } else {
        if (container_tree) {
            if (!Array.isArray(model) || model.length == 0)
                throw new Error("Expecting an array value in for model");
            let offset = 0;

            if (model.length > 1) {
                offset++;

                let uid = UID(),
                    m = model[0];

                if (!(m instanceof ModelBase))
                    m = new Model(m);

                presets.models[uid] = m;

                src_tree._model_name_ = uid;
            }

            if (typeof(model[offset]) !== "string")
                throw new Error("Expecting a string expression inside array");

            container_tree.processTextNodeHook(whind$1(`((${model[offset]}))`));

        } else {

            let uid = UID();

            if (!(model instanceof ModelBase))
                model = new Model(model);

            presets.models[uid] = model;

            src_tree._model_name_ = uid;
        }
    }
}

function InjectSchema(tree, scheme, presets) {

    let
        uid = UID(),
        Scheme = scheme;

    if (!Scheme.prototype || !(Scheme.prototype instanceof SchemedModel)) {
        Scheme = class extends SchemedModel {};
        Scheme.schema = scheme;
    }

    presets.schemas[uid] = Scheme;

    tree._schema_name_ = uid;
}

function InjectImport(tree, $import) {
    if (tree instanceof ScopeNode$1) {
        const val = Array.isArray($import) ? $import.join(",") : $import;
        tree.processAttributeHook("import", whind$1(String(val)));
    }
}

function InjectExport(tree, $export) {
    if (tree instanceof ScopeNode$1) {
        const val = Array.isArray($export) ? $export.join(",") : $export;
        tree.processAttributeHook("export", whind$1(String(val)));
    }
}

function InjectPut(tree, put) {

    if (tree instanceof ScopeNode$1) {
        const val = Array.isArray(put) ? put.join(",") : put;
        tree.processAttributeHook("put", whind$1(String(val)));
    }
}

async function InjectFunction(tree, function_id, function_value) {

    const formal_tag = function_id.slice(0, 2);

    if (formal_tag[0] == "$" && formal_tag !== "$$") {

        const
            script = new ScriptNode$1(),
            function_name = function_id.slice(1);

        script.tag = "script";


        tree.addChild(script);

        script.processAttributeHook("on", whind$1(`((${function_name}))`));

        //if data is url pull that data in, other wise extract function data. 
        if (typeof function_value == "string") {
            //script.script_text = new URL().fetch()
        } else {
            script.processTextNodeHook(whind$1(getFunctionBodyString(function_value)));
        }

        return {
            [function_id]: function_value
        };

    } else if (formal_tag == "$$") {

        const closure = new ScopedNode();
        const function_name = function_id.slice(2);

        tree.addChild(closure);

        closure.processAttributeHook("on", whind$1(`((${function_name}))`), function_value);

        return {
            [function_id]: function_value
        };
    }

    return null;
}

//Url Importing is extended to allow Component function to resolve HTML/JS/MJS url requests
RootNode.prototype.processFetchHook = function(lexer, OPENED, IGNORE_TEXT_TILL_CLOSE_TAG, parent, url) {
    let path = this.url.path,
        CAN_FETCH = true;

    //make sure URL is not already called by a parent.
    while (parent) {
        if (parent.url && parent.url.path == path) {
            console.warn(`Preventing recursion on rescope ${this.url.path}`);
            CAN_FETCH = false;
            break;
        }
        parent = parent.par;
    }

    if (CAN_FETCH) {
        return this.url.fetchText().then(async (text) => {
            const { ext, data } = await Plugin.extensionParse(this.url.ext, text);

            let lexer = whind$1(data);
            if (ext == "html")
                return this.parseRunner(lexer, true, IGNORE_TEXT_TILL_CLOSE_TAG, this, this.url);
            else if (ext == "js") {

                if (this.tag == "script")
                    return this.parseRunner(lexer, true, IGNORE_TEXT_TILL_CLOSE_TAG, this, this.url);

                const tree = (await JSCompiler(this.url, this.presets)).tree;

                this.addChild(tree);

                return this;
            } else if (ext == "mjs") {
                debugger
            }
        }).catch((e) => {
            return this;
        });
    }
    return null;
};

const wick$1 = JSCompiler;

Object.assign(wick$1, core, {
    classes: {
        Presets,
        Store,
        SchemedModel,
        Model,
        ModelContainerBase,
        MultiIndexedContainer,
        BTreeModelContainer,
        ArrayModelContainer,
        View,
        ScopePackage,
        Scope,
        HTMLCompiler,
        RootText,
        RootNode,
        StyleNode: StyleNode$1,
        ScriptNode: ScriptNode$1,
        ScopeNode: ScopeNode$1,
        PackageNode,
        ScopeContainerNode: ScopeContainerNode$1,
        SVGNode,
        SchemeConstructor,
        DateSchemeConstructor,
        TimeSchemeConstructor,
        StringSchemeConstructor,
        NumberSchemeConstructor,
        BoolSchemeConstructor
    },

    toString: () => `CandleFW Wick 2019`
});

wick$1.whind = whind$1;
Object.freeze(wick$1);

exports.default = wick$1;
